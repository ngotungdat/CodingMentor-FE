{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\ScheduleStudy\\\\ScheduleStudy.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, Spin } from 'antd';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { branchApi, checkBranchScheduleStudy, checkTeacherScheduleStudy, courseDetailApi, roomApi, studyTimeApi, teacherApi } from '~/apiBase';\nimport TitlePage from '~/components/TitlePage';\nimport { useWrap } from '~/context/wrap';\nimport { fmSelectArr } from '~/utils/functions';\nimport CDCalendar from '../CourseList/CourseListDetail/CourseDetailCalendar/Calendar';\nimport CheckBranch from './Form/CheckBranch';\nimport CheckOneTeacher from './Form/CheckOneTeacher';\nimport CheckManyEmptyTeacher from './Form/ManyTeacher';\nimport ScheduleStudyList from './List/List';\n\nconst ScheduleStudy = () => {\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: optionList,\n    1: setOptionList\n  } = useState({\n    branchList: [],\n    studyTimeList: [],\n    roomList: [],\n    teacherList: []\n  });\n  const {\n    0: dataList,\n    1: setDataList\n  } = useState({\n    list: [],\n    type: ''\n  });\n  const {\n    0: infoSearch,\n    1: setInfoSearch\n  } = useState(null);\n\n  const fetchData = async () => {\n    setIsLoading({\n      type: 'FETCH_DATA',\n      status: true\n    });\n\n    try {\n      Promise.all([branchApi.getAll({\n        pageSize: 99999,\n        pageIndex: 1\n      }), studyTimeApi.getAll({\n        selectAll: true\n      })]).then(res => {\n        const [branchList, studyTimeList] = res.map(r => r.status === 200 ? r.data.data : []);\n\n        if (branchList.length) {\n          setOptionList(preState => _objectSpread(_objectSpread({}, preState), {}, {\n            branchList: fmSelectArr(branchList, 'BranchName', 'ID')\n          }));\n        }\n\n        if (studyTimeList.length) {\n          setOptionList(preState => _objectSpread(_objectSpread({}, preState), {}, {\n            studyTimeList: fmSelectArr(studyTimeList, 'Name', 'ID')\n          }));\n        }\n      });\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_DATA',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchRoomByBranchID = async ID => {\n    setIsLoading({\n      type: 'FETCH_ROOM',\n      status: true\n    });\n\n    try {\n      const res = await roomApi.getAll({\n        BranchID: ID,\n        pageSize: 99999\n      });\n\n      if (res.status === 200) {\n        const fmRoomList = fmSelectArr(res.data.data, 'RoomName', 'RoomID');\n        setOptionList(_objectSpread(_objectSpread({}, optionList), {}, {\n          roomList: fmRoomList\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionList(_objectSpread(_objectSpread({}, optionList), {}, {\n          roomList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_ROOM',\n        status: false\n      });\n    }\n  };\n\n  const fetchTeacherByBranchID = async ID => {\n    setIsLoading({\n      type: 'FETCH_TEACHER',\n      status: true\n    });\n\n    try {\n      const res = await teacherApi.getAll({\n        BranchID: ID,\n        pageSize: 99999\n      });\n\n      if (res.status === 200) {\n        const fmTeacherList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID');\n        setOptionList(_objectSpread(_objectSpread({}, optionList), {}, {\n          teacherList: fmTeacherList\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionList(_objectSpread(_objectSpread({}, optionList), {}, {\n          teacherList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_TEACHER',\n        status: false\n      });\n    }\n  }; // Room\n\n\n  const onCheckRoom = async value => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      const {\n        RoomID,\n        StartTime,\n        EndTime,\n        BranchID\n      } = value;\n      const fmObj = {\n        RoomID,\n        StartTime: moment(StartTime).format('YYYY/MM/DD'),\n        EndTime: moment(EndTime).format('YYYY/MM/DD')\n      };\n      res = await courseDetailApi.getAll(fmObj);\n\n      if (res.status === 200) {\n        var _optionList$branchLis, _optionList$roomList$;\n\n        setInfoSearch({\n          title: 'Kiểm tra phòng',\n          branchName: ((_optionList$branchLis = optionList.branchList.find(b => b.value === BranchID)) === null || _optionList$branchLis === void 0 ? void 0 : _optionList$branchLis.title) || '',\n          roomName: ((_optionList$roomList$ = optionList.roomList.find(b => b.value === RoomID)) === null || _optionList$roomList$ === void 0 ? void 0 : _optionList$roomList$.title) || '',\n          fromDate: moment(StartTime).format('DD/MM/YYYY'),\n          toDate: moment(EndTime).format('DD/MM/YYYY')\n        });\n        setDataList({\n          list: res.data.data,\n          type: ''\n        });\n        showNoti('success', res.data.message);\n      }\n\n      if (res.status === 204) {\n        showNoti('danger', 'Không tìm thấy');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  }; // OneTeacher\n\n\n  const onCheckOneTeacher = async value => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      const {\n        TeacherID,\n        StartTime,\n        EndTime,\n        BranchID\n      } = value;\n      const fmObj = {\n        TeacherID: +TeacherID.toString(),\n        StartTime: moment(StartTime).format('YYYY/MM/DD'),\n        EndTime: moment(EndTime).format('YYYY/MM/DD')\n      };\n      res = await courseDetailApi.getAll(fmObj);\n\n      if (res.status === 200) {\n        var _optionList$teacherLi, _optionList$branchLis2;\n\n        setInfoSearch({\n          title: 'Lịch giáo viên',\n          teacherName: ((_optionList$teacherLi = optionList.teacherList.find(b => b.value === TeacherID)) === null || _optionList$teacherLi === void 0 ? void 0 : _optionList$teacherLi.title) || '',\n          branchName: ((_optionList$branchLis2 = optionList.branchList.find(b => b.value === BranchID)) === null || _optionList$branchLis2 === void 0 ? void 0 : _optionList$branchLis2.title) || '',\n          fromDate: moment(StartTime).format('DD/MM/YYYY'),\n          toDate: moment(EndTime).format('DD/MM/YYYY')\n        });\n        setDataList({\n          list: res.data.data,\n          type: ''\n        });\n        showNoti('success', res.data.message);\n      }\n\n      if (res.status === 204) {\n        showNoti('danger', 'Không tìm thấy');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  }; // CALENDAR FORMAT\n\n\n  const calendarFm = calendarArr => {\n    const rs = calendarArr.map((c, idx) => {\n      const {\n        ID,\n        CourseID,\n        CourseName,\n        RoomName,\n        BranchName,\n        TeacherName,\n        SubjectName,\n        StartTime,\n        EndTime,\n        LinkDocument\n      } = c;\n      const studyTimeStart = moment(StartTime).format('HH:mm');\n      const studyTimeEnd = moment(EndTime).format('HH:mm');\n      const studyTime = `${studyTimeStart} - ${studyTimeEnd}`;\n      return {\n        id: +ID,\n        title: '',\n        start: moment(StartTime).toDate(),\n        end: moment(EndTime).toDate(),\n        resource: {\n          ID,\n          CourseID,\n          CourseName,\n          RoomName,\n          BranchName,\n          TeacherName,\n          SubjectName,\n          LinkDocument,\n          //\n          StudyTimeName: studyTime\n        }\n      };\n    });\n    return rs;\n  }; // OTHER VIEW\n  // ManyTeacher\n\n\n  const onCheckEmptyManyTeacher = async value => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      const {\n        TeacherID,\n        StudyTimeID,\n        StartTime,\n        EndTime,\n        BranchID\n      } = value;\n      const fmObj = {\n        TeacherID: TeacherID.toString(),\n        StudyTimeID: StudyTimeID.join(','),\n        StartTime: moment(StartTime).format('YYYY/MM/DD'),\n        EndTime: moment(EndTime).format('YYYY/MM/DD')\n      };\n      res = await checkTeacherScheduleStudy.getAll(fmObj);\n\n      if (res.status === 200) {\n        var _optionList$branchLis3;\n\n        setDataList({\n          list: res.data.data,\n          type: 'CheckManyTeacher'\n        });\n        setInfoSearch({\n          title: 'Lịch nhiều giáo viên',\n          branchName: ((_optionList$branchLis3 = optionList.branchList.find(b => b.value === BranchID)) === null || _optionList$branchLis3 === void 0 ? void 0 : _optionList$branchLis3.title) || '',\n          fromDate: moment(StartTime).format('DD/MM/YYYY'),\n          toDate: moment(EndTime).format('DD/MM/YYYY')\n        });\n        showNoti('success', res.data.message);\n      }\n\n      if (res.status === 204) {\n        showNoti('danger', 'Không tìm thấy');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  };\n\n  const fmListOfEmptyTeacher = calendarArr => {\n    // rs = {\n    //     \"2021/08/11\": {\n    //         \"21-Ca 08:00 - 10:00\": [\n    //             {\n    //                 \"TeacherID\": 1236,\n    //                 \"TeacherName\": \"Kim Bảo 98\",\n    //                 \"StudyTimeID\": 21,\n    //                 \"StudyTimeName\": \"Ca 08:00 - 10:00\",\n    //                 \"Date\": \"2021-08-11T00:00:00\",\n    //                 \"StartTime\": \"2021-08-11T08:00:00\",\n    //                 \"EndTime\": \"2021-08-11T10:00:00\"\n    //             },\n    //         ],\n    //     }\n    // }\n    const rs = {};\n    const newCalendarArr = [...calendarArr];\n\n    for (let i = 0; i < newCalendarArr.length; i++) {\n      const c = newCalendarArr[i];\n      const {\n        Date,\n        StudyTimeID,\n        StudyTimeName,\n        StartTime\n      } = c;\n      const fmDateTimeStamp = moment(StartTime).format('X');\n      const fmDate = moment(Date).format('YYYY/MM/DD');\n      const fmStudyTime = `${StudyTimeID}-${StudyTimeName}-${fmDateTimeStamp}`;\n\n      if (rs[fmDate]) {\n        if (rs[fmDate][fmStudyTime]) {\n          rs[fmDate][fmStudyTime].push(c);\n        } else {\n          rs[fmDate][fmStudyTime] = [c];\n        }\n      } else {\n        rs[fmDate] = {};\n        newCalendarArr.push(c);\n      }\n    }\n\n    return rs;\n  }; // ============================================================================\n  // ============================================================================\n  // ============================================================================\n  // ============================================================================\n  // ============================================================================\n  // ============================================================================\n  //Branch\n\n\n  const onCheckScheduleOfBranch = async value => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      const {\n        BranchID,\n        StartTime,\n        EndTime\n      } = value;\n      const fmObj = {\n        branchId: BranchID,\n        from: moment(StartTime).format('YYYY/MM/DD'),\n        to: moment(EndTime).format('YYYY/MM/DD')\n      };\n      res = await checkBranchScheduleStudy.getAll(fmObj);\n\n      if (res.status === 200) {\n        var _optionList$branchLis4;\n\n        setDataList({\n          list: res.data.data,\n          type: 'CheckBranch'\n        });\n        setInfoSearch({\n          title: 'Lịch trung tâm',\n          branchName: ((_optionList$branchLis4 = optionList.branchList.find(b => b.value === BranchID)) === null || _optionList$branchLis4 === void 0 ? void 0 : _optionList$branchLis4.title) || '',\n          fromDate: moment(StartTime).format('DD/MM/YYYY'),\n          toDate: moment(EndTime).format('DD/MM/YYYY')\n        });\n        showNoti('success', res.data.message);\n      }\n\n      if (res.status === 204) {\n        showNoti('danger', 'Lịch trống');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  };\n\n  useEffect(() => {\n    if (optionList.branchList.length) {\n      onCheckScheduleOfBranch({\n        BranchID: parseInt(optionList.branchList[0].value.toString()),\n        StartTime: moment().format('YYYY/MM/DD'),\n        EndTime: moment().add(1, 'months').format('YYYY/MM/DD')\n      });\n    }\n  }, [optionList.branchList]);\n\n  const fmListOfBranch = calendarArr => {\n    // rs = {\n    // \t\t'2021/08/13': {\n    // \t\t\t'31-Phòng 1-31': [\n    // \t\t\t\t{\n    // \t\t\t\t\tRoomID: 31,\n    // \t\t\t\t\tRoomName: 'Phòng 1',\n    // \t\t\t\t\tStudyTimeID: 21,\n    // \t\t\t\t\tStudyTimeName: 'Ca 08:00 - 10:00',\n    // \t\t\t\t\tStartTime: '2021-08-13T08:00:00',\n    // \t\t\t\t\tEndTime: '2021-08-13T10:00:00',\n    // \t\t\t\t},\n    // \t\t\t],\n    // \t\t\t'32-Phòng 2-32': [\n    // \t\t\t\t{\n    // \t\t\t\t\tRoomID: 32,\n    // \t\t\t\t\tRoomName: 'Phòng 2',\n    // \t\t\t\t\tStudyTimeID: 27,\n    // \t\t\t\t\tStudyTimeName: 'Ca 14:00 - 16:00',\n    // \t\t\t\t\tStartTime: '2021-08-13T14:00:00',\n    // \t\t\t\t\tEndTime: '2021-08-13T16:00:00',\n    // \t\t\t\t},\n    // \t\t\t],\n    // \t\t},\n    // \t};\n    const rs = {};\n    const newCalendarArr = [...calendarArr];\n\n    for (let i = 0; i < newCalendarArr.length; i++) {\n      const c = newCalendarArr[i];\n      const {\n        StartTime,\n        StudyTimeID,\n        RoomName,\n        RoomID,\n        StudyTimeName\n      } = c;\n      const fmDate = moment(StartTime).format('YYYY/MM/DD');\n      const fmRoomName = `${RoomID}-${RoomName}-${RoomID}`;\n\n      if (rs[fmDate]) {\n        if (rs[fmDate][fmRoomName]) {\n          rs[fmDate][fmRoomName].push(c);\n        } else {\n          rs[fmDate][fmRoomName] = [c];\n        }\n      } else {\n        rs[fmDate] = {};\n        newCalendarArr.push(c);\n      }\n    }\n\n    return rs;\n  };\n\n  const fmList = (type, arr) => {\n    switch (type) {\n      case 'CheckBranch':\n        return fmListOfBranch(arr);\n\n      case 'CheckManyTeacher':\n        return fmListOfEmptyTeacher(arr);\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(TitlePage, {\n      title: \"Ki\\u1EC3m tra l\\u1ECBch h\\u1ECDc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        extra: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-list-btn\",\n          children: [/*#__PURE__*/_jsxDEV(CheckBranch, {\n            isLoading: isLoading,\n            optionList: optionList,\n            handleSubmit: onCheckScheduleOfBranch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(CheckOneTeacher, {\n            isLoading: isLoading,\n            optionList: optionList,\n            handleFetchTeacher: fetchTeacherByBranchID,\n            handleSubmit: onCheckOneTeacher\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(CheckManyEmptyTeacher, {\n            isLoading: isLoading,\n            optionList: optionList,\n            handleFetchTeacher: fetchTeacherByBranchID,\n            handleSubmit: onCheckEmptyManyTeacher\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 7\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          size: \"large\",\n          spinning: isLoading.type === 'ADD_DATA' && isLoading.status,\n          children: [infoSearch && /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-weight-black mb-3\",\n            children: [infoSearch.title && `[${infoSearch.title}]`, infoSearch.branchName && `[${infoSearch.branchName}]`, infoSearch.teacherName && `[${infoSearch.teacherName}]`, infoSearch.roomName && `[${infoSearch.roomName}]`, \" | \", infoSearch.fromDate, \" - \", infoSearch.toDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 8\n          }, this), dataList.type === 'CheckBranch' || dataList.type === 'CheckManyTeacher' ? /*#__PURE__*/_jsxDEV(ScheduleStudyList, {\n            dataSource: fmList(dataList.type, dataList.list)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 8\n          }, this) : /*#__PURE__*/_jsxDEV(CDCalendar, {\n            isLoaded: true,\n            isGetRecordList: true,\n            eventList: calendarFm(dataList.list)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 455,\n    columnNumber: 3\n  }, this);\n};\n\nexport default ScheduleStudy;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/ScheduleStudy/ScheduleStudy.tsx"],"names":["Card","Spin","moment","React","useEffect","useState","branchApi","checkBranchScheduleStudy","checkTeacherScheduleStudy","courseDetailApi","roomApi","studyTimeApi","teacherApi","TitlePage","useWrap","fmSelectArr","CDCalendar","CheckBranch","CheckOneTeacher","CheckManyEmptyTeacher","ScheduleStudyList","ScheduleStudy","showNoti","isLoading","setIsLoading","type","status","optionList","setOptionList","branchList","studyTimeList","roomList","teacherList","dataList","setDataList","list","infoSearch","setInfoSearch","fetchData","Promise","all","getAll","pageSize","pageIndex","selectAll","then","res","map","r","data","length","preState","error","message","fetchRoomByBranchID","ID","BranchID","fmRoomList","fetchTeacherByBranchID","fmTeacherList","onCheckRoom","value","RoomID","StartTime","EndTime","fmObj","format","title","branchName","find","b","roomName","fromDate","toDate","onCheckOneTeacher","TeacherID","toString","teacherName","calendarFm","calendarArr","rs","c","idx","CourseID","CourseName","RoomName","BranchName","TeacherName","SubjectName","LinkDocument","studyTimeStart","studyTimeEnd","studyTime","id","start","end","resource","StudyTimeName","onCheckEmptyManyTeacher","StudyTimeID","join","fmListOfEmptyTeacher","newCalendarArr","i","Date","fmDateTimeStamp","fmDate","fmStudyTime","push","onCheckScheduleOfBranch","branchId","from","to","parseInt","add","fmListOfBranch","fmRoomName","fmList","arr"],"mappings":"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","sourcesContent":["import { Card, Spin } from 'antd'\r\nimport moment from 'moment'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n\tbranchApi,\r\n\tcheckBranchScheduleStudy,\r\n\tcheckTeacherScheduleStudy,\r\n\tcourseDetailApi,\r\n\troomApi,\r\n\tstudyTimeApi,\r\n\tteacherApi\r\n} from '~/apiBase'\r\nimport TitlePage from '~/components/TitlePage'\r\nimport { useWrap } from '~/context/wrap'\r\nimport { fmSelectArr } from '~/utils/functions'\r\nimport CDCalendar from '../CourseList/CourseListDetail/CourseDetailCalendar/Calendar'\r\nimport CheckBranch from './Form/CheckBranch'\r\nimport CheckOneTeacher from './Form/CheckOneTeacher'\r\nimport CheckManyEmptyTeacher from './Form/ManyTeacher'\r\nimport ScheduleStudyList from './List/List'\r\n\r\ntype IOptionList = {\r\n\tbranchList: IOptionCommon[]\r\n\tstudyTimeList: IOptionCommon[]\r\n\troomList: IOptionCommon[]\r\n\tteacherList: IOptionCommon[]\r\n}\r\ntype IDataList = {\r\n\tlist: ICourseDetailSchedule[]\r\n\ttype: string\r\n}\r\ntype infoSearch = {\r\n\ttitle: string\r\n\tbranchName?: string\r\n\troomName?: string\r\n\tteacherName?: string\r\n\tstudyTimeName?: string\r\n\tfromDate: string\r\n\ttoDate: string\r\n}\r\nconst ScheduleStudy = () => {\r\n\tconst { showNoti } = useWrap()\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t})\r\n\tconst [optionList, setOptionList] = useState<IOptionList>({\r\n\t\tbranchList: [],\r\n\t\tstudyTimeList: [],\r\n\t\troomList: [],\r\n\t\tteacherList: []\r\n\t})\r\n\tconst [dataList, setDataList] = useState<IDataList>({\r\n\t\tlist: [],\r\n\t\ttype: ''\r\n\t})\r\n\tconst [infoSearch, setInfoSearch] = useState<infoSearch>(null)\r\n\tconst fetchData = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tPromise.all([branchApi.getAll({ pageSize: 99999, pageIndex: 1 }), studyTimeApi.getAll({ selectAll: true })]).then((res) => {\r\n\t\t\t\tconst [branchList, studyTimeList] = res.map((r) => (r.status === 200 ? r.data.data : []))\r\n\t\t\t\tif (branchList.length) {\r\n\t\t\t\t\tsetOptionList((preState) => ({\r\n\t\t\t\t\t\t...preState,\r\n\t\t\t\t\t\tbranchList: fmSelectArr(branchList, 'BranchName', 'ID')\r\n\t\t\t\t\t}))\r\n\t\t\t\t}\r\n\t\t\t\tif (studyTimeList.length) {\r\n\t\t\t\t\tsetOptionList((preState) => ({\r\n\t\t\t\t\t\t...preState,\r\n\t\t\t\t\t\tstudyTimeList: fmSelectArr(studyTimeList, 'Name', 'ID')\r\n\t\t\t\t\t}))\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tfetchData()\r\n\t}, [])\r\n\r\n\tconst fetchRoomByBranchID = async (ID: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_ROOM',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tconst res = await roomApi.getAll({ BranchID: ID, pageSize: 99999 })\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst fmRoomList = fmSelectArr(res.data.data, 'RoomName', 'RoomID')\r\n\t\t\t\tsetOptionList({\r\n\t\t\t\t\t...optionList,\r\n\t\t\t\t\troomList: fmRoomList\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionList({\r\n\t\t\t\t\t...optionList,\r\n\t\t\t\t\troomList: []\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_ROOM',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tconst fetchTeacherByBranchID = async (ID: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_TEACHER',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tconst res = await teacherApi.getAll({ BranchID: ID, pageSize: 99999 })\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst fmTeacherList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID')\r\n\t\t\t\tsetOptionList({\r\n\t\t\t\t\t...optionList,\r\n\t\t\t\t\tteacherList: fmTeacherList\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionList({\r\n\t\t\t\t\t...optionList,\r\n\t\t\t\t\tteacherList: []\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_TEACHER',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// Room\r\n\tconst onCheckRoom = async (value: { BranchID: number; RoomID: number; StartTime: string; EndTime: string }) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\tlet res\r\n\t\ttry {\r\n\t\t\tconst { RoomID, StartTime, EndTime, BranchID } = value\r\n\t\t\tconst fmObj = {\r\n\t\t\t\tRoomID,\r\n\t\t\t\tStartTime: moment(StartTime).format('YYYY/MM/DD'),\r\n\t\t\t\tEndTime: moment(EndTime).format('YYYY/MM/DD')\r\n\t\t\t}\r\n\t\t\tres = await courseDetailApi.getAll(fmObj)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetInfoSearch({\r\n\t\t\t\t\ttitle: 'Kiểm tra phòng',\r\n\t\t\t\t\tbranchName: optionList.branchList.find((b) => b.value === BranchID)?.title || '',\r\n\t\t\t\t\troomName: optionList.roomList.find((b) => b.value === RoomID)?.title || '',\r\n\t\t\t\t\tfromDate: moment(StartTime).format('DD/MM/YYYY'),\r\n\t\t\t\t\ttoDate: moment(EndTime).format('DD/MM/YYYY')\r\n\t\t\t\t})\r\n\t\t\t\tsetDataList({ list: res.data.data, type: '' })\r\n\t\t\t\tshowNoti('success', res.data.message)\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', 'Không tìm thấy')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn res\r\n\t}\r\n\t// OneTeacher\r\n\ttype IGetTeacher = {\r\n\t\tBranchID: number\r\n\t\tTeacherID: number | Array<number>\r\n\t\tStudyTimeID: Array<number>\r\n\t\tStartTime: string\r\n\t\tEndTime: string\r\n\t}\r\n\tconst onCheckOneTeacher = async (value: IGetTeacher) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\tlet res\r\n\t\ttry {\r\n\t\t\tconst { TeacherID, StartTime, EndTime, BranchID } = value\r\n\t\t\tconst fmObj = {\r\n\t\t\t\tTeacherID: +TeacherID.toString(),\r\n\t\t\t\tStartTime: moment(StartTime).format('YYYY/MM/DD'),\r\n\t\t\t\tEndTime: moment(EndTime).format('YYYY/MM/DD')\r\n\t\t\t}\r\n\t\t\tres = await courseDetailApi.getAll(fmObj)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetInfoSearch({\r\n\t\t\t\t\ttitle: 'Lịch giáo viên',\r\n\t\t\t\t\tteacherName: optionList.teacherList.find((b) => b.value === TeacherID)?.title || '',\r\n\t\t\t\t\tbranchName: optionList.branchList.find((b) => b.value === BranchID)?.title || '',\r\n\t\t\t\t\tfromDate: moment(StartTime).format('DD/MM/YYYY'),\r\n\t\t\t\t\ttoDate: moment(EndTime).format('DD/MM/YYYY')\r\n\t\t\t\t})\r\n\t\t\t\tsetDataList({ list: res.data.data, type: '' })\r\n\t\t\t\tshowNoti('success', res.data.message)\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', 'Không tìm thấy')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn res\r\n\t}\r\n\t// CALENDAR FORMAT\r\n\tconst calendarFm = (calendarArr: ICourseDetailSchedule[]) => {\r\n\t\tconst rs = calendarArr.map((c, idx) => {\r\n\t\t\tconst { ID, CourseID, CourseName, RoomName, BranchName, TeacherName, SubjectName, StartTime, EndTime, LinkDocument } = c\r\n\t\t\tconst studyTimeStart = moment(StartTime).format('HH:mm')\r\n\t\t\tconst studyTimeEnd = moment(EndTime).format('HH:mm')\r\n\t\t\tconst studyTime = `${studyTimeStart} - ${studyTimeEnd}`\r\n\r\n\t\t\treturn {\r\n\t\t\t\tid: +ID,\r\n\t\t\t\ttitle: '',\r\n\t\t\t\tstart: moment(StartTime).toDate(),\r\n\t\t\t\tend: moment(EndTime).toDate(),\r\n\t\t\t\tresource: {\r\n\t\t\t\t\tID,\r\n\t\t\t\t\tCourseID,\r\n\t\t\t\t\tCourseName,\r\n\t\t\t\t\tRoomName,\r\n\t\t\t\t\tBranchName,\r\n\t\t\t\t\tTeacherName,\r\n\t\t\t\t\tSubjectName,\r\n\t\t\t\t\tLinkDocument,\r\n\t\t\t\t\t//\r\n\t\t\t\t\tStudyTimeName: studyTime\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn rs\r\n\t}\r\n\r\n\t// OTHER VIEW\r\n\t// ManyTeacher\r\n\tconst onCheckEmptyManyTeacher = async (value: IGetTeacher) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\tlet res\r\n\t\ttry {\r\n\t\t\tconst { TeacherID, StudyTimeID, StartTime, EndTime, BranchID } = value\r\n\t\t\tconst fmObj = {\r\n\t\t\t\tTeacherID: TeacherID.toString(),\r\n\t\t\t\tStudyTimeID: StudyTimeID.join(','),\r\n\t\t\t\tStartTime: moment(StartTime).format('YYYY/MM/DD'),\r\n\t\t\t\tEndTime: moment(EndTime).format('YYYY/MM/DD')\r\n\t\t\t}\r\n\t\t\tres = await checkTeacherScheduleStudy.getAll(fmObj)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetDataList({ list: res.data.data, type: 'CheckManyTeacher' })\r\n\t\t\t\tsetInfoSearch({\r\n\t\t\t\t\ttitle: 'Lịch nhiều giáo viên',\r\n\t\t\t\t\tbranchName: optionList.branchList.find((b) => b.value === BranchID)?.title || '',\r\n\t\t\t\t\tfromDate: moment(StartTime).format('DD/MM/YYYY'),\r\n\t\t\t\t\ttoDate: moment(EndTime).format('DD/MM/YYYY')\r\n\t\t\t\t})\r\n\t\t\t\tshowNoti('success', res.data.message)\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', 'Không tìm thấy')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn res\r\n\t}\r\n\tconst fmListOfEmptyTeacher = (calendarArr: ICheckTeacherScheduleStudy[]) => {\r\n\t\t// rs = {\r\n\t\t//     \"2021/08/11\": {\r\n\t\t//         \"21-Ca 08:00 - 10:00\": [\r\n\t\t//             {\r\n\t\t//                 \"TeacherID\": 1236,\r\n\t\t//                 \"TeacherName\": \"Kim Bảo 98\",\r\n\t\t//                 \"StudyTimeID\": 21,\r\n\t\t//                 \"StudyTimeName\": \"Ca 08:00 - 10:00\",\r\n\t\t//                 \"Date\": \"2021-08-11T00:00:00\",\r\n\t\t//                 \"StartTime\": \"2021-08-11T08:00:00\",\r\n\t\t//                 \"EndTime\": \"2021-08-11T10:00:00\"\r\n\t\t//             },\r\n\t\t//         ],\r\n\t\t//     }\r\n\t\t// }\r\n\t\tconst rs = {}\r\n\t\tconst newCalendarArr = [...calendarArr]\r\n\t\tfor (let i = 0; i < newCalendarArr.length; i++) {\r\n\t\t\tconst c = newCalendarArr[i]\r\n\t\t\tconst { Date, StudyTimeID, StudyTimeName, StartTime } = c\r\n\t\t\tconst fmDateTimeStamp = moment(StartTime).format('X')\r\n\t\t\tconst fmDate = moment(Date).format('YYYY/MM/DD')\r\n\t\t\tconst fmStudyTime = `${StudyTimeID}-${StudyTimeName}-${fmDateTimeStamp}`\r\n\t\t\tif (rs[fmDate]) {\r\n\t\t\t\tif (rs[fmDate][fmStudyTime]) {\r\n\t\t\t\t\trs[fmDate][fmStudyTime].push(c)\r\n\t\t\t\t} else {\r\n\t\t\t\t\trs[fmDate][fmStudyTime] = [c]\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trs[fmDate] = {}\r\n\t\t\t\tnewCalendarArr.push(c)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rs\r\n\t}\r\n\r\n\t// ============================================================================\r\n\t// ============================================================================\r\n\t// ============================================================================\r\n\t// ============================================================================\r\n\t// ============================================================================\r\n\t// ============================================================================\r\n\r\n\t//Branch\r\n\tconst onCheckScheduleOfBranch = async (value: { BranchID: number; StartTime: string; EndTime: string }) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\tlet res\r\n\t\ttry {\r\n\t\t\tconst { BranchID, StartTime, EndTime } = value\r\n\t\t\tconst fmObj = {\r\n\t\t\t\tbranchId: BranchID,\r\n\t\t\t\tfrom: moment(StartTime).format('YYYY/MM/DD'),\r\n\t\t\t\tto: moment(EndTime).format('YYYY/MM/DD')\r\n\t\t\t}\r\n\t\t\tres = await checkBranchScheduleStudy.getAll(fmObj)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetDataList({ list: res.data.data, type: 'CheckBranch' })\r\n\t\t\t\tsetInfoSearch({\r\n\t\t\t\t\ttitle: 'Lịch trung tâm',\r\n\t\t\t\t\tbranchName: optionList.branchList.find((b) => b.value === BranchID)?.title || '',\r\n\t\t\t\t\tfromDate: moment(StartTime).format('DD/MM/YYYY'),\r\n\t\t\t\t\ttoDate: moment(EndTime).format('DD/MM/YYYY')\r\n\t\t\t\t})\r\n\t\t\t\tshowNoti('success', res.data.message)\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', 'Lịch trống')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn res\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tif (optionList.branchList.length) {\r\n\t\t\tonCheckScheduleOfBranch({\r\n\t\t\t\tBranchID: parseInt(optionList.branchList[0].value.toString()),\r\n\t\t\t\tStartTime: moment().format('YYYY/MM/DD'),\r\n\t\t\t\tEndTime: moment().add(1, 'months').format('YYYY/MM/DD')\r\n\t\t\t})\r\n\t\t}\r\n\t}, [optionList.branchList])\r\n\tconst fmListOfBranch = (calendarArr: ICheckBranchScheduleStudyData[]) => {\r\n\t\t// rs = {\r\n\t\t// \t\t'2021/08/13': {\r\n\t\t// \t\t\t'31-Phòng 1-31': [\r\n\t\t// \t\t\t\t{\r\n\t\t// \t\t\t\t\tRoomID: 31,\r\n\t\t// \t\t\t\t\tRoomName: 'Phòng 1',\r\n\t\t// \t\t\t\t\tStudyTimeID: 21,\r\n\t\t// \t\t\t\t\tStudyTimeName: 'Ca 08:00 - 10:00',\r\n\t\t// \t\t\t\t\tStartTime: '2021-08-13T08:00:00',\r\n\t\t// \t\t\t\t\tEndTime: '2021-08-13T10:00:00',\r\n\t\t// \t\t\t\t},\r\n\t\t// \t\t\t],\r\n\t\t// \t\t\t'32-Phòng 2-32': [\r\n\t\t// \t\t\t\t{\r\n\t\t// \t\t\t\t\tRoomID: 32,\r\n\t\t// \t\t\t\t\tRoomName: 'Phòng 2',\r\n\t\t// \t\t\t\t\tStudyTimeID: 27,\r\n\t\t// \t\t\t\t\tStudyTimeName: 'Ca 14:00 - 16:00',\r\n\t\t// \t\t\t\t\tStartTime: '2021-08-13T14:00:00',\r\n\t\t// \t\t\t\t\tEndTime: '2021-08-13T16:00:00',\r\n\t\t// \t\t\t\t},\r\n\t\t// \t\t\t],\r\n\t\t// \t\t},\r\n\t\t// \t};\r\n\t\tconst rs = {}\r\n\t\tconst newCalendarArr = [...calendarArr]\r\n\t\tfor (let i = 0; i < newCalendarArr.length; i++) {\r\n\t\t\tconst c = newCalendarArr[i]\r\n\t\t\tconst { StartTime, StudyTimeID, RoomName, RoomID, StudyTimeName } = c\r\n\t\t\tconst fmDate = moment(StartTime).format('YYYY/MM/DD')\r\n\t\t\tconst fmRoomName = `${RoomID}-${RoomName}-${RoomID}`\r\n\t\t\tif (rs[fmDate]) {\r\n\t\t\t\tif (rs[fmDate][fmRoomName]) {\r\n\t\t\t\t\trs[fmDate][fmRoomName].push(c)\r\n\t\t\t\t} else {\r\n\t\t\t\t\trs[fmDate][fmRoomName] = [c]\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trs[fmDate] = {}\r\n\t\t\t\tnewCalendarArr.push(c)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rs\r\n\t}\r\n\r\n\tconst fmList = (type, arr) => {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'CheckBranch':\r\n\t\t\t\treturn fmListOfBranch(arr)\r\n\t\t\tcase 'CheckManyTeacher':\r\n\t\t\t\treturn fmListOfEmptyTeacher(arr)\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t<TitlePage title=\"Kiểm tra lịch học\" />\r\n\t\t\t<div className=\"col-12\">\r\n\t\t\t\t<Card\r\n\t\t\t\t\textra={\r\n\t\t\t\t\t\t<div className=\"card-list-btn\">\r\n\t\t\t\t\t\t\t<CheckBranch isLoading={isLoading} optionList={optionList} handleSubmit={onCheckScheduleOfBranch} />\r\n\t\t\t\t\t\t\t{/* */}\r\n\t\t\t\t\t\t\t{/* <CheckRoom\r\n\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\toptionList={optionList}\r\n\t\t\t\t\t\t\t\thandleFetchRoom={fetchRoomByBranchID}\r\n\t\t\t\t\t\t\t\thandleSubmit={onCheckRoom}\r\n\t\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t\t\t<CheckOneTeacher\r\n\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\toptionList={optionList}\r\n\t\t\t\t\t\t\t\thandleFetchTeacher={fetchTeacherByBranchID}\r\n\t\t\t\t\t\t\t\thandleSubmit={onCheckOneTeacher}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t{/* */}\r\n\t\t\t\t\t\t\t<CheckManyEmptyTeacher\r\n\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\toptionList={optionList}\r\n\t\t\t\t\t\t\t\thandleFetchTeacher={fetchTeacherByBranchID}\r\n\t\t\t\t\t\t\t\thandleSubmit={onCheckEmptyManyTeacher}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Spin size=\"large\" spinning={isLoading.type === 'ADD_DATA' && isLoading.status}>\r\n\t\t\t\t\t\t{infoSearch && (\r\n\t\t\t\t\t\t\t<h4 className=\"font-weight-black mb-3\">\r\n\t\t\t\t\t\t\t\t{infoSearch.title && `[${infoSearch.title}]`}\r\n\t\t\t\t\t\t\t\t{infoSearch.branchName && `[${infoSearch.branchName}]`}\r\n\t\t\t\t\t\t\t\t{infoSearch.teacherName && `[${infoSearch.teacherName}]`}\r\n\t\t\t\t\t\t\t\t{infoSearch.roomName && `[${infoSearch.roomName}]`} | {infoSearch.fromDate} - {infoSearch.toDate}\r\n\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{dataList.type === 'CheckBranch' || dataList.type === 'CheckManyTeacher' ? (\r\n\t\t\t\t\t\t\t<ScheduleStudyList dataSource={fmList(dataList.type, dataList.list)} />\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<CDCalendar isLoaded={true} isGetRecordList={true} eventList={calendarFm(dataList.list)} />\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Spin>\r\n\t\t\t\t</Card>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default ScheduleStudy\r\n"]},"metadata":{},"sourceType":"module"}