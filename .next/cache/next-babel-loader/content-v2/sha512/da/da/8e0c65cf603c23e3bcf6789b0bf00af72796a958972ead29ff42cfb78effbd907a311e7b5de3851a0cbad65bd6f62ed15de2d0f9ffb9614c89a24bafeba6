{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\ExamList\\\\ExamShow\\\\Speaking.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { Tooltip, Popconfirm } from 'antd';\nimport { Trash2 } from 'react-feather';\nimport { examDetailApi } from '~/apiBase';\nimport { useExamDetail } from '~/pages/question-bank/exam-list/exam-detail/[slug]';\nimport { useWrap } from '~/context/wrap';\nimport EditPoint from '../ExamForm/EditPoint';\nimport ChangePosition from '../ExamForm/ChangePosition';\nimport AudioRecord from '~/components/Elements/AudioRecord/AudioRecord';\nimport { useDoingTest } from '~/context/useDoingTest';\nimport { useDoneTest } from '~/context/useDoneTest';\nimport MarkingExam from '../MarkingExam/MarkingExam';\n\nconst SpeakingList = props => {\n  const {\n    isChangePosition\n  } = useExamDetail();\n  const {\n    doneTestData,\n    dataMarking,\n    getDataMarking\n  } = useDoneTest();\n  const {\n    onDeleteQuestion\n  } = useExamDetail();\n  const {\n    activeID,\n    packageResult,\n    getPackageResult,\n    getListPicked\n  } = useDoingTest();\n  const {\n    dataQuestion,\n    listQuestionID,\n    isDoingTest,\n    isMarked,\n    arPosition,\n    handleChange,\n    addOldItem\n  } = props;\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: confirmLoading,\n    1: setConfirmLoading\n  } = useState(false);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState({\n    id: null,\n    status: false\n  });\n  const {\n    0: linkRecord,\n    1: setLinkRecord\n  } = useState('');\n\n  const returnPosition = quesID => {\n    let index = listQuestionID.indexOf(quesID);\n    let text = 'Câu ' + (index + 1).toString();\n    return text;\n  }; // Chấp nhận xóa câu hỏi\n\n\n  const handleOk = async quesItem => {\n    let itemDelete = {\n      ID: dataQuestion.ID,\n      Enable: false,\n      ExerciseOrExerciseGroup: [{\n        Point: quesItem.Point,\n        ExerciseOrExerciseGroupID: quesItem.ExerciseID\n      }]\n    };\n    setConfirmLoading(true);\n\n    try {\n      let res = await examDetailApi.update(itemDelete);\n\n      if (res.status == 200) {\n        onDeleteQuestion(itemDelete);\n        showNoti('success', 'Xóa thành công');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setConfirmLoading(false);\n    }\n  }; // Handle cancel popup delte\n\n\n  const handleCancel = quesID => {\n    setVisible({\n      id: quesID,\n      status: false\n    });\n  };\n\n  const deleteQuestionItem = quesID => {\n    !visible.status ? setVisible({\n      id: quesID,\n      status: true\n    }) : setVisible({\n      id: quesID,\n      status: false\n    });\n  };\n\n  const onGetPoint = (point, questionID) => {\n    if (dataMarking.setPackageExerciseStudentsList.some((item, index) => item['ID'] === questionID)) {\n      dataMarking.setPackageExerciseStudentsList.every(item => {\n        if (item.ID === questionID) {\n          item.Point = point;\n          return false;\n        }\n\n        return true;\n      });\n    } else {\n      dataMarking.setPackageExerciseStudentsList.push({\n        ID: questionID,\n        Point: point\n      });\n    }\n\n    getDataMarking(_objectSpread({}, dataMarking));\n  }; // ----------- ALL ACTION IN DOINGTEST -------------\n\n\n  const onGetLinkRecord = (linkRecord, quesID) => {\n    getListPicked(quesID); // Find index\n\n    let indexQuestion = packageResult.SetPackageResultDetailInfoList.findIndex(item => item.ExamTopicDetailID === dataQuestion.ID);\n    let indexQuestionDetail = packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList.findIndex(item => item.ExerciseID === quesID); // Add new answer to list\n\n    if (packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[indexQuestionDetail].SetPackageExerciseAnswerStudentList.length == 0) {\n      packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[indexQuestionDetail].SetPackageExerciseAnswerStudentList.push({\n        AnswerID: 0,\n        AnswerContent: '',\n        FileAudio: linkRecord\n      });\n    } else {\n      packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[indexQuestionDetail].SetPackageExerciseAnswerStudentList[0].FileAudio = linkRecord;\n    }\n\n    getPackageResult(_objectSpread({}, packageResult));\n  };\n\n  useEffect(() => {\n    if (!doneTestData) {\n      if (isDoingTest) {\n        // Find index\n        let indexQuestion = packageResult.SetPackageResultDetailInfoList.findIndex(item => item.ExamTopicDetailID === dataQuestion.ID);\n\n        if (packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[0].SetPackageExerciseAnswerStudentList.length > 0) {\n          setLinkRecord(packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[0].SetPackageExerciseAnswerStudentList[0].FileAudio);\n        }\n      }\n    } else {\n      if (dataQuestion.ExerciseTopic[0].ExerciseAnswer.length > 0) {\n        setLinkRecord(dataQuestion.ExerciseTopic[0].ExerciseAnswer[0].FileAudio);\n      }\n    }\n  }, [activeID]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: dataQuestion.ExerciseTopic.map((ques, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `question-item ${ques.ExerciseID === activeID ? 'active-doing' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-detail\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `title-ques `,\n            children: returnPosition(ques.ExerciseID)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title-text mt-3\",\n            children: ReactHtmlParser(ques.Content)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 8\n          }, this), doneTestData && linkRecord && /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            children: /*#__PURE__*/_jsxDEV(\"source\", {\n              src: linkRecord,\n              type: \"audio/mpeg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 9\n          }, this), !doneTestData && isDoingTest && /*#__PURE__*/_jsxDEV(AudioRecord, {\n            linkRecord: linkRecord,\n            getLinkRecord: linkRecord => onGetLinkRecord(linkRecord, ques.ExerciseID)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-action\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-action-list mb-2\",\n          children: !doneTestData && !isDoingTest && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [!isChangePosition && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(EditPoint, {\n                quesItem: ques,\n                dataQuestion: dataQuestion\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n                title: \"B\\u1EA1n c\\xF3 ch\\u1EAFc mu\\u1ED1n x\\xF3a?\",\n                onConfirm: () => handleOk(ques),\n                okButtonProps: {\n                  loading: confirmLoading\n                },\n                onCancel: () => handleCancel(ques.ID),\n                children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: \"X\\xF3a c\\xE2u h\\u1ECFi\",\n                  placement: \"rightTop\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-icon delete\",\n                    onClick: () => deleteQuestionItem(ques.ID),\n                    children: /*#__PURE__*/_jsxDEV(Trash2, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 15\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 14\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 12\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(ChangePosition, {\n              dataQuestion: dataQuestion,\n              arPosition: arPosition,\n              questionID: dataQuestion.ID,\n              handleChange: handleChange,\n              addOldItem: addOldItem\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"point-question\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text mb-2\",\n            children: !dataMarking ? ques.Point : dataMarking.setPackageExerciseStudentsList.find(item => item['ID'] === ques.ID).Point\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 7\n        }, this), !isChangePosition && dataMarking && !isMarked && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"point-marking\",\n          children: /*#__PURE__*/_jsxDEV(MarkingExam, {\n            onGetPoint: point => onGetPoint(point, ques.ID),\n            dataRow: ques,\n            dataMarking: dataMarking\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 6\n      }, this)]\n    }, ind, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }, this))\n  }, void 0, false);\n};\n\nexport default SpeakingList;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/ExamList/ExamShow/Speaking.tsx"],"names":["React","useEffect","useState","ReactHtmlParser","Tooltip","Popconfirm","Trash2","examDetailApi","useExamDetail","useWrap","EditPoint","ChangePosition","AudioRecord","useDoingTest","useDoneTest","MarkingExam","SpeakingList","props","isChangePosition","doneTestData","dataMarking","getDataMarking","onDeleteQuestion","activeID","packageResult","getPackageResult","getListPicked","dataQuestion","listQuestionID","isDoingTest","isMarked","arPosition","handleChange","addOldItem","showNoti","confirmLoading","setConfirmLoading","visible","setVisible","id","status","linkRecord","setLinkRecord","returnPosition","quesID","index","indexOf","text","toString","handleOk","quesItem","itemDelete","ID","Enable","ExerciseOrExerciseGroup","Point","ExerciseOrExerciseGroupID","ExerciseID","res","update","error","message","handleCancel","deleteQuestionItem","onGetPoint","point","questionID","setPackageExerciseStudentsList","some","item","every","push","onGetLinkRecord","indexQuestion","SetPackageResultDetailInfoList","findIndex","ExamTopicDetailID","indexQuestionDetail","SetPackageExerciseStudentInfoList","SetPackageExerciseAnswerStudentList","length","AnswerID","AnswerContent","FileAudio","ExerciseTopic","ExerciseAnswer","map","ques","ind","Content","loading","find"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport { Tooltip, Popconfirm } from 'antd'\r\nimport { Trash2 } from 'react-feather'\r\nimport { examDetailApi } from '~/apiBase'\r\nimport { useExamDetail } from '~/pages/question-bank/exam-list/exam-detail/[slug]'\r\nimport { useWrap } from '~/context/wrap'\r\nimport EditPoint from '../ExamForm/EditPoint'\r\nimport ChangePosition from '../ExamForm/ChangePosition'\r\nimport AudioRecord from '~/components/Elements/AudioRecord/AudioRecord'\r\nimport { useDoingTest } from '~/context/useDoingTest'\r\nimport { useDoneTest } from '~/context/useDoneTest'\r\nimport MarkingExam from '../MarkingExam/MarkingExam'\r\n\r\nconst SpeakingList = (props) => {\r\n\tconst { isChangePosition } = useExamDetail()\r\n\tconst { doneTestData, dataMarking, getDataMarking } = useDoneTest()\r\n\tconst { onDeleteQuestion } = useExamDetail()\r\n\tconst { activeID, packageResult, getPackageResult, getListPicked } = useDoingTest()\r\n\tconst { dataQuestion, listQuestionID, isDoingTest, isMarked, arPosition, handleChange, addOldItem } = props\r\n\tconst { showNoti } = useWrap()\r\n\tconst [confirmLoading, setConfirmLoading] = useState(false)\r\n\tconst [visible, setVisible] = useState({\r\n\t\tid: null,\r\n\t\tstatus: false\r\n\t})\r\n\tconst [linkRecord, setLinkRecord] = useState('')\r\n\r\n\tconst returnPosition = (quesID) => {\r\n\t\tlet index = listQuestionID.indexOf(quesID)\r\n\t\tlet text = 'Câu ' + (index + 1).toString()\r\n\t\treturn text\r\n\t}\r\n\r\n\t// Chấp nhận xóa câu hỏi\r\n\tconst handleOk = async (quesItem) => {\r\n\t\tlet itemDelete = {\r\n\t\t\tID: dataQuestion.ID,\r\n\t\t\tEnable: false,\r\n\t\t\tExerciseOrExerciseGroup: [\r\n\t\t\t\t{\r\n\t\t\t\t\tPoint: quesItem.Point,\r\n\t\t\t\t\tExerciseOrExerciseGroupID: quesItem.ExerciseID\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\tsetConfirmLoading(true)\r\n\t\ttry {\r\n\t\t\tlet res = await examDetailApi.update(itemDelete)\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tonDeleteQuestion(itemDelete)\r\n\t\t\t\tshowNoti('success', 'Xóa thành công')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetConfirmLoading(false)\r\n\t\t}\r\n\t}\r\n\r\n\t// Handle cancel popup delte\r\n\tconst handleCancel = (quesID) => {\r\n\t\tsetVisible({\r\n\t\t\tid: quesID,\r\n\t\t\tstatus: false\r\n\t\t})\r\n\t}\r\n\r\n\tconst deleteQuestionItem = (quesID) => {\r\n\t\t!visible.status\r\n\t\t\t? setVisible({\r\n\t\t\t\t\tid: quesID,\r\n\t\t\t\t\tstatus: true\r\n\t\t\t  })\r\n\t\t\t: setVisible({\r\n\t\t\t\t\tid: quesID,\r\n\t\t\t\t\tstatus: false\r\n\t\t\t  })\r\n\t}\r\n\r\n\tconst onGetPoint = (point, questionID) => {\r\n\t\tif (dataMarking.setPackageExerciseStudentsList.some((item, index) => item['ID'] === questionID)) {\r\n\t\t\tdataMarking.setPackageExerciseStudentsList.every((item) => {\r\n\t\t\t\tif (item.ID === questionID) {\r\n\t\t\t\t\titem.Point = point\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t\treturn true\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tdataMarking.setPackageExerciseStudentsList.push({\r\n\t\t\t\tID: questionID,\r\n\t\t\t\tPoint: point\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tgetDataMarking({ ...dataMarking })\r\n\t}\r\n\r\n\t// ----------- ALL ACTION IN DOINGTEST -------------\r\n\r\n\tconst onGetLinkRecord = (linkRecord, quesID) => {\r\n\t\tgetListPicked(quesID)\r\n\t\t// Find index\r\n\t\tlet indexQuestion = packageResult.SetPackageResultDetailInfoList.findIndex((item) => item.ExamTopicDetailID === dataQuestion.ID)\r\n\r\n\t\tlet indexQuestionDetail = packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList.findIndex(\r\n\t\t\t(item) => item.ExerciseID === quesID\r\n\t\t)\r\n\r\n\t\t// Add new answer to list\r\n\t\tif (\r\n\t\t\tpackageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[indexQuestionDetail]\r\n\t\t\t\t.SetPackageExerciseAnswerStudentList.length == 0\r\n\t\t) {\r\n\t\t\tpackageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[\r\n\t\t\t\tindexQuestionDetail\r\n\t\t\t].SetPackageExerciseAnswerStudentList.push({\r\n\t\t\t\tAnswerID: 0,\r\n\t\t\t\tAnswerContent: '',\r\n\t\t\t\tFileAudio: linkRecord\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tpackageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[\r\n\t\t\t\tindexQuestionDetail\r\n\t\t\t].SetPackageExerciseAnswerStudentList[0].FileAudio = linkRecord\r\n\t\t}\r\n\r\n\t\tgetPackageResult({ ...packageResult })\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!doneTestData) {\r\n\t\t\tif (isDoingTest) {\r\n\t\t\t\t// Find index\r\n\t\t\t\tlet indexQuestion = packageResult.SetPackageResultDetailInfoList.findIndex((item) => item.ExamTopicDetailID === dataQuestion.ID)\r\n\t\t\t\tif (\r\n\t\t\t\t\tpackageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[0]\r\n\t\t\t\t\t\t.SetPackageExerciseAnswerStudentList.length > 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tsetLinkRecord(\r\n\t\t\t\t\t\tpackageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[0]\r\n\t\t\t\t\t\t\t.SetPackageExerciseAnswerStudentList[0].FileAudio\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (dataQuestion.ExerciseTopic[0].ExerciseAnswer.length > 0) {\r\n\t\t\t\tsetLinkRecord(dataQuestion.ExerciseTopic[0].ExerciseAnswer[0].FileAudio)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [activeID])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{dataQuestion.ExerciseTopic.map((ques, ind) => (\r\n\t\t\t\t<div className={`question-item ${ques.ExerciseID === activeID ? 'active-doing' : ''}`} key={ind}>\r\n\t\t\t\t\t<div className=\"box-detail\">\r\n\t\t\t\t\t\t<div className=\"box-title\">\r\n\t\t\t\t\t\t\t<span className={`title-ques `}>{returnPosition(ques.ExerciseID)}</span>\r\n\r\n\t\t\t\t\t\t\t<div className=\"title-text mt-3\">{ReactHtmlParser(ques.Content)}</div>\r\n\t\t\t\t\t\t\t{doneTestData && linkRecord && (\r\n\t\t\t\t\t\t\t\t<audio controls>\r\n\t\t\t\t\t\t\t\t\t<source src={linkRecord} type=\"audio/mpeg\" />\r\n\t\t\t\t\t\t\t\t</audio>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t{!doneTestData && isDoingTest && (\r\n\t\t\t\t\t\t\t\t<AudioRecord linkRecord={linkRecord} getLinkRecord={(linkRecord) => onGetLinkRecord(linkRecord, ques.ExerciseID)} />\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"box-action\">\r\n\t\t\t\t\t\t<div className=\"box-action-list mb-2\">\r\n\t\t\t\t\t\t\t{!doneTestData && !isDoingTest && (\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t{!isChangePosition && (\r\n\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t<EditPoint quesItem={ques} dataQuestion={dataQuestion} />\r\n\t\t\t\t\t\t\t\t\t\t\t<Popconfirm\r\n\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Bạn có chắc muốn xóa?\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonConfirm={() => handleOk(ques)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tokButtonProps={{ loading: confirmLoading }}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonCancel={() => handleCancel(ques.ID)}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Xóa câu hỏi\" placement=\"rightTop\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-icon delete\" onClick={() => deleteQuestionItem(ques.ID)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2 />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t\t\t</Popconfirm>\r\n\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t<ChangePosition\r\n\t\t\t\t\t\t\t\t\t\tdataQuestion={dataQuestion}\r\n\t\t\t\t\t\t\t\t\t\tarPosition={arPosition}\r\n\t\t\t\t\t\t\t\t\t\tquestionID={dataQuestion.ID}\r\n\t\t\t\t\t\t\t\t\t\thandleChange={handleChange}\r\n\t\t\t\t\t\t\t\t\t\taddOldItem={addOldItem}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"point-question\">\r\n\t\t\t\t\t\t\t<p className=\"text mb-2\">\r\n\t\t\t\t\t\t\t\t{!dataMarking ? ques.Point : dataMarking.setPackageExerciseStudentsList.find((item) => item['ID'] === ques.ID).Point}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{!isChangePosition && dataMarking && !isMarked && (\r\n\t\t\t\t\t\t\t<div className=\"point-marking\">\r\n\t\t\t\t\t\t\t\t<MarkingExam onGetPoint={(point) => onGetPoint(point, ques.ID)} dataRow={ques} dataMarking={dataMarking} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default SpeakingList\r\n"]},"metadata":{},"sourceType":"module"}