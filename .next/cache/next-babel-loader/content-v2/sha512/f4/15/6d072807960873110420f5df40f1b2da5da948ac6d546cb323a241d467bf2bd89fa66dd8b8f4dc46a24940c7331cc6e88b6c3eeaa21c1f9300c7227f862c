{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\CodingMentor\\\\CodingMentor-FE\\\\src\\\\components\\\\Global\\\\CourseList\\\\CourseListDetail\\\\Homework\\\\TableDetail.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { useWrap } from '~/context/wrap';\nimport ExpandTable from '~/components/ExpandTable';\nimport { homeworkResultApi } from '~/apiBase/course-detail/home-work-result';\nimport ExamAppointmentPoint from '~/components/Global/ExamAppointment/ExamAppointmentPoint';\nimport { FormOutlined } from '@ant-design/icons';\nimport Link from 'next/link';\nimport { Tooltip } from 'antd';\nTableDetail.propTypes = {\n  courseID: PropTypes.number,\n  CurriculumID: PropTypes.any,\n  dataRow: PropTypes.any,\n  visible: PropTypes.bool\n};\n\nfunction TableDetail(props) {\n  const {\n    courseID,\n    CurriculumID,\n    dataRow,\n    visible\n  } = props;\n  const {\n    showNoti,\n    isAdmin\n  } = useWrap();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: 'GET_ALL',\n    status: false\n  });\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(0); // FILTER\n\n  const {\n    0: filters,\n    1: setFilters\n  } = useState({\n    pageSize: 10,\n    pageIndex: 1,\n    CourseID: courseID,\n    CourseScheduleID: 0,\n    StudentID: 0\n  });\n\n  const getPagination = pageNumber => {\n    setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      pageIndex: pageNumber\n    }));\n  };\n\n  const columns = [{\n    title: 'Học viên',\n    dataIndex: 'FullNameUnicode',\n    render: text => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-primary\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 22\n    }, this)\n  }, {\n    title: 'Ngày làm',\n    dataIndex: 'CreatedOn',\n    render: text => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-primary\",\n      children: moment(text).format('DD/MM/yyy')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 22\n    }, this)\n  }, {\n    title: 'Trạng thái',\n    dataIndex: 'StatusName',\n    align: 'center',\n    render: value => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: value == 'Chưa bắt đầu' ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tag gray\",\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tag green\",\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 78\n      }, this)\n    }, void 0, false)\n  }, {\n    width: 120,\n    title: 'Hành động',\n    dataIndex: 'Warning',\n    align: 'center',\n    render: (warning, item, idx) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: {\n            pathname: '/course/exercise/result-teacher/[slug]',\n            query: {\n              slug: `${item.ID}`,\n              teacherMarking: item.TeacherID,\n              packageResultID: item.ID,\n              type: 'test'\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: !item.isDone ? 'Chấm bài ngay' : 'Xem chi tiết',\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-icon edit\",\n              children: /*#__PURE__*/_jsxDEV(FormOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }, this)\n      }, void 0, false);\n    }\n  }];\n  useEffect(() => {\n    if (visible) {\n      console.log('props: ', props);\n      getResult({\n        HomeworkID: dataRow.ID\n      });\n    }\n  }, []);\n  const {\n    0: results,\n    1: setResults\n  } = useState([]); // GET RESULT LIST\n\n  const getResult = async params => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      const res = await homeworkResultApi.getAll(params);\n\n      if (res.status === 200) {\n        setTotalPage(res.data.totalRow);\n        setResults(res.data.data);\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  };\n\n  const expandedRowRender = (data, index, y, visible) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ExamAppointmentPoint, {\n        isExercise: true,\n        visible: visible,\n        infoID: data.HomeworkID,\n        userID: data.UserInformationID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }, this)\n    }, void 0, false);\n  }; // RENDER\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: 1200\n    },\n    children: /*#__PURE__*/_jsxDEV(ExpandTable, {\n      loading: isLoading,\n      currentPage: filters.pageIndex,\n      totalPage: totalPage,\n      getPagination: getPagination,\n      dataSource: results,\n      columns: columns,\n      Extra: null,\n      TitleCard: null,\n      expandable: {\n        expandedRowRender\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 3\n  }, this);\n}\n\nexport default TableDetail;","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/components/Global/CourseList/CourseListDetail/Homework/TableDetail.tsx"],"names":["moment","PropTypes","React","useEffect","useState","useWrap","ExpandTable","homeworkResultApi","ExamAppointmentPoint","FormOutlined","Link","Tooltip","TableDetail","propTypes","courseID","number","CurriculumID","any","dataRow","visible","bool","props","showNoti","isAdmin","isLoading","setIsLoading","type","status","totalPage","setTotalPage","filters","setFilters","pageSize","pageIndex","CourseID","CourseScheduleID","StudentID","getPagination","pageNumber","columns","title","dataIndex","render","text","format","align","value","width","warning","item","idx","pathname","query","slug","ID","teacherMarking","TeacherID","packageResultID","isDone","console","log","getResult","HomeworkID","results","setResults","params","res","getAll","data","totalRow","error","message","expandedRowRender","index","y","UserInformationID"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useWrap } from '~/context/wrap';\r\nimport ExpandTable from '~/components/ExpandTable';\r\nimport { homeworkResultApi } from '~/apiBase/course-detail/home-work-result';\r\nimport ExamAppointmentPoint from '~/components/Global/ExamAppointment/ExamAppointmentPoint';\r\nimport { DeleteOutlined, ExclamationCircleOutlined, FormOutlined } from '@ant-design/icons';\r\nimport Link from 'next/link';\r\nimport { Tooltip } from 'antd';\r\n\r\nTableDetail.propTypes = {\r\n\tcourseID: PropTypes.number,\r\n\tCurriculumID: PropTypes.any,\r\n\tdataRow: PropTypes.any,\r\n\tvisible: PropTypes.bool\r\n};\r\n\r\nfunction TableDetail(props) {\r\n\tconst { courseID, CurriculumID, dataRow, visible } = props;\r\n\tconst { showNoti, isAdmin } = useWrap();\r\n\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: 'GET_ALL',\r\n\t\tstatus: false\r\n\t});\r\n\r\n\tconst [totalPage, setTotalPage] = useState(0);\r\n\r\n\t// FILTER\r\n\tconst [filters, setFilters] = useState({\r\n\t\tpageSize: 10,\r\n\t\tpageIndex: 1,\r\n\t\tCourseID: courseID,\r\n\t\tCourseScheduleID: 0,\r\n\t\tStudentID: 0\r\n\t});\r\n\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tsetFilters({\r\n\t\t\t...filters,\r\n\t\t\tpageIndex: pageNumber\r\n\t\t});\r\n\t};\r\n\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Học viên',\r\n\t\t\tdataIndex: 'FullNameUnicode',\r\n\t\t\trender: (text) => <p className=\"font-weight-primary\">{text}</p>\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Ngày làm',\r\n\t\t\tdataIndex: 'CreatedOn',\r\n\t\t\trender: (text) => <p className=\"font-weight-primary\">{moment(text).format('DD/MM/yyy')}</p>\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\tdataIndex: 'StatusName',\r\n\t\t\talign: 'center',\r\n\t\t\trender: (value) => (\r\n\t\t\t\t<>{value == 'Chưa bắt đầu' ? <span className=\"tag gray\">{value}</span> : <span className=\"tag green\">{value}</span>}</>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\twidth: 120,\r\n\t\t\ttitle: 'Hành động',\r\n\t\t\tdataIndex: 'Warning',\r\n\t\t\talign: 'center',\r\n\t\t\trender: (warning, item: any, idx) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\thref={{\r\n\t\t\t\t\t\t\t\tpathname: '/course/exercise/result-teacher/[slug]',\r\n\t\t\t\t\t\t\t\tquery: {\r\n\t\t\t\t\t\t\t\t\tslug: `${item.ID}`,\r\n\t\t\t\t\t\t\t\t\tteacherMarking: item.TeacherID,\r\n\t\t\t\t\t\t\t\t\tpackageResultID: item.ID,\r\n\t\t\t\t\t\t\t\t\ttype: 'test'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Tooltip title={!item.isDone ? 'Chấm bài ngay' : 'Xem chi tiết'}>\r\n\t\t\t\t\t\t\t\t<button className=\"btn btn-icon edit\">\r\n\t\t\t\t\t\t\t\t\t<FormOutlined />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t];\r\n\r\n\tuseEffect(() => {\r\n\t\tif (visible) {\r\n\t\t\tconsole.log('props: ', props);\r\n\t\t\tgetResult({ HomeworkID: dataRow.ID });\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst [results, setResults] = useState([]);\r\n\r\n\t// GET RESULT LIST\r\n\tconst getResult = async (params) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconst res = await homeworkResultApi.getAll(params);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetTotalPage(res.data.totalRow);\r\n\t\t\t\tsetResults(res.data.data);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst expandedRowRender = (data, index, y, visible: boolean) => {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<ExamAppointmentPoint isExercise={true} visible={visible} infoID={data.HomeworkID} userID={data.UserInformationID} />\r\n\t\t\t</>\r\n\t\t);\r\n\t};\r\n\r\n\t// RENDER\r\n\treturn (\r\n\t\t<div style={{ width: 1200 }}>\r\n\t\t\t<ExpandTable\r\n\t\t\t\tloading={isLoading}\r\n\t\t\t\tcurrentPage={filters.pageIndex}\r\n\t\t\t\ttotalPage={totalPage}\r\n\t\t\t\tgetPagination={getPagination}\r\n\t\t\t\tdataSource={results}\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tExtra={null}\r\n\t\t\t\tTitleCard={null}\r\n\t\t\t\texpandable={{ expandedRowRender }}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default TableDetail;\r\n"]},"metadata":{},"sourceType":"module"}