{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\context\\\\useDoingTest.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useWrap } from './wrap'; // type answerDetail = {\n// \tAnswerID: number;\n// \tAnswerContent: string;\n// \tFileAudio: string;\n// };\n// type questionDetail = {\n// \tExerciseID: number;\n// \tSetPackageExerciseAnswerStudentList: Array<answerDetail>;\n// };\n// type packageResultDetail = {\n// \tExamTopicDetailID: number;\n// \tExerciseGroupID: number;\n// \tLevel: number;\n// \tType: number;\n// \tSkillID: number;\n// \tSetPackageExerciseStudentInfoList: Array<questionDetail>;\n// };\n\nvar DoingTestContext = /*#__PURE__*/createContext({\n  getListQuestionID: function getListQuestionID() {},\n  getActiveID: function getActiveID() {},\n  getPackageResult: function getPackageResult() {},\n  getListPicked: function getListPicked() {},\n  removeListPicked: function removeListPicked() {},\n  listQuestionID: [],\n  listPicked: [],\n  activeID: null,\n  packageResult: null\n});\nexport var DoingTestProvider = function DoingTestProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      listQuestionID = _useState[0],\n      setListQuestionID = _useState[1];\n\n  var _useState2 = useState(null),\n      activeID = _useState2[0],\n      setActiveID = _useState2[1];\n\n  var _useState3 = useState({\n    StudentID: null,\n    SetPackageDetailID: null,\n    SetPackageResultDetailInfoList: []\n  }),\n      packageResult = _useState3[0],\n      setPackageResult = _useState3[1];\n\n  var _useState4 = useState([]),\n      listPicked = _useState4[0],\n      setListPicked = _useState4[1];\n\n  var _useWrap = useWrap(),\n      userInformation = _useWrap.userInformation;\n\n  console.log('List Picked: ', listPicked); // --- GET LIST QUESTION ID ---\n\n  var getListQuestionID = function getListQuestionID(listQuestionID) {\n    setListQuestionID(listQuestionID);\n  }; // --- GET LIST PICKED ---\n\n\n  var getListPicked = function getListPicked(pickedID) {\n    var cloneList = _toConsumableArray(listPicked);\n\n    console.log('Picked truyền vào: ', pickedID);\n    console.log('List Picked bên trong: ', listPicked);\n\n    if (listPicked.includes(pickedID) === false) {\n      listPicked.push(pickedID);\n      setListPicked(_toConsumableArray(listPicked));\n    } else {\n      return;\n    }\n  }; // --- REMOVE ID IN LIST PICKED ---\n\n\n  var removeListPicked = function removeListPicked(pickedID) {\n    if (listPicked.includes(pickedID)) {\n      var index = listPicked.findIndex(function (id) {\n        return id === pickedID;\n      });\n      listPicked.splice(index, 1); // let newList = listPicked.filter((id) => id !== pickedID);\n\n      setListPicked(_toConsumableArray(listPicked));\n    }\n  }; // --- GET ACTIVE ID ---\n\n\n  var getActiveID = function getActiveID(activeID) {\n    setActiveID(activeID);\n  }; // --- GET PACKAGE RESULT ---\n\n\n  var getPackageResult = function getPackageResult(data) {\n    setPackageResult(data);\n  };\n\n  useEffect(function () {\n    if (userInformation) {\n      if (!packageResult.StudentID) {\n        setPackageResult(_objectSpread(_objectSpread({}, packageResult), {}, {\n          StudentID: userInformation.UserInformationID\n        }));\n      }\n    }\n  }, [userInformation]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DoingTestContext.Provider, {\n      value: {\n        getListQuestionID: getListQuestionID,\n        listQuestionID: listQuestionID,\n        getActiveID: getActiveID,\n        activeID: activeID,\n        packageResult: packageResult,\n        getPackageResult: getPackageResult,\n        listPicked: listPicked,\n        getListPicked: getListPicked,\n        removeListPicked: removeListPicked\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }, _this)\n  }, void 0, false);\n};\n\n_s(DoingTestProvider, \"Y3HULdwu8fPlHWq5F40SmKYPaq0=\", false, function () {\n  return [useWrap];\n});\n\n_c = DoingTestProvider;\nexport var useDoingTest = function useDoingTest() {\n  _s2();\n\n  return useContext(DoingTestContext);\n};\n\n_s2(useDoingTest, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"DoingTestProvider\");","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/context/useDoingTest.tsx"],"names":["React","createContext","useContext","useEffect","useState","useWrap","DoingTestContext","getListQuestionID","getActiveID","getPackageResult","getListPicked","removeListPicked","listQuestionID","listPicked","activeID","packageResult","DoingTestProvider","children","setListQuestionID","setActiveID","StudentID","SetPackageDetailID","SetPackageResultDetailInfoList","setPackageResult","setListPicked","userInformation","console","log","pickedID","cloneList","includes","push","index","findIndex","id","splice","data","UserInformationID","useDoingTest"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { examDetailApi } from '~/apiBase';\r\nimport { useWrap } from './wrap';\r\n\r\n// type answerDetail = {\r\n// \tAnswerID: number;\r\n// \tAnswerContent: string;\r\n// \tFileAudio: string;\r\n// };\r\n\r\n// type questionDetail = {\r\n// \tExerciseID: number;\r\n// \tSetPackageExerciseAnswerStudentList: Array<answerDetail>;\r\n// };\r\n\r\n// type packageResultDetail = {\r\n// \tExamTopicDetailID: number;\r\n// \tExerciseGroupID: number;\r\n// \tLevel: number;\r\n// \tType: number;\r\n// \tSkillID: number;\r\n// \tSetPackageExerciseStudentInfoList: Array<questionDetail>;\r\n// };\r\n\r\nexport type IProps = {\r\n\tgetListQuestionID: Function;\r\n\tgetActiveID: Function;\r\n\tgetPackageResult: Function;\r\n\tgetListPicked: Function;\r\n\tremoveListPicked: Function;\r\n\tpackageResult: ITestExamination;\r\n\tactiveID: number;\r\n\tlistQuestionID: Array<Number>;\r\n\tlistPicked: Array<Number>;\r\n};\r\n\r\nconst DoingTestContext = createContext<IProps>({\r\n\tgetListQuestionID: () => {},\r\n\tgetActiveID: () => {},\r\n\tgetPackageResult: () => {},\r\n\tgetListPicked: () => {},\r\n\tremoveListPicked: () => {},\r\n\tlistQuestionID: [],\r\n\tlistPicked: [],\r\n\tactiveID: null,\r\n\tpackageResult: null\r\n});\r\n\r\nexport const DoingTestProvider = ({ children }) => {\r\n\tconst [listQuestionID, setListQuestionID] = useState([]);\r\n\tconst [activeID, setActiveID] = useState(null);\r\n\tconst [packageResult, setPackageResult] = useState<ITestExamination>({\r\n\t\tStudentID: null,\r\n\t\tSetPackageDetailID: null,\r\n\t\tSetPackageResultDetailInfoList: []\r\n\t});\r\n\tconst [listPicked, setListPicked] = useState([]);\r\n\tconst { userInformation } = useWrap();\r\n\r\n\tconsole.log('List Picked: ', listPicked);\r\n\r\n\t// --- GET LIST QUESTION ID ---\r\n\tconst getListQuestionID = (listQuestionID: Array<Number>) => {\r\n\t\tsetListQuestionID(listQuestionID);\r\n\t};\r\n\r\n\t// --- GET LIST PICKED ---\r\n\tconst getListPicked = (pickedID) => {\r\n\t\tlet cloneList = [...listPicked];\r\n\r\n\t\tconsole.log('Picked truyền vào: ', pickedID);\r\n\t\tconsole.log('List Picked bên trong: ', listPicked);\r\n\r\n\t\tif (listPicked.includes(pickedID) === false) {\r\n\t\t\tlistPicked.push(pickedID);\r\n\t\t\tsetListPicked([...listPicked]);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\t// --- REMOVE ID IN LIST PICKED ---\r\n\tconst removeListPicked = (pickedID) => {\r\n\t\tif (listPicked.includes(pickedID)) {\r\n\t\t\tlet index = listPicked.findIndex((id) => id === pickedID);\r\n\t\t\tlistPicked.splice(index, 1);\r\n\r\n\t\t\t// let newList = listPicked.filter((id) => id !== pickedID);\r\n\t\t\tsetListPicked([...listPicked]);\r\n\t\t}\r\n\t};\r\n\r\n\t// --- GET ACTIVE ID ---\r\n\tconst getActiveID = (activeID: number) => {\r\n\t\tsetActiveID(activeID);\r\n\t};\r\n\r\n\t// --- GET PACKAGE RESULT ---\r\n\tconst getPackageResult = (data: ITestExamination) => {\r\n\t\tsetPackageResult(data);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (userInformation) {\r\n\t\t\tif (!packageResult.StudentID) {\r\n\t\t\t\tsetPackageResult({\r\n\t\t\t\t\t...packageResult,\r\n\t\t\t\t\tStudentID: userInformation.UserInformationID\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}, [userInformation]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<DoingTestContext.Provider\r\n\t\t\t\tvalue={{\r\n\t\t\t\t\tgetListQuestionID,\r\n\t\t\t\t\tlistQuestionID: listQuestionID,\r\n\t\t\t\t\tgetActiveID,\r\n\t\t\t\t\tactiveID: activeID,\r\n\t\t\t\t\tpackageResult: packageResult,\r\n\t\t\t\t\tgetPackageResult,\r\n\t\t\t\t\tlistPicked: listPicked,\r\n\t\t\t\t\tgetListPicked,\r\n\t\t\t\t\tremoveListPicked\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{children}\r\n\t\t\t</DoingTestContext.Provider>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport const useDoingTest = () => useContext(DoingTestContext);\r\n"]},"metadata":{},"sourceType":"module"}