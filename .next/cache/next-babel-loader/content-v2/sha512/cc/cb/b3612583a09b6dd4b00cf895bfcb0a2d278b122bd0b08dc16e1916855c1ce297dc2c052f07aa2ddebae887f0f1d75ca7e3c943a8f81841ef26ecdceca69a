{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\context\\\\useDoingTest.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useWrap } from './wrap'; // type answerDetail = {\n// \tAnswerID: number;\n// \tAnswerContent: string;\n// \tFileAudio: string;\n// };\n// type questionDetail = {\n// \tExerciseID: number;\n// \tSetPackageExerciseAnswerStudentList: Array<answerDetail>;\n// };\n// type packageResultDetail = {\n// \tExamTopicDetailID: number;\n// \tExerciseGroupID: number;\n// \tLevel: number;\n// \tType: number;\n// \tSkillID: number;\n// \tSetPackageExerciseStudentInfoList: Array<questionDetail>;\n// };\n\nconst DoingTestContext = /*#__PURE__*/createContext({\n  getListQuestionID: () => {},\n  getActiveID: () => {},\n  getPackageResult: () => {},\n  getListPicked: () => {},\n  removeListPicked: () => {},\n  listQuestionID: [],\n  listPicked: [],\n  activeID: null,\n  packageResult: null\n});\nexport const DoingTestProvider = ({\n  children\n}) => {\n  const {\n    0: listQuestionID,\n    1: setListQuestionID\n  } = useState([]);\n  const {\n    0: activeID,\n    1: setActiveID\n  } = useState(null);\n  const {\n    0: packageResult,\n    1: setPackageResult\n  } = useState({\n    StudentID: null,\n    SetPackageDetailID: null,\n    SetPackageResultDetailInfoList: []\n  });\n  const {\n    0: listPicked,\n    1: setListPicked\n  } = useState([]);\n  const {\n    userInformation\n  } = useWrap();\n  console.log('List Picked: ', listPicked); // --- GET LIST QUESTION ID ---\n\n  const getListQuestionID = listQuestionID => {\n    setListQuestionID(listQuestionID);\n  }; // --- GET LIST PICKED ---\n\n\n  const getListPicked = pickedID => {\n    let cloneList = [...listPicked];\n    console.log('Picked truyền vào: ', pickedID);\n    console.log('List Picked bên trong: ', listPicked);\n\n    if (listPicked.includes(pickedID) === false) {\n      listPicked.push(pickedID);\n      setListPicked([...listPicked]);\n    } else {\n      return;\n    }\n  }; // --- REMOVE ID IN LIST PICKED ---\n\n\n  const removeListPicked = pickedID => {\n    if (listPicked.includes(pickedID)) {\n      let index = listPicked.findIndex(id => id === pickedID);\n      listPicked.splice(index, 1); // let newList = listPicked.filter((id) => id !== pickedID);\n\n      setListPicked([...listPicked]);\n    }\n  }; // --- GET ACTIVE ID ---\n\n\n  const getActiveID = activeID => {\n    setActiveID(activeID);\n  }; // --- GET PACKAGE RESULT ---\n\n\n  const getPackageResult = data => {\n    setPackageResult(data);\n  };\n\n  useEffect(() => {\n    if (userInformation) {\n      if (!packageResult.StudentID) {\n        setPackageResult(_objectSpread(_objectSpread({}, packageResult), {}, {\n          StudentID: userInformation.UserInformationID\n        }));\n      }\n    }\n  }, [userInformation]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DoingTestContext.Provider, {\n      value: {\n        getListQuestionID,\n        listQuestionID: listQuestionID,\n        getActiveID,\n        activeID: activeID,\n        packageResult: packageResult,\n        getPackageResult,\n        listPicked: listPicked,\n        getListPicked,\n        removeListPicked\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\nexport const useDoingTest = () => useContext(DoingTestContext);","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/context/useDoingTest.tsx"],"names":["React","createContext","useContext","useEffect","useState","useWrap","DoingTestContext","getListQuestionID","getActiveID","getPackageResult","getListPicked","removeListPicked","listQuestionID","listPicked","activeID","packageResult","DoingTestProvider","children","setListQuestionID","setActiveID","setPackageResult","StudentID","SetPackageDetailID","SetPackageResultDetailInfoList","setListPicked","userInformation","console","log","pickedID","cloneList","includes","push","index","findIndex","id","splice","data","UserInformationID","useDoingTest"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { examDetailApi } from '~/apiBase';\r\nimport { useWrap } from './wrap';\r\n\r\n// type answerDetail = {\r\n// \tAnswerID: number;\r\n// \tAnswerContent: string;\r\n// \tFileAudio: string;\r\n// };\r\n\r\n// type questionDetail = {\r\n// \tExerciseID: number;\r\n// \tSetPackageExerciseAnswerStudentList: Array<answerDetail>;\r\n// };\r\n\r\n// type packageResultDetail = {\r\n// \tExamTopicDetailID: number;\r\n// \tExerciseGroupID: number;\r\n// \tLevel: number;\r\n// \tType: number;\r\n// \tSkillID: number;\r\n// \tSetPackageExerciseStudentInfoList: Array<questionDetail>;\r\n// };\r\n\r\nexport type IProps = {\r\n\tgetListQuestionID: Function;\r\n\tgetActiveID: Function;\r\n\tgetPackageResult: Function;\r\n\tgetListPicked: Function;\r\n\tremoveListPicked: Function;\r\n\tpackageResult: ITestExamination;\r\n\tactiveID: number;\r\n\tlistQuestionID: Array<Number>;\r\n\tlistPicked: Array<Number>;\r\n};\r\n\r\nconst DoingTestContext = createContext<IProps>({\r\n\tgetListQuestionID: () => {},\r\n\tgetActiveID: () => {},\r\n\tgetPackageResult: () => {},\r\n\tgetListPicked: () => {},\r\n\tremoveListPicked: () => {},\r\n\tlistQuestionID: [],\r\n\tlistPicked: [],\r\n\tactiveID: null,\r\n\tpackageResult: null\r\n});\r\n\r\nexport const DoingTestProvider = ({ children }) => {\r\n\tconst [listQuestionID, setListQuestionID] = useState([]);\r\n\tconst [activeID, setActiveID] = useState(null);\r\n\tconst [packageResult, setPackageResult] = useState<ITestExamination>({\r\n\t\tStudentID: null,\r\n\t\tSetPackageDetailID: null,\r\n\t\tSetPackageResultDetailInfoList: []\r\n\t});\r\n\tconst [listPicked, setListPicked] = useState([]);\r\n\tconst { userInformation } = useWrap();\r\n\r\n\tconsole.log('List Picked: ', listPicked);\r\n\r\n\t// --- GET LIST QUESTION ID ---\r\n\tconst getListQuestionID = (listQuestionID: Array<Number>) => {\r\n\t\tsetListQuestionID(listQuestionID);\r\n\t};\r\n\r\n\t// --- GET LIST PICKED ---\r\n\tconst getListPicked = (pickedID) => {\r\n\t\tlet cloneList = [...listPicked];\r\n\r\n\t\tconsole.log('Picked truyền vào: ', pickedID);\r\n\t\tconsole.log('List Picked bên trong: ', listPicked);\r\n\r\n\t\tif (listPicked.includes(pickedID) === false) {\r\n\t\t\tlistPicked.push(pickedID);\r\n\t\t\tsetListPicked([...listPicked]);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\t// --- REMOVE ID IN LIST PICKED ---\r\n\tconst removeListPicked = (pickedID) => {\r\n\t\tif (listPicked.includes(pickedID)) {\r\n\t\t\tlet index = listPicked.findIndex((id) => id === pickedID);\r\n\t\t\tlistPicked.splice(index, 1);\r\n\r\n\t\t\t// let newList = listPicked.filter((id) => id !== pickedID);\r\n\t\t\tsetListPicked([...listPicked]);\r\n\t\t}\r\n\t};\r\n\r\n\t// --- GET ACTIVE ID ---\r\n\tconst getActiveID = (activeID: number) => {\r\n\t\tsetActiveID(activeID);\r\n\t};\r\n\r\n\t// --- GET PACKAGE RESULT ---\r\n\tconst getPackageResult = (data: ITestExamination) => {\r\n\t\tsetPackageResult(data);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (userInformation) {\r\n\t\t\tif (!packageResult.StudentID) {\r\n\t\t\t\tsetPackageResult({\r\n\t\t\t\t\t...packageResult,\r\n\t\t\t\t\tStudentID: userInformation.UserInformationID\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}, [userInformation]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<DoingTestContext.Provider\r\n\t\t\t\tvalue={{\r\n\t\t\t\t\tgetListQuestionID,\r\n\t\t\t\t\tlistQuestionID: listQuestionID,\r\n\t\t\t\t\tgetActiveID,\r\n\t\t\t\t\tactiveID: activeID,\r\n\t\t\t\t\tpackageResult: packageResult,\r\n\t\t\t\t\tgetPackageResult,\r\n\t\t\t\t\tlistPicked: listPicked,\r\n\t\t\t\t\tgetListPicked,\r\n\t\t\t\t\tremoveListPicked\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{children}\r\n\t\t\t</DoingTestContext.Provider>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport const useDoingTest = () => useContext(DoingTestContext);\r\n"]},"metadata":{},"sourceType":"module"}