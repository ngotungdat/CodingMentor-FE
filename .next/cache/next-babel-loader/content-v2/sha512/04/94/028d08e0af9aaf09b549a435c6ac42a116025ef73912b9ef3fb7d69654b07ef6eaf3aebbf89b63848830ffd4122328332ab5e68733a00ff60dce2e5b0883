{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\QuestionBank\\\\QuestionShow\\\\QuestionWritting.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Popconfirm, Tooltip, Checkbox } from 'antd';\nimport { Trash2 } from 'react-feather';\nimport CreateQuestionForm from '~/components/Global/QuestionBank/CreateQuestionForm';\nimport ReactHtmlParser from 'react-html-parser';\nimport { exerciseApi } from '~/apiBase';\nimport { useWrap } from '~/context/wrap';\nimport { useExamDetail } from '~/pages/question-bank/exam-list/exam-detail/[slug]';\nimport { CheckOutlined } from '@ant-design/icons';\n\nconst QuestionWritting = props => {\n  const {\n    onGetListQuestionID,\n    listQuestionID,\n    onRemoveQuestionAdd,\n    listQuestionAddOutside\n  } = useExamDetail();\n  const {\n    listQuestion,\n    onFetchData,\n    onRemoveData,\n    isGroup,\n    onEditData,\n    dataExam\n  } = props;\n  const {\n    0: dataListQuestion,\n    1: setDataListQuestion\n  } = useState(null);\n  const {\n    showNoti,\n    userInformation\n  } = useWrap();\n  const {\n    0: visible,\n    1: setVisible\n  } = useState({\n    id: null,\n    status: false\n  });\n  const {\n    0: confirmLoading,\n    1: setConfirmLoading\n  } = useState(false);\n  const {\n    0: loadingAudio,\n    1: setLoadingAudio\n  } = useState(null);\n  const {\n    0: activeID,\n    1: setActiveID\n  } = useState(null);\n  const {\n    0: lengthData,\n    1: setLengthData\n  } = useState(0); // ON EDIT\n\n  const onEdit = dataEdit => {\n    if (!isGroup.status) {\n      onEditData(dataEdit);\n    } else {\n      let index = dataListQuestion.findIndex(item => item.ID == dataEdit.ID);\n      dataListQuestion.splice(index, 1, dataEdit);\n      setDataListQuestion([...dataListQuestion]);\n    }\n  };\n\n  const deleteQuestionItem = quesID => {\n    !visible.status ? setVisible({\n      id: quesID,\n      status: true\n    }) : setVisible({\n      id: quesID,\n      status: false\n    });\n  }; // Chấp nhận xóa câu hỏi\n\n\n  const handleOk = async quesItem => {\n    setConfirmLoading(true);\n    quesItem.Enable = false;\n\n    try {\n      let res = await exerciseApi.update(quesItem);\n\n      if (res.status == 200) {\n        setVisible(_objectSpread(_objectSpread({}, visible), {}, {\n          status: false\n        }));\n        onRemoveData(quesItem);\n        showNoti('success', 'Xóa thành công');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setConfirmLoading(false);\n    }\n  };\n\n  const handleCancel = quesID => {\n    setVisible({\n      id: quesID,\n      status: false\n    });\n  };\n\n  const onHover = ID => {\n    setActiveID(ID);\n  };\n\n  const returnAudio = item => {\n    const audioHTML = item => {\n      return /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: item.LinkAudio,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this);\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: !activeID ? item.LinkAudio !== '' && audioHTML(item) : item.ID == activeID ? !loadingAudio ? item.LinkAudio !== '' && audioHTML(item) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : item.LinkAudio !== '' && audioHTML(item)\n    }, void 0, false);\n  };\n\n  useEffect(() => {\n    // Check active item when add new data\n    if ((dataListQuestion === null || dataListQuestion === void 0 ? void 0 : dataListQuestion.length) > 0) {\n      if (listQuestion.length > lengthData) {\n        setActiveID(listQuestion[0].ID);\n      }\n    }\n\n    setLengthData(listQuestion.length); // Loading audio for change html audio (because the link not change when update state)\n\n    setLoadingAudio(true);\n    setTimeout(() => {\n      setLoadingAudio(false);\n    }, 100);\n    setDataListQuestion(listQuestion);\n  }, [listQuestion]); // On change - add question\n\n  const onChange_AddQuestion = (checked, quesID) => {\n    let objectQuestion = {\n      type: 1,\n      ExerciseOrExerciseGroupID: quesID\n    }; // Call function to get ID of question\n\n    if (checked) {\n      onGetListQuestionID(objectQuestion);\n    } else {\n      onRemoveQuestionAdd(objectQuestion);\n    }\n  };\n\n  useEffect(() => {\n    if ((dataListQuestion === null || dataListQuestion === void 0 ? void 0 : dataListQuestion.length) > 0) {\n      if ((listQuestionAddOutside === null || listQuestionAddOutside === void 0 ? void 0 : listQuestionAddOutside.length) > 0) {\n        dataListQuestion === null || dataListQuestion === void 0 ? void 0 : dataListQuestion.forEach(item => {\n          if (listQuestionAddOutside.some(object => object['ExerciseOrExerciseGroupID'] == item.ID)) {\n            item.isChecked = true;\n          } else {\n            item.isChecked = false;\n          }\n        });\n      } else {\n        dataListQuestion === null || dataListQuestion === void 0 ? void 0 : dataListQuestion.forEach(item => {\n          item.isChecked = false;\n        });\n      }\n\n      setDataListQuestion([...dataListQuestion]);\n    }\n  }, [listQuestionAddOutside]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: (dataListQuestion === null || dataListQuestion === void 0 ? void 0 : dataListQuestion.length) == 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Danh s\\xE1ch c\\xF2n tr\\u1ED1ng\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }, this) : dataListQuestion === null || dataListQuestion === void 0 ? void 0 : dataListQuestion.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `question-item ${item.ID == activeID ? 'active' : ''}`,\n      onMouseEnter: () => onHover(item.ID),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-detail\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"title-ques\",\n            children: [\"C\\xE2u h\\u1ECFi \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 9\n          }, this), item.LinkAudio && returnAudio(item), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title-text\",\n            children: ReactHtmlParser(item.Content)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }, this), (userInformation === null || userInformation === void 0 ? void 0 : userInformation.RoleID) !== 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-action\",\n        children: [/*#__PURE__*/_jsxDEV(CreateQuestionForm, {\n          questionData: item,\n          onFetchData: onFetchData,\n          onEditData: dataEdit => onEdit(dataEdit),\n          isGroup: {\n            status: false,\n            id: null\n          },\n          getActiveID: ID => setActiveID(ID)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"B\\u1EA1n c\\xF3 ch\\u1EAFc mu\\u1ED1n x\\xF3a?\",\n          onConfirm: () => handleOk(item),\n          okButtonProps: {\n            loading: confirmLoading\n          },\n          onCancel: () => handleCancel(item.ID),\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"X\\xF3a c\\xE2u h\\u1ECFi\",\n            placement: \"rightTop\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-icon delete\",\n              onClick: () => deleteQuestionItem(item.ID),\n              children: /*#__PURE__*/_jsxDEV(Trash2, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 12\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 9\n        }, this), dataExam && (listQuestionID.includes(item.ID) ? /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"\\u0110\\xE3 c\\xF3 trong \\u0111\\u1EC1 thi\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-icon edit\",\n            children: /*#__PURE__*/_jsxDEV(CheckOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(Checkbox, {\n          className: \"checkbox-addquestion\",\n          checked: item.isChecked,\n          onChange: e => onChange_AddQuestion(e.target.checked, item.ID)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 8\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 6\n    }, this))\n  }, void 0, false);\n};\n\nexport default QuestionWritting;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/QuestionBank/QuestionShow/QuestionWritting.tsx"],"names":["React","useEffect","useState","Popconfirm","Tooltip","Checkbox","Trash2","CreateQuestionForm","ReactHtmlParser","exerciseApi","useWrap","useExamDetail","CheckOutlined","QuestionWritting","props","onGetListQuestionID","listQuestionID","onRemoveQuestionAdd","listQuestionAddOutside","listQuestion","onFetchData","onRemoveData","isGroup","onEditData","dataExam","dataListQuestion","setDataListQuestion","showNoti","userInformation","visible","setVisible","id","status","confirmLoading","setConfirmLoading","loadingAudio","setLoadingAudio","activeID","setActiveID","lengthData","setLengthData","onEdit","dataEdit","index","findIndex","item","ID","splice","deleteQuestionItem","quesID","handleOk","quesItem","Enable","res","update","error","message","handleCancel","onHover","returnAudio","audioHTML","LinkAudio","length","setTimeout","onChange_AddQuestion","checked","objectQuestion","type","ExerciseOrExerciseGroupID","forEach","some","object","isChecked","map","Content","RoleID","loading","includes","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Popconfirm, Tooltip, Checkbox } from 'antd'\r\nimport { Trash2 } from 'react-feather'\r\nimport CreateQuestionForm from '~/components/Global/QuestionBank/CreateQuestionForm'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport { exerciseApi } from '~/apiBase'\r\nimport { useWrap } from '~/context/wrap'\r\nimport { useExamDetail } from '~/pages/question-bank/exam-list/exam-detail/[slug]'\r\nimport { CheckOutlined } from '@ant-design/icons'\r\nimport _ from '~/appConfig'\r\n\r\nconst QuestionWritting = (props: any) => {\r\n\tconst { onGetListQuestionID, listQuestionID, onRemoveQuestionAdd, listQuestionAddOutside } = useExamDetail()\r\n\tconst { listQuestion, onFetchData, onRemoveData, isGroup, onEditData, dataExam } = props\r\n\tconst [dataListQuestion, setDataListQuestion] = useState(null)\r\n\tconst { showNoti, userInformation } = useWrap()\r\n\tconst [visible, setVisible] = useState({\r\n\t\tid: null,\r\n\t\tstatus: false\r\n\t})\r\n\tconst [confirmLoading, setConfirmLoading] = useState(false)\r\n\tconst [loadingAudio, setLoadingAudio] = useState(null)\r\n\tconst [activeID, setActiveID] = useState(null)\r\n\tconst [lengthData, setLengthData] = useState(0)\r\n\r\n\t// ON EDIT\r\n\tconst onEdit = (dataEdit) => {\r\n\t\tif (!isGroup.status) {\r\n\t\t\tonEditData(dataEdit)\r\n\t\t} else {\r\n\t\t\tlet index = dataListQuestion.findIndex((item) => item.ID == dataEdit.ID)\r\n\t\t\tdataListQuestion.splice(index, 1, dataEdit)\r\n\t\t\tsetDataListQuestion([...dataListQuestion])\r\n\t\t}\r\n\t}\r\n\r\n\tconst deleteQuestionItem = (quesID) => {\r\n\t\t!visible.status\r\n\t\t\t? setVisible({\r\n\t\t\t\t\tid: quesID,\r\n\t\t\t\t\tstatus: true\r\n\t\t\t  })\r\n\t\t\t: setVisible({\r\n\t\t\t\t\tid: quesID,\r\n\t\t\t\t\tstatus: false\r\n\t\t\t  })\r\n\t}\r\n\r\n\t// Chấp nhận xóa câu hỏi\r\n\tconst handleOk = async (quesItem) => {\r\n\t\tsetConfirmLoading(true)\r\n\t\tquesItem.Enable = false\r\n\t\ttry {\r\n\t\t\tlet res = await exerciseApi.update(quesItem)\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tsetVisible({\r\n\t\t\t\t\t...visible,\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t})\r\n\t\t\t\tonRemoveData(quesItem)\r\n\t\t\t\tshowNoti('success', 'Xóa thành công')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetConfirmLoading(false)\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleCancel = (quesID) => {\r\n\t\tsetVisible({\r\n\t\t\tid: quesID,\r\n\t\t\tstatus: false\r\n\t\t})\r\n\t}\r\n\r\n\tconst onHover = (ID: number) => {\r\n\t\tsetActiveID(ID)\r\n\t}\r\n\r\n\tconst returnAudio = (item) => {\r\n\t\tconst audioHTML = (item) => {\r\n\t\t\treturn (\r\n\t\t\t\t<audio controls>\r\n\t\t\t\t\t<source src={item.LinkAudio} type=\"audio/mpeg\" />\r\n\t\t\t\t</audio>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{!activeID ? (\r\n\t\t\t\t\titem.LinkAudio !== '' && audioHTML(item)\r\n\t\t\t\t) : item.ID == activeID ? (\r\n\t\t\t\t\t!loadingAudio ? (\r\n\t\t\t\t\t\titem.LinkAudio !== '' && audioHTML(item)\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<></>\r\n\t\t\t\t\t)\r\n\t\t\t\t) : (\r\n\t\t\t\t\titem.LinkAudio !== '' && audioHTML(item)\r\n\t\t\t\t)}\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\t// Check active item when add new data\r\n\t\tif (dataListQuestion?.length > 0) {\r\n\t\t\tif (listQuestion.length > lengthData) {\r\n\t\t\t\tsetActiveID(listQuestion[0].ID)\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetLengthData(listQuestion.length)\r\n\t\t// Loading audio for change html audio (because the link not change when update state)\r\n\t\tsetLoadingAudio(true)\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetLoadingAudio(false)\r\n\t\t}, 100)\r\n\t\tsetDataListQuestion(listQuestion)\r\n\t}, [listQuestion])\r\n\r\n\t// On change - add question\r\n\tconst onChange_AddQuestion = (checked, quesID) => {\r\n\t\tlet objectQuestion = {\r\n\t\t\ttype: 1,\r\n\t\t\tExerciseOrExerciseGroupID: quesID\r\n\t\t}\r\n\r\n\t\t// Call function to get ID of question\r\n\t\tif (checked) {\r\n\t\t\tonGetListQuestionID(objectQuestion)\r\n\t\t} else {\r\n\t\t\tonRemoveQuestionAdd(objectQuestion)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (dataListQuestion?.length > 0) {\r\n\t\t\tif (listQuestionAddOutside?.length > 0) {\r\n\t\t\t\tdataListQuestion?.forEach((item) => {\r\n\t\t\t\t\tif (listQuestionAddOutside.some((object) => object['ExerciseOrExerciseGroupID'] == item.ID)) {\r\n\t\t\t\t\t\titem.isChecked = true\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\titem.isChecked = false\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tdataListQuestion?.forEach((item) => {\r\n\t\t\t\t\titem.isChecked = false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tsetDataListQuestion([...dataListQuestion])\r\n\t\t}\r\n\t}, [listQuestionAddOutside])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{dataListQuestion?.length == 0 ? (\r\n\t\t\t\t<p className=\"text-center\">\r\n\t\t\t\t\t<b>Danh sách còn trống</b>\r\n\t\t\t\t</p>\r\n\t\t\t) : (\r\n\t\t\t\tdataListQuestion?.map((item, index) => (\r\n\t\t\t\t\t<div className={`question-item ${item.ID == activeID ? 'active' : ''}`} key={index} onMouseEnter={() => onHover(item.ID)}>\r\n\t\t\t\t\t\t<div className=\"box-detail\">\r\n\t\t\t\t\t\t\t<div className=\"box-title\">\r\n\t\t\t\t\t\t\t\t<span className=\"title-ques\">Câu hỏi {index + 1}</span>\r\n\t\t\t\t\t\t\t\t{item.LinkAudio && returnAudio(item)}\r\n\t\t\t\t\t\t\t\t<div className=\"title-text\">{ReactHtmlParser(item.Content)}</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{userInformation?.RoleID !== 2 && (\r\n\t\t\t\t\t\t\t<div className=\"box-action\">\r\n\t\t\t\t\t\t\t\t<CreateQuestionForm\r\n\t\t\t\t\t\t\t\t\tquestionData={item}\r\n\t\t\t\t\t\t\t\t\tonFetchData={onFetchData}\r\n\t\t\t\t\t\t\t\t\tonEditData={(dataEdit) => onEdit(dataEdit)}\r\n\t\t\t\t\t\t\t\t\tisGroup={{ status: false, id: null }}\r\n\t\t\t\t\t\t\t\t\tgetActiveID={(ID: any) => setActiveID(ID)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Popconfirm\r\n\t\t\t\t\t\t\t\t\ttitle=\"Bạn có chắc muốn xóa?\"\r\n\t\t\t\t\t\t\t\t\tonConfirm={() => handleOk(item)}\r\n\t\t\t\t\t\t\t\t\tokButtonProps={{ loading: confirmLoading }}\r\n\t\t\t\t\t\t\t\t\tonCancel={() => handleCancel(item.ID)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Tooltip title=\"Xóa câu hỏi\" placement=\"rightTop\">\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-icon delete\" onClick={() => deleteQuestionItem(item.ID)}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Trash2 />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t</Popconfirm>\r\n\t\t\t\t\t\t\t\t{dataExam &&\r\n\t\t\t\t\t\t\t\t\t(listQuestionID.includes(item.ID) ? (\r\n\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Đã có trong đề thi\">\r\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-icon edit\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<CheckOutlined />\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox-addquestion\"\r\n\t\t\t\t\t\t\t\t\t\t\tchecked={item.isChecked}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => onChange_AddQuestion(e.target.checked, item.ID)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default QuestionWritting\r\n"]},"metadata":{},"sourceType":"module"}