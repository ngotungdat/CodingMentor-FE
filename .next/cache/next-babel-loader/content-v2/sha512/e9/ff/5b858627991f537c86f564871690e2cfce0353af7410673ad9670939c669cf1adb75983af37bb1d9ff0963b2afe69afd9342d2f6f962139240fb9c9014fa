{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\CodingMentor\\\\CodingMentor-FE\\\\src\\\\components\\\\Global\\\\CreateSelfCourse\\\\CreateSelfCourse.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card } from 'antd';\nimport moment from 'moment';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { branchApi, createSelfCourse, curriculumApi, getRangeTimeSelfCourse, gradeApi, programApi, setRangeTimeSelfCourse } from '~/apiBase';\nimport TitlePage from '~/components/TitlePage';\nimport { useWrap } from '~/context/wrap';\nimport { fmSelectArr } from '~/utils/functions';\nimport Schedule from '../CreateCourse/Schedule/Schedule';\nimport CreateSelfCourseCalendar from './Calendar/CreateSelfCourseCalendar';\nimport CreateSelfCourseForm from './CreateSelfCourseForm/CreateSelfCourseForm';\nimport SetTimeSelfCourseForm from './SetTimeSelfCourseForm'; // ------------ MAIN COMPONENT ------------------\n\nconst CreateSelfCourse = () => {\n  const router = useRouter(); // -----------STATE-----------\n  // FORM\n\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: optionListForForm,\n    1: setOptionListForForm\n  } = useState({\n    branchList: [],\n    gradeList: [],\n    programList: [],\n    curriculumList: []\n  });\n  const {\n    0: rangeTime,\n    1: setRangeTime\n  } = useState(); // -----------CREATE COURSE FORM-----------\n  // FETCH BRANCH, STUDY TIME, GRADE IN THE FIRST TIME\n\n  const fetchData = async () => {\n    setIsLoading({\n      type: 'FETCH_DATA',\n      status: true\n    });\n\n    try {\n      const [branch, grade] = await Promise.all([branchApi.getAll({\n        pageIndex: 1,\n        pageSize: 9999\n      }), gradeApi.getAll({\n        selectAll: true\n      })]); // BRANCH\n\n      const newBranchList = fmSelectArr(branch.data.data, 'BranchName', 'ID'); // GRADE\n\n      const newGradeList = fmSelectArr(grade.data.data, 'GradeName', 'ID');\n      setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n        branchList: newBranchList,\n        gradeList: newGradeList\n      }));\n    } catch (error) {\n      console.log('fetchData - PromiseAll:', error);\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_DATA',\n        status: false\n      });\n    }\n  }; // TIME\n\n\n  const onFetchRangeTime = async () => {\n    try {\n      const res = await getRangeTimeSelfCourse();\n\n      if (res.status === 200) {\n        const _res$data$data = res.data.data,\n              {\n          ID\n        } = _res$data$data,\n              rest = _objectWithoutProperties(_res$data$data, [\"ID\"]);\n\n        setRangeTime(rest);\n      }\n    } catch (error) {\n      console.log('onFetchRangeTime', error.message);\n    }\n  };\n\n  const onSetRangeTime = async data => {\n    try {\n      setIsLoading({\n        type: 'SUBMIT_TIME',\n        status: true\n      });\n      const res = await setRangeTimeSelfCourse(data);\n\n      if (res.status === 200) {\n        showNoti('success', res.data.message);\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.log('onSetRangeTime', error.message);\n    } finally {\n      setIsLoading({\n        type: 'SUBMIT_TIME',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    onFetchRangeTime();\n    fetchData();\n  }, []); // PROGRAM\n\n  const fetchProgramByGrade = async id => {\n    setIsLoading({\n      type: 'GradeID',\n      status: true\n    });\n\n    try {\n      const res = await programApi.getAll({\n        GradeID: id\n      });\n\n      if (res.status === 200) {\n        const newProgramList = fmSelectArr(res.data.data, 'ProgramName', 'ID', ['Price']);\n        setOptionListForForm(preState => _objectSpread(_objectSpread({}, preState), {}, {\n          programList: newProgramList\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionListForForm(preState => _objectSpread(_objectSpread({}, preState), {}, {\n          programList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GradeID',\n        status: false\n      });\n    }\n  };\n\n  const fetchCurriculumByProgram = async id => {\n    setIsLoading({\n      type: 'ProgramID',\n      status: true\n    });\n\n    try {\n      const res = await curriculumApi.getAll({\n        ProgramID: id\n      });\n\n      if (res.status === 200) {\n        const newCurriculum = fmSelectArr(res.data.data, 'CurriculumName', 'ID');\n        setOptionListForForm(preState => _objectSpread(_objectSpread({}, preState), {}, {\n          curriculumList: newCurriculum\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionListForForm(preState => _objectSpread(_objectSpread({}, preState), {}, {\n          curriculumList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ProgramID',\n        status: false\n      });\n    }\n  }; // GET COURSE\n\n\n  const getTitle = (arr, vl) => arr.find(p => p.value === vl).title;\n\n  const onCreateCourse = async object => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n\n    try {\n      const {\n        branchList,\n        programList,\n        curriculumList\n      } = optionListForForm;\n      const {\n        BranchID,\n        ProgramID,\n        Price,\n        CurriculumID,\n        CourseName,\n        SalaryOfLesson,\n        StartDay,\n        EndDay\n      } = object;\n      const startDayFm = moment(StartDay).format('YYYY/MM/DD');\n      const endDayFm = moment(EndDay).format('YYYY/MM/DD');\n      const BranchName = getTitle(branchList, BranchID);\n      const ProgramName = getTitle(programList, ProgramID);\n      const CurriculumName = getTitle(curriculumList, CurriculumID);\n      const CourseNameFinal = CourseName ? CourseName : `[${BranchName}][${ProgramName}][${CurriculumName}] - ${moment(StartDay).format('DD/MM/YYYY')}`;\n\n      const fmValues = _objectSpread(_objectSpread({}, object), {}, {\n        Price: parseInt(Price.replace(/\\D/g, '')),\n        SalaryOfLesson: parseInt(SalaryOfLesson.replace(/\\D/g, '')),\n        StartDay: startDayFm,\n        EndDay: endDayFm,\n        CourseName: CourseNameFinal\n      });\n\n      const res = await createSelfCourse(fmValues);\n\n      if (res.status === 200) {\n        router.push(`/course/course-list/edit-self-course/${res.data.data.ID}/`);\n        showNoti('success', 'Tạo khóa học thành công. Hãy sắp xếp lịch học');\n        return true;\n      }\n    } catch (error) {\n      showNoti('error', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-course\",\n    children: [/*#__PURE__*/_jsxDEV(TitlePage, {\n      title: \"T\\u1EA1o kh\\xF3a h\\u1ECDc 1 v\\u1EDBi 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8 col-12\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: \"S\\u1EAFp x\\u1EBFp l\\u1ECBch h\\u1ECDc\",\n          extra: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-page-course d-flex align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(SetTimeSelfCourseForm, {\n              isLoading: isLoading,\n              rangeTimeObj: rangeTime,\n              handleSetRangeTime: onSetRangeTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(CreateSelfCourseForm, {\n              isLoading: isLoading,\n              isUpdate: false //\n              ,\n              optionListForForm: optionListForForm //\n              ,\n              handleGetCourse: onCreateCourse,\n              handleFetchProgramByGrade: fetchProgramByGrade,\n              handleFetchCurriculumByProgram: fetchCurriculumByProgram\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 8\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(CreateSelfCourseCalendar, {\n            eventList: [],\n            isLoaded: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 col-12\",\n        children: /*#__PURE__*/_jsxDEV(Schedule, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 3\n  }, this);\n};\n\nexport default CreateSelfCourse;","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/components/Global/CreateSelfCourse/CreateSelfCourse.tsx"],"names":["Card","moment","useRouter","React","useEffect","useState","branchApi","createSelfCourse","curriculumApi","getRangeTimeSelfCourse","gradeApi","programApi","setRangeTimeSelfCourse","TitlePage","useWrap","fmSelectArr","Schedule","CreateSelfCourseCalendar","CreateSelfCourseForm","SetTimeSelfCourseForm","CreateSelfCourse","router","showNoti","isLoading","setIsLoading","type","status","optionListForForm","setOptionListForForm","branchList","gradeList","programList","curriculumList","rangeTime","setRangeTime","fetchData","branch","grade","Promise","all","getAll","pageIndex","pageSize","selectAll","newBranchList","data","newGradeList","error","console","log","message","onFetchRangeTime","res","ID","rest","onSetRangeTime","fetchProgramByGrade","id","GradeID","newProgramList","preState","fetchCurriculumByProgram","ProgramID","newCurriculum","getTitle","arr","vl","find","p","value","title","onCreateCourse","object","BranchID","Price","CurriculumID","CourseName","SalaryOfLesson","StartDay","EndDay","startDayFm","format","endDayFm","BranchName","ProgramName","CurriculumName","CourseNameFinal","fmValues","parseInt","replace","push"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,IAAT,QAAqB,MAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACCC,SADD,EAECC,gBAFD,EAGCC,aAHD,EAICC,sBAJD,EAKCC,QALD,EAMCC,UAND,EAOCC,sBAPD,QAQO,WARP;AASA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,wBAAP,MAAqC,qCAArC;AACA,OAAOC,oBAAP,MAAiC,6CAAjC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC,C,CACA;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC9B,QAAMC,MAAM,GAAGnB,SAAS,EAAxB,CAD8B,CAE9B;AACA;;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAAeR,OAAO,EAA5B;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA4BnB,QAAQ,CAAC;AAC1CoB,IAAAA,IAAI,EAAE,EADoC;AAE1CC,IAAAA,MAAM,EAAE;AAFkC,GAAD,CAA1C;AAIA,QAAM;AAAA,OAACC,iBAAD;AAAA,OAAoBC;AAApB,MAA4CvB,QAAQ,CAAuB;AAChFwB,IAAAA,UAAU,EAAE,EADoE;AAEhFC,IAAAA,SAAS,EAAE,EAFqE;AAGhFC,IAAAA,WAAW,EAAE,EAHmE;AAIhFC,IAAAA,cAAc,EAAE;AAJgE,GAAvB,CAA1D;AAMA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4B7B,QAAQ,EAA1C,CAf8B,CAgB9B;AACA;;AACA,QAAM8B,SAAS,GAAG,YAAY;AAC7BX,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,YADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;;AAIA,QAAI;AACH,YAAM,CAACU,MAAD,EAASC,KAAT,IAAkB,MAAMC,OAAO,CAACC,GAAR,CAAY,CACzCjC,SAAS,CAACkC,MAAV,CAAiB;AAAEC,QAAAA,SAAS,EAAE,CAAb;AAAgBC,QAAAA,QAAQ,EAAE;AAA1B,OAAjB,CADyC,EAEzChC,QAAQ,CAAC8B,MAAT,CAAgB;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAAhB,CAFyC,CAAZ,CAA9B,CADG,CAKH;;AACA,YAAMC,aAAa,GAAG7B,WAAW,CAACqB,MAAM,CAACS,IAAP,CAAYA,IAAb,EAAmB,YAAnB,EAAiC,IAAjC,CAAjC,CANG,CAOH;;AACA,YAAMC,YAAY,GAAG/B,WAAW,CAACsB,KAAK,CAACQ,IAAN,CAAWA,IAAZ,EAAkB,WAAlB,EAA+B,IAA/B,CAAhC;AACAjB,MAAAA,oBAAoB,iCAChBD,iBADgB;AAEnBE,QAAAA,UAAU,EAAEe,aAFO;AAGnBd,QAAAA,SAAS,EAAEgB;AAHQ,SAApB;AAKA,KAdD,CAcE,OAAOC,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAvC;AACAzB,MAAAA,QAAQ,CAAC,QAAD,EAAWyB,KAAK,CAACG,OAAjB,CAAR;AACA,KAjBD,SAiBU;AACT1B,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,YADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;AACD,GA5BD,CAlB8B,CA+C9B;;;AACA,QAAMyB,gBAAgB,GAAG,YAAY;AACpC,QAAI;AACH,YAAMC,GAAG,GAAG,MAAM3C,sBAAsB,EAAxC;;AACA,UAAI2C,GAAG,CAAC1B,MAAJ,KAAe,GAAnB,EAAwB;AACvB,+BAAwB0B,GAAG,CAACP,IAAJ,CAASA,IAAjC;AAAA,cAAM;AAAEQ,UAAAA;AAAF,SAAN;AAAA,cAAeC,IAAf;;AACApB,QAAAA,YAAY,CAACoB,IAAD,CAAZ;AACA;AACD,KAND,CAME,OAAOP,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAK,CAACG,OAAtC;AACA;AACD,GAVD;;AAWA,QAAMK,cAAc,GAAG,MAAOV,IAAP,IAAyB;AAC/C,QAAI;AACHrB,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,aADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA,YAAM0B,GAAG,GAAG,MAAMxC,sBAAsB,CAACiC,IAAD,CAAxC;;AACA,UAAIO,GAAG,CAAC1B,MAAJ,KAAe,GAAnB,EAAwB;AACvBJ,QAAAA,QAAQ,CAAC,SAAD,EAAY8B,GAAG,CAACP,IAAJ,CAASK,OAArB,CAAR;AACA,eAAO,IAAP;AACA;;AACD,aAAO,KAAP;AACA,KAXD,CAWE,OAAOH,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,KAAK,CAACG,OAApC;AACA,KAbD,SAaU;AACT1B,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,aADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;AACD,GApBD;;AAqBAtB,EAAAA,SAAS,CAAC,MAAM;AACf+C,IAAAA,gBAAgB;AAChBhB,IAAAA,SAAS;AACT,GAHQ,EAGN,EAHM,CAAT,CAhF8B,CAoF9B;;AACA,QAAMqB,mBAAmB,GAAG,MAAOC,EAAP,IAAsB;AACjDjC,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,SADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;;AAKA,QAAI;AACH,YAAM0B,GAAG,GAAG,MAAMzC,UAAU,CAAC6B,MAAX,CAAkB;AACnCkB,QAAAA,OAAO,EAAED;AAD0B,OAAlB,CAAlB;;AAGA,UAAIL,GAAG,CAAC1B,MAAJ,KAAe,GAAnB,EAAwB;AACvB,cAAMiC,cAAc,GAAG5C,WAAW,CAACqC,GAAG,CAACP,IAAJ,CAASA,IAAV,EAAgB,aAAhB,EAA+B,IAA/B,EAAqC,CAAC,OAAD,CAArC,CAAlC;AACAjB,QAAAA,oBAAoB,CAAEgC,QAAD,oCACjBA,QADiB;AAEpB7B,UAAAA,WAAW,EAAE4B;AAFO,UAAD,CAApB;AAIA;;AACD,UAAIP,GAAG,CAAC1B,MAAJ,KAAe,GAAnB,EAAwB;AACvBE,QAAAA,oBAAoB,CAAEgC,QAAD,oCACjBA,QADiB;AAEpB7B,UAAAA,WAAW,EAAE;AAFO,UAAD,CAApB;AAIA;AACD,KAjBD,CAiBE,OAAOgB,KAAP,EAAc;AACfzB,MAAAA,QAAQ,CAAC,QAAD,EAAWyB,KAAK,CAACG,OAAjB,CAAR;AACA,KAnBD,SAmBU;AACT1B,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,SADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;AACD,GA/BD;;AAgCA,QAAMmC,wBAAwB,GAAG,MAAOJ,EAAP,IAAsB;AACtDjC,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,WADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;;AAKA,QAAI;AACH,YAAM0B,GAAG,GAAG,MAAM5C,aAAa,CAACgC,MAAd,CAAqB;AACtCsB,QAAAA,SAAS,EAAEL;AAD2B,OAArB,CAAlB;;AAGA,UAAIL,GAAG,CAAC1B,MAAJ,KAAe,GAAnB,EAAwB;AACvB,cAAMqC,aAAa,GAAGhD,WAAW,CAACqC,GAAG,CAACP,IAAJ,CAASA,IAAV,EAAgB,gBAAhB,EAAkC,IAAlC,CAAjC;AACAjB,QAAAA,oBAAoB,CAAEgC,QAAD,oCACjBA,QADiB;AAEpB5B,UAAAA,cAAc,EAAE+B;AAFI,UAAD,CAApB;AAIA;;AACD,UAAIX,GAAG,CAAC1B,MAAJ,KAAe,GAAnB,EAAwB;AACvBE,QAAAA,oBAAoB,CAAEgC,QAAD,oCACjBA,QADiB;AAEpB5B,UAAAA,cAAc,EAAE;AAFI,UAAD,CAApB;AAIA;AACD,KAjBD,CAiBE,OAAOe,KAAP,EAAc;AACfzB,MAAAA,QAAQ,CAAC,QAAD,EAAWyB,KAAK,CAACG,OAAjB,CAAR;AACA,KAnBD,SAmBU;AACT1B,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,WADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;AACD,GA/BD,CArH8B,CAqJ9B;;;AACA,QAAMsC,QAAQ,GAAG,CAACC,GAAD,EAAuBC,EAAvB,KAA8BD,GAAG,CAACE,IAAJ,CAAUC,CAAD,IAAOA,CAAC,CAACC,KAAF,KAAYH,EAA5B,EAAgCI,KAA/E;;AACA,QAAMC,cAAc,GAAG,MAAOC,MAAP,IAAkB;AACxChD,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,UADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;;AAIA,QAAI;AACH,YAAM;AAAEG,QAAAA,UAAF;AAAcE,QAAAA,WAAd;AAA2BC,QAAAA;AAA3B,UAA8CL,iBAApD;AACA,YAAM;AAAE8C,QAAAA,QAAF;AAAYX,QAAAA,SAAZ;AAAuBY,QAAAA,KAAvB;AAA8BC,QAAAA,YAA9B;AAA4CC,QAAAA,UAA5C;AAAwDC,QAAAA,cAAxD;AAAwEC,QAAAA,QAAxE;AAAkFC,QAAAA;AAAlF,UAA6FP,MAAnG;AACA,YAAMQ,UAAU,GAAG/E,MAAM,CAAC6E,QAAD,CAAN,CAAiBG,MAAjB,CAAwB,YAAxB,CAAnB;AACA,YAAMC,QAAQ,GAAGjF,MAAM,CAAC8E,MAAD,CAAN,CAAeE,MAAf,CAAsB,YAAtB,CAAjB;AAEA,YAAME,UAAU,GAAGnB,QAAQ,CAACnC,UAAD,EAAa4C,QAAb,CAA3B;AACA,YAAMW,WAAW,GAAGpB,QAAQ,CAACjC,WAAD,EAAc+B,SAAd,CAA5B;AACA,YAAMuB,cAAc,GAAGrB,QAAQ,CAAChC,cAAD,EAAiB2C,YAAjB,CAA/B;AACA,YAAMW,eAAe,GAAGV,UAAU,GAC/BA,UAD+B,GAE9B,IAAGO,UAAW,KAAIC,WAAY,KAAIC,cAAe,OAAMpF,MAAM,CAAC6E,QAAD,CAAN,CAAiBG,MAAjB,CAAwB,YAAxB,CAAsC,EAFjG;;AAIA,YAAMM,QAAiB,mCACnBf,MADmB;AAEtBE,QAAAA,KAAK,EAAEc,QAAQ,CAACd,KAAK,CAACe,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAD,CAFO;AAGtBZ,QAAAA,cAAc,EAAEW,QAAQ,CAACX,cAAc,CAACY,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAD,CAHF;AAItBX,QAAAA,QAAQ,EAAEE,UAJY;AAKtBD,QAAAA,MAAM,EAAEG,QALc;AAMtBN,QAAAA,UAAU,EAAEU;AANU,QAAvB;;AAQA,YAAMlC,GAAG,GAAG,MAAM7C,gBAAgB,CAACgF,QAAD,CAAlC;;AACA,UAAInC,GAAG,CAAC1B,MAAJ,KAAe,GAAnB,EAAwB;AACvBL,QAAAA,MAAM,CAACqE,IAAP,CAAa,wCAAuCtC,GAAG,CAACP,IAAJ,CAASA,IAAT,CAAcQ,EAAG,GAArE;AACA/B,QAAAA,QAAQ,CAAC,SAAD,EAAY,+CAAZ,CAAR;AACA,eAAO,IAAP;AACA;AACD,KA3BD,CA2BE,OAAOyB,KAAP,EAAc;AACfzB,MAAAA,QAAQ,CAAC,OAAD,EAAUyB,KAAK,CAACG,OAAhB,CAAR;AACA,KA7BD,SA6BU;AACT1B,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,UADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;AACD,GAxCD;;AAyCA,sBACC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACC,QAAC,SAAD;AAAW,MAAA,KAAK,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACC,QAAC,IAAD;AACC,UAAA,KAAK,EAAC,sCADP;AAEC,UAAA,KAAK,eACJ;AAAK,YAAA,SAAS,EAAC,2CAAf;AAAA,oCACC,QAAC,qBAAD;AAAuB,cAAA,SAAS,EAAEH,SAAlC;AAA6C,cAAA,YAAY,EAAEU,SAA3D;AAAsE,cAAA,kBAAkB,EAAEsB;AAA1F;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC,QAAC,oBAAD;AACC,cAAA,SAAS,EAAEhC,SADZ;AAEC,cAAA,QAAQ,EAAE,KAFX,CAGC;AAHD;AAIC,cAAA,iBAAiB,EAAEI,iBAJpB,CAKC;AALD;AAMC,cAAA,eAAe,EAAE4C,cANlB;AAOC,cAAA,yBAAyB,EAAEf,mBAP5B;AAQC,cAAA,8BAA8B,EAAEK;AARjC;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,iCAkBC,QAAC,wBAAD;AAA0B,YAAA,SAAS,EAAE,EAArC;AAAyC,YAAA,QAAQ,EAAE;AAAnD;AAAA;AAAA;AAAA;AAAA;AAlBD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,eAuBC;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACC,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAvBD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAgCA,CAhOD;;AAkOA,eAAezC,gBAAf","sourcesContent":["import { Card } from 'antd';\r\nimport moment from 'moment';\r\nimport { useRouter } from 'next/router';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n\tbranchApi,\r\n\tcreateSelfCourse,\r\n\tcurriculumApi,\r\n\tgetRangeTimeSelfCourse,\r\n\tgradeApi,\r\n\tprogramApi,\r\n\tsetRangeTimeSelfCourse\r\n} from '~/apiBase';\r\nimport TitlePage from '~/components/TitlePage';\r\nimport { useWrap } from '~/context/wrap';\r\nimport { fmSelectArr } from '~/utils/functions';\r\nimport Schedule from '../CreateCourse/Schedule/Schedule';\r\nimport CreateSelfCourseCalendar from './Calendar/CreateSelfCourseCalendar';\r\nimport CreateSelfCourseForm from './CreateSelfCourseForm/CreateSelfCourseForm';\r\nimport SetTimeSelfCourseForm from './SetTimeSelfCourseForm';\r\n// ------------ MAIN COMPONENT ------------------\r\n\r\nconst CreateSelfCourse = () => {\r\n\tconst router = useRouter();\r\n\t// -----------STATE-----------\r\n\t// FORM\r\n\tconst { showNoti } = useWrap();\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t});\r\n\tconst [optionListForForm, setOptionListForForm] = useState<ISCOptionListForForm>({\r\n\t\tbranchList: [],\r\n\t\tgradeList: [],\r\n\t\tprogramList: [],\r\n\t\tcurriculumList: []\r\n\t});\r\n\tconst [rangeTime, setRangeTime] = useState<ISCTime>();\r\n\t// -----------CREATE COURSE FORM-----------\r\n\t// FETCH BRANCH, STUDY TIME, GRADE IN THE FIRST TIME\r\n\tconst fetchData = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconst [branch, grade] = await Promise.all([\r\n\t\t\t\tbranchApi.getAll({ pageIndex: 1, pageSize: 9999 }),\r\n\t\t\t\tgradeApi.getAll({ selectAll: true })\r\n\t\t\t]);\r\n\t\t\t// BRANCH\r\n\t\t\tconst newBranchList = fmSelectArr(branch.data.data, 'BranchName', 'ID');\r\n\t\t\t// GRADE\r\n\t\t\tconst newGradeList = fmSelectArr(grade.data.data, 'GradeName', 'ID');\r\n\t\t\tsetOptionListForForm({\r\n\t\t\t\t...optionListForForm,\r\n\t\t\t\tbranchList: newBranchList,\r\n\t\t\t\tgradeList: newGradeList\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('fetchData - PromiseAll:', error);\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\t// TIME\r\n\tconst onFetchRangeTime = async () => {\r\n\t\ttry {\r\n\t\t\tconst res = await getRangeTimeSelfCourse();\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst { ID, ...rest } = res.data.data;\r\n\t\t\t\tsetRangeTime(rest);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('onFetchRangeTime', error.message);\r\n\t\t}\r\n\t};\r\n\tconst onSetRangeTime = async (data: ISCTime) => {\r\n\t\ttry {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'SUBMIT_TIME',\r\n\t\t\t\tstatus: true\r\n\t\t\t});\r\n\t\t\tconst res = await setRangeTimeSelfCourse(data);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('onSetRangeTime', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'SUBMIT_TIME',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tonFetchRangeTime();\r\n\t\tfetchData();\r\n\t}, []);\r\n\t// PROGRAM\r\n\tconst fetchProgramByGrade = async (id: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GradeID',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await programApi.getAll({\r\n\t\t\t\tGradeID: id\r\n\t\t\t});\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newProgramList = fmSelectArr(res.data.data, 'ProgramName', 'ID', ['Price']);\r\n\t\t\t\tsetOptionListForForm((preState) => ({\r\n\t\t\t\t\t...preState,\r\n\t\t\t\t\tprogramList: newProgramList\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForForm((preState) => ({\r\n\t\t\t\t\t...preState,\r\n\t\t\t\t\tprogramList: []\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GradeID',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tconst fetchCurriculumByProgram = async (id: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ProgramID',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await curriculumApi.getAll({\r\n\t\t\t\tProgramID: id\r\n\t\t\t});\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newCurriculum = fmSelectArr(res.data.data, 'CurriculumName', 'ID');\r\n\t\t\t\tsetOptionListForForm((preState) => ({\r\n\t\t\t\t\t...preState,\r\n\t\t\t\t\tcurriculumList: newCurriculum\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForForm((preState) => ({\r\n\t\t\t\t\t...preState,\r\n\t\t\t\t\tcurriculumList: []\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ProgramID',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\t// GET COURSE\r\n\tconst getTitle = (arr: IOptionCommon[], vl) => arr.find((p) => p.value === vl).title;\r\n\tconst onCreateCourse = async (object) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconst { branchList, programList, curriculumList } = optionListForForm;\r\n\t\t\tconst { BranchID, ProgramID, Price, CurriculumID, CourseName, SalaryOfLesson, StartDay, EndDay } = object;\r\n\t\t\tconst startDayFm = moment(StartDay).format('YYYY/MM/DD');\r\n\t\t\tconst endDayFm = moment(EndDay).format('YYYY/MM/DD');\r\n\r\n\t\t\tconst BranchName = getTitle(branchList, BranchID);\r\n\t\t\tconst ProgramName = getTitle(programList, ProgramID);\r\n\t\t\tconst CurriculumName = getTitle(curriculumList, CurriculumID);\r\n\t\t\tconst CourseNameFinal = CourseName\r\n\t\t\t\t? CourseName\r\n\t\t\t\t: `[${BranchName}][${ProgramName}][${CurriculumName}] - ${moment(StartDay).format('DD/MM/YYYY')}`;\r\n\r\n\t\t\tconst fmValues: ISCPost = {\r\n\t\t\t\t...object,\r\n\t\t\t\tPrice: parseInt(Price.replace(/\\D/g, '')),\r\n\t\t\t\tSalaryOfLesson: parseInt(SalaryOfLesson.replace(/\\D/g, '')),\r\n\t\t\t\tStartDay: startDayFm,\r\n\t\t\t\tEndDay: endDayFm,\r\n\t\t\t\tCourseName: CourseNameFinal\r\n\t\t\t};\r\n\t\t\tconst res = await createSelfCourse(fmValues);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\trouter.push(`/course/course-list/edit-self-course/${res.data.data.ID}/`);\r\n\t\t\t\tshowNoti('success', 'Tạo khóa học thành công. Hãy sắp xếp lịch học');\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('error', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"create-course\">\r\n\t\t\t<TitlePage title=\"Tạo khóa học 1 với 1\" />\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-8 col-12\">\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\ttitle=\"Sắp xếp lịch học\"\r\n\t\t\t\t\t\textra={\r\n\t\t\t\t\t\t\t<div className=\"btn-page-course d-flex align-items-center\">\r\n\t\t\t\t\t\t\t\t<SetTimeSelfCourseForm isLoading={isLoading} rangeTimeObj={rangeTime} handleSetRangeTime={onSetRangeTime} />\r\n\t\t\t\t\t\t\t\t<CreateSelfCourseForm\r\n\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\tisUpdate={false}\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\toptionListForForm={optionListForForm}\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\thandleGetCourse={onCreateCourse}\r\n\t\t\t\t\t\t\t\t\thandleFetchProgramByGrade={fetchProgramByGrade}\r\n\t\t\t\t\t\t\t\t\thandleFetchCurriculumByProgram={fetchCurriculumByProgram}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CreateSelfCourseCalendar eventList={[]} isLoaded={true} />\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-4 col-12\">\r\n\t\t\t\t\t<Schedule />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CreateSelfCourse;\r\n"]},"metadata":{},"sourceType":"module"}