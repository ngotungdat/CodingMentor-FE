{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\ExamList\\\\ExamShow\\\\MultipleList.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { Checkbox, Popconfirm, Tooltip } from 'antd';\nimport { Trash2 } from 'react-feather';\nimport { examDetailApi } from '~/apiBase';\nimport { useExamDetail } from '~/pages/question-bank/exam-list/exam-detail/[slug]';\nimport { useWrap } from '~/context/wrap';\nimport EditPoint from '../ExamForm/EditPoint';\nimport ChangePosition from '../ExamForm/ChangePosition';\nimport { useDoingTest } from '~/context/useDoingTest';\nimport { useDoneTest } from '~/context/useDoneTest';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\n\nconst MultipleList = props => {\n  const {\n    onDeleteQuestion,\n    isChangePosition\n  } = useExamDetail();\n  const {\n    doneTestData\n  } = useDoneTest();\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    dataQuestion,\n    listAlphabet,\n    listQuestionID,\n    isDoingTest,\n    arPosition,\n    handleChange,\n    addOldItem\n  } = props;\n  const {\n    0: confirmLoading,\n    1: setConfirmLoading\n  } = useState(false);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState({\n    id: null,\n    status: false\n  });\n  const {\n    activeID,\n    getActiveID,\n    packageResult,\n    getPackageResult,\n    getListPicked\n  } = useDoingTest();\n  const {\n    0: ansTrue,\n    1: setAnsTrue\n  } = useState([]);\n\n  const returnPosition = quesID => {\n    let index = listQuestionID.indexOf(quesID);\n    let text = 'Câu ' + (index + 1).toString();\n    return text;\n  }; // Chấp nhận xóa câu hỏi\n\n\n  const handleOk = async quesItem => {\n    let itemDelete = {\n      ID: dataQuestion.ID,\n      Enable: false,\n      ExerciseOrExerciseGroup: [{\n        Point: quesItem.Point,\n        ExerciseOrExerciseGroupID: quesItem.ExerciseID\n      }]\n    };\n    setConfirmLoading(true);\n\n    try {\n      let res = await examDetailApi.update(itemDelete);\n\n      if (res.status == 200) {\n        onDeleteQuestion(itemDelete);\n        showNoti('success', 'Xóa thành công');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setConfirmLoading(false);\n    }\n  }; // Handle cancel popup delte\n\n\n  const handleCancel = quesID => {\n    setVisible({\n      id: quesID,\n      status: false\n    });\n  };\n\n  const deleteQuestionItem = quesID => {\n    !visible.status ? setVisible({\n      id: quesID,\n      status: true\n    }) : setVisible({\n      id: quesID,\n      status: false\n    });\n  }; // ----------- ALL ACTION IN DOINGTEST -------------\n\n\n  const returnChecked = (ansID, quesID) => {\n    if (!doneTestData) {\n      let checked = false; // Find Index\n\n      let indexQuestion = packageResult.SetPackageResultDetailInfoList.findIndex(item => item.ExamTopicDetailID === dataQuestion.ID);\n      let indexQuestionDetail = packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList.findIndex(item => item.ExerciseID === quesID); // Find anh return checked\n\n      if (packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[indexQuestionDetail].SetPackageExerciseAnswerStudentList.some(object => object['AnswerID'] === ansID)) {\n        checked = true;\n      }\n\n      return checked;\n    }\n  };\n\n  const onChange_selectAnswer = (dataAns, quesID) => {\n    getActiveID(quesID);\n    getListPicked(quesID);\n    ansTrue.every(item => {\n      if (item.questionID === quesID) {\n        item.yourTotal = item.yourTotal + 1;\n        return false;\n      }\n\n      return true;\n    });\n    setAnsTrue([...ansTrue]); // Find index\n\n    let indexQuestion = packageResult.SetPackageResultDetailInfoList.findIndex(item => item.ExamTopicDetailID === dataQuestion.ID);\n    let indexQuestionDetail = packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList.findIndex(item => item.ExerciseID === quesID);\n    let indexAnswer = packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[indexQuestionDetail].SetPackageExerciseAnswerStudentList.findIndex(item => item.AnswerID === dataAns.ID);\n\n    if (indexAnswer > -1) {\n      packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[indexQuestionDetail].SetPackageExerciseAnswerStudentList.splice(indexAnswer, 1);\n    } else {\n      // Add new answer to list\n      packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[indexQuestionDetail].SetPackageExerciseAnswerStudentList.push({\n        AnswerID: dataAns.ID,\n        AnswerContent: dataAns.AnswerContent,\n        FileAudio: ''\n      });\n    }\n\n    getPackageResult(_objectSpread({}, packageResult));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: dataQuestion.ExerciseTopic.map((ques, ind) => {\n      var _ques$ExerciseAnswer;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `question-item ${ques.ExerciseID === activeID ? 'active-doing' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box-title\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `title-ques `,\n              children: returnPosition(ques.ExerciseID)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 8\n            }, this), ques.LinkAudio !== '' && ques.LinkAudio !== null && /*#__PURE__*/_jsxDEV(\"audio\", {\n              controls: true,\n              children: /*#__PURE__*/_jsxDEV(\"source\", {\n                src: ques.LinkAudio,\n                type: \"audio/mpeg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"title-text\",\n              children: ReactHtmlParser(ques.Content)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box-answer\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-single question-wrap w-100\",\n              children: (_ques$ExerciseAnswer = ques.ExerciseAnswer) === null || _ques$ExerciseAnswer === void 0 ? void 0 : _ques$ExerciseAnswer.map((ans, i) => /*#__PURE__*/_jsxDEV(Checkbox, {\n                className: \"d-block\",\n                checked: !doneTestData ? !isDoingTest ? false : returnChecked(ans.ID, ques.ExerciseID) : ans.AnswerID !== 0 ? true : false,\n                onChange: e => onChange_selectAnswer(ans, ques.ExerciseID),\n                disabled: !isDoingTest ? true : doneTestData ? true : false,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"tick\",\n                  children: listAlphabet[i]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text\",\n                  style: {\n                    color: doneTestData ? ans.isTrue ? 'green' : ans.AnswerID !== 0 && 'red' : 'inherit'\n                  },\n                  children: !doneTestData ? ans.AnswerContent : ans.ExerciseAnswerContent\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 11\n                }, this), doneTestData && ans.AnswerID !== 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `icon-check ${ans.isTrue ? 'right' : 'wrong'}`,\n                  children: ans.isTrue ? /*#__PURE__*/_jsxDEV(CheckOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(CloseOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 47\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 12\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 10\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 6\n        }, this), dataQuestion.ExerciseGroupID == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-action\",\n          children: [!doneTestData && !isDoingTest && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [!isChangePosition && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(EditPoint, {\n                quesItem: ques,\n                dataQuestion: dataQuestion\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n                title: \"B\\u1EA1n c\\xF3 ch\\u1EAFc mu\\u1ED1n x\\xF3a?\",\n                onConfirm: () => handleOk(ques),\n                okButtonProps: {\n                  loading: confirmLoading\n                },\n                onCancel: () => handleCancel(ques.ID),\n                children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: \"X\\xF3a c\\xE2u h\\u1ECFi\",\n                  placement: \"rightTop\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-icon delete\",\n                    onClick: () => deleteQuestionItem(ques.ID),\n                    children: /*#__PURE__*/_jsxDEV(Trash2, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 204,\n                      columnNumber: 15\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 14\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 12\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(ChangePosition, {\n              dataQuestion: dataQuestion,\n              arPosition: arPosition,\n              questionID: dataQuestion.ID,\n              handleChange: handleChange,\n              addOldItem: addOldItem\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true), !isChangePosition && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"point-question mt-2\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text\",\n              children: ques.Point\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 7\n        }, this)]\n      }, ind, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }, this);\n    })\n  }, void 0, false);\n};\n\nexport default MultipleList;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/ExamList/ExamShow/MultipleList.tsx"],"names":["React","useState","ReactHtmlParser","Checkbox","Popconfirm","Tooltip","Trash2","examDetailApi","useExamDetail","useWrap","EditPoint","ChangePosition","useDoingTest","useDoneTest","CheckOutlined","CloseOutlined","MultipleList","props","onDeleteQuestion","isChangePosition","doneTestData","showNoti","dataQuestion","listAlphabet","listQuestionID","isDoingTest","arPosition","handleChange","addOldItem","confirmLoading","setConfirmLoading","visible","setVisible","id","status","activeID","getActiveID","packageResult","getPackageResult","getListPicked","ansTrue","setAnsTrue","returnPosition","quesID","index","indexOf","text","toString","handleOk","quesItem","itemDelete","ID","Enable","ExerciseOrExerciseGroup","Point","ExerciseOrExerciseGroupID","ExerciseID","res","update","error","message","handleCancel","deleteQuestionItem","returnChecked","ansID","checked","indexQuestion","SetPackageResultDetailInfoList","findIndex","item","ExamTopicDetailID","indexQuestionDetail","SetPackageExerciseStudentInfoList","SetPackageExerciseAnswerStudentList","some","object","onChange_selectAnswer","dataAns","every","questionID","yourTotal","indexAnswer","AnswerID","splice","push","AnswerContent","FileAudio","ExerciseTopic","map","ques","ind","LinkAudio","Content","ExerciseAnswer","ans","i","e","color","isTrue","ExerciseAnswerContent","ExerciseGroupID","loading"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport { Checkbox, Popconfirm, Tooltip } from 'antd'\r\nimport { Trash2 } from 'react-feather'\r\nimport { examDetailApi } from '~/apiBase'\r\nimport { useExamDetail } from '~/pages/question-bank/exam-list/exam-detail/[slug]'\r\nimport { useWrap } from '~/context/wrap'\r\nimport EditPoint from '../ExamForm/EditPoint'\r\nimport ChangePosition from '../ExamForm/ChangePosition'\r\nimport { useDoingTest } from '~/context/useDoingTest'\r\nimport { useDoneTest } from '~/context/useDoneTest'\r\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons'\r\n\r\ntype ansTrue = {\r\n\tquestionID: number\r\n\ttotalAnsTrue: number\r\n\tyourTotal: number\r\n}\r\n\r\nconst MultipleList = (props) => {\r\n\tconst { onDeleteQuestion, isChangePosition } = useExamDetail()\r\n\tconst { doneTestData } = useDoneTest()\r\n\tconst { showNoti } = useWrap()\r\n\tconst { dataQuestion, listAlphabet, listQuestionID, isDoingTest, arPosition, handleChange, addOldItem } = props\r\n\tconst [confirmLoading, setConfirmLoading] = useState(false)\r\n\tconst [visible, setVisible] = useState({\r\n\t\tid: null,\r\n\t\tstatus: false\r\n\t})\r\n\tconst { activeID, getActiveID, packageResult, getPackageResult, getListPicked } = useDoingTest()\r\n\tconst [ansTrue, setAnsTrue] = useState<ansTrue[]>([])\r\n\r\n\tconst returnPosition = (quesID) => {\r\n\t\tlet index = listQuestionID.indexOf(quesID)\r\n\t\tlet text = 'Câu ' + (index + 1).toString()\r\n\t\treturn text\r\n\t}\r\n\r\n\t// Chấp nhận xóa câu hỏi\r\n\tconst handleOk = async (quesItem) => {\r\n\t\tlet itemDelete = {\r\n\t\t\tID: dataQuestion.ID,\r\n\t\t\tEnable: false,\r\n\t\t\tExerciseOrExerciseGroup: [\r\n\t\t\t\t{\r\n\t\t\t\t\tPoint: quesItem.Point,\r\n\t\t\t\t\tExerciseOrExerciseGroupID: quesItem.ExerciseID\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\tsetConfirmLoading(true)\r\n\t\ttry {\r\n\t\t\tlet res = await examDetailApi.update(itemDelete)\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tonDeleteQuestion(itemDelete)\r\n\t\t\t\tshowNoti('success', 'Xóa thành công')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetConfirmLoading(false)\r\n\t\t}\r\n\t}\r\n\r\n\t// Handle cancel popup delte\r\n\tconst handleCancel = (quesID) => {\r\n\t\tsetVisible({\r\n\t\t\tid: quesID,\r\n\t\t\tstatus: false\r\n\t\t})\r\n\t}\r\n\r\n\tconst deleteQuestionItem = (quesID) => {\r\n\t\t!visible.status\r\n\t\t\t? setVisible({\r\n\t\t\t\t\tid: quesID,\r\n\t\t\t\t\tstatus: true\r\n\t\t\t  })\r\n\t\t\t: setVisible({\r\n\t\t\t\t\tid: quesID,\r\n\t\t\t\t\tstatus: false\r\n\t\t\t  })\r\n\t}\r\n\r\n\t// ----------- ALL ACTION IN DOINGTEST -------------\r\n\tconst returnChecked = (ansID, quesID) => {\r\n\t\tif (!doneTestData) {\r\n\t\t\tlet checked = false\r\n\t\t\t// Find Index\r\n\t\t\tlet indexQuestion = packageResult.SetPackageResultDetailInfoList.findIndex((item) => item.ExamTopicDetailID === dataQuestion.ID)\r\n\t\t\tlet indexQuestionDetail = packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList.findIndex(\r\n\t\t\t\t(item) => item.ExerciseID === quesID\r\n\t\t\t)\r\n\t\t\t// Find anh return checked\r\n\t\t\tif (\r\n\t\t\t\tpackageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[\r\n\t\t\t\t\tindexQuestionDetail\r\n\t\t\t\t].SetPackageExerciseAnswerStudentList.some((object) => object['AnswerID'] === ansID)\r\n\t\t\t) {\r\n\t\t\t\tchecked = true\r\n\t\t\t}\r\n\t\t\treturn checked\r\n\t\t}\r\n\t}\r\n\r\n\tconst onChange_selectAnswer = (dataAns, quesID) => {\r\n\t\tgetActiveID(quesID)\r\n\t\tgetListPicked(quesID)\r\n\t\tansTrue.every((item) => {\r\n\t\t\tif (item.questionID === quesID) {\r\n\t\t\t\titem.yourTotal = item.yourTotal + 1\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t})\r\n\t\tsetAnsTrue([...ansTrue])\r\n\t\t// Find index\r\n\t\tlet indexQuestion = packageResult.SetPackageResultDetailInfoList.findIndex((item) => item.ExamTopicDetailID === dataQuestion.ID)\r\n\t\tlet indexQuestionDetail = packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList.findIndex(\r\n\t\t\t(item) => item.ExerciseID === quesID\r\n\t\t)\r\n\t\tlet indexAnswer = packageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[\r\n\t\t\tindexQuestionDetail\r\n\t\t].SetPackageExerciseAnswerStudentList.findIndex((item) => item.AnswerID === dataAns.ID)\r\n\t\tif (indexAnswer > -1) {\r\n\t\t\tpackageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[\r\n\t\t\t\tindexQuestionDetail\r\n\t\t\t].SetPackageExerciseAnswerStudentList.splice(indexAnswer, 1)\r\n\t\t} else {\r\n\t\t\t// Add new answer to list\r\n\t\t\tpackageResult.SetPackageResultDetailInfoList[indexQuestion].SetPackageExerciseStudentInfoList[\r\n\t\t\t\tindexQuestionDetail\r\n\t\t\t].SetPackageExerciseAnswerStudentList.push({\r\n\t\t\t\tAnswerID: dataAns.ID,\r\n\t\t\t\tAnswerContent: dataAns.AnswerContent,\r\n\t\t\t\tFileAudio: ''\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tgetPackageResult({ ...packageResult })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{dataQuestion.ExerciseTopic.map((ques, ind) => (\r\n\t\t\t\t<div className={`question-item ${ques.ExerciseID === activeID ? 'active-doing' : ''}`} key={ind}>\r\n\t\t\t\t\t<div className=\"box-detail\">\r\n\t\t\t\t\t\t<div className=\"box-title\">\r\n\t\t\t\t\t\t\t<span className={`title-ques `}>{returnPosition(ques.ExerciseID)}</span>\r\n\t\t\t\t\t\t\t{ques.LinkAudio !== '' && ques.LinkAudio !== null && (\r\n\t\t\t\t\t\t\t\t<audio controls>\r\n\t\t\t\t\t\t\t\t\t<source src={ques.LinkAudio} type=\"audio/mpeg\" />\r\n\t\t\t\t\t\t\t\t</audio>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t<div className=\"title-text\">{ReactHtmlParser(ques.Content)}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"box-answer\">\r\n\t\t\t\t\t\t\t<div className=\"question-single question-wrap w-100\">\r\n\t\t\t\t\t\t\t\t{ques.ExerciseAnswer?.map((ans, i) => (\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block\"\r\n\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\tchecked={\r\n\t\t\t\t\t\t\t\t\t\t\t!doneTestData ? (!isDoingTest ? false : returnChecked(ans.ID, ques.ExerciseID)) : ans.AnswerID !== 0 ? true : false\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => onChange_selectAnswer(ans, ques.ExerciseID)}\r\n\t\t\t\t\t\t\t\t\t\tdisabled={!isDoingTest ? true : doneTestData ? true : false}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"tick\">{listAlphabet[i]}</span>\r\n\t\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: doneTestData ? (ans.isTrue ? 'green' : ans.AnswerID !== 0 && 'red') : 'inherit'\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{!doneTestData ? ans.AnswerContent : ans.ExerciseAnswerContent}\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t{doneTestData && ans.AnswerID !== 0 && (\r\n\t\t\t\t\t\t\t\t\t\t\t<span className={`icon-check ${ans.isTrue ? 'right' : 'wrong'}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{ans.isTrue ? <CheckOutlined /> : <CloseOutlined />}\r\n\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</Checkbox>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{dataQuestion.ExerciseGroupID == 0 && (\r\n\t\t\t\t\t\t<div className=\"box-action\">\r\n\t\t\t\t\t\t\t{!doneTestData && !isDoingTest && (\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t{!isChangePosition && (\r\n\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t<EditPoint quesItem={ques} dataQuestion={dataQuestion} />\r\n\t\t\t\t\t\t\t\t\t\t\t<Popconfirm\r\n\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Bạn có chắc muốn xóa?\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonConfirm={() => handleOk(ques)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tokButtonProps={{ loading: confirmLoading }}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonCancel={() => handleCancel(ques.ID)}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Xóa câu hỏi\" placement=\"rightTop\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-icon delete\" onClick={() => deleteQuestionItem(ques.ID)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2 />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t\t\t</Popconfirm>\r\n\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t<ChangePosition\r\n\t\t\t\t\t\t\t\t\t\tdataQuestion={dataQuestion}\r\n\t\t\t\t\t\t\t\t\t\tarPosition={arPosition}\r\n\t\t\t\t\t\t\t\t\t\tquestionID={dataQuestion.ID}\r\n\t\t\t\t\t\t\t\t\t\thandleChange={handleChange}\r\n\t\t\t\t\t\t\t\t\t\taddOldItem={addOldItem}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t{!isChangePosition && (\r\n\t\t\t\t\t\t\t\t<div className=\"point-question mt-2\">\r\n\t\t\t\t\t\t\t\t\t<p className=\"text\">{ques.Point}</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MultipleList\r\n"]},"metadata":{},"sourceType":"module"}