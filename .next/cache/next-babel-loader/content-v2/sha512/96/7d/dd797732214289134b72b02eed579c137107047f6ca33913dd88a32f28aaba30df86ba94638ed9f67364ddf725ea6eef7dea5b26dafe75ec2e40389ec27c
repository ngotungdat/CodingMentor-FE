{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\CodingMentor\\\\CodingMentor-FE\\\\src\\\\components\\\\Global\\\\CreateCourseOnline\\\\CreateCourseOnline.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card } from 'antd';\nimport moment from 'moment';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { branchApi, checkTeacherApi, courseApi, curriculumApi, gradeApi, lessonOnlineApi, programApi, staffApi, studyDayOnlineApi, studyTimeApi, teacherApi } from '~/apiBase';\nimport TitlePage from '~/components/TitlePage';\nimport { useWrap } from '~/context/wrap';\nimport { fmArrayToObjectWithSpecialKey, fmSelectArr } from '~/utils/functions';\nimport CreateCourseCalendar from '../CreateCourse/Calendar/CreateCourseCalendar';\nimport Schedule from '../CreateCourse/Schedule/Schedule';\nimport ScheduleList from '../CreateCourse/Schedule/ScheduleList';\nimport CreateCourseOnlineForm from './CreateCourseOnlineForm/CreateCourseOnlineForm';\nimport SaveCreateCourseOnline from './SaveCreateCourseOnline';\nimport ScheduleOnlineItem from './ScheduleOnline/ScheduleOnlineItem'; // ------------ MAIN COMPONENT ------------------\n\nconst dayOfWeek = [{\n  title: 'Thứ 2',\n  value: 1\n}, {\n  title: 'Thứ 3',\n  value: 2\n}, {\n  title: 'Thứ 4',\n  value: 3\n}, {\n  title: 'Thứ 5',\n  value: 4\n}, {\n  title: 'Thứ 6',\n  value: 5\n}, {\n  title: 'Thứ 7',\n  value: 6\n}, {\n  title: 'Chủ nhật',\n  value: 0\n}];\n\nconst CreateCourseOnline = () => {\n  const router = useRouter(); // -----------STATE-----------\n  // FORM\n\n  const {\n    showNoti,\n    userInformation\n  } = useWrap();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: optionListForForm,\n    1: setOptionListForForm\n  } = useState({\n    branchList: [],\n    studyTimeList: [],\n    gradeList: [],\n    programList: [],\n    teacherList: [],\n    dayOfWeek,\n    curriculumList: [],\n    userInformationList: []\n  });\n  const {\n    0: dataToFetchCurriculum,\n    1: setDataToFetchCurriculum\n  } = useState({\n    StudyTimeID: null,\n    ProgramID: null\n  });\n  const {\n    0: dataToFetchTeacher,\n    1: setDataToFetchTeacher\n  } = useState({\n    BranchID: null,\n    ProgramID: null\n  }); //Lesson\n\n  const {\n    0: scheduleList,\n    1: setScheduleList\n  } = useState({\n    available: [],\n    unavailable: []\n  });\n  const {\n    0: optionListForADay,\n    1: setOptionListForADay\n  } = useState({\n    optionStudyTimeList: [],\n    optionTeacherList: []\n  }); //StudyDay\n\n  const {\n    0: calendarList,\n    1: setCalendarList\n  } = useState([]); // SAVE\n\n  const {\n    0: isSave,\n    1: setIsSave\n  } = useState(false);\n  const {\n    0: scheduleShow,\n    1: setScheduleShow\n  } = useState({});\n  const stoneDataToSave = useRef({\n    CourseName: '',\n    AcademicUID: 0,\n    BranchID: 0,\n    CurriculumID: 0,\n    ProgramID: 0,\n    TeacherID: 0,\n    StartDay: '',\n    GradeID: 0,\n    SalaryOfLesson: 0,\n    Price: 0,\n    TimeCourse: [],\n    Avatar: ''\n  });\n  const {\n    0: saveCourseInfo,\n    1: setSaveCourseInfo\n  } = useState({\n    CourseName: '',\n    AcademicUID: 0,\n    BranchID: 0,\n    BranchName: '',\n    GradeID: 0,\n    StudyTimeID: '',\n    StudyTimeName: '',\n    ProgramID: 0,\n    ProgramName: '',\n    TeacherID: 0,\n    TeacherName: '',\n    CurriculumID: 0,\n    CurriculumName: '',\n    StartDay: '',\n    EndDay: '',\n    DaySelected: '',\n    DaySelectedName: '',\n    TypeCourse: 2,\n    SalaryOfLesson: 0,\n    Price: 0,\n    Schedule: [],\n    ImageCourse: ''\n  }); // CALENDAR MODAL\n\n  const {\n    0: dataModalCalendar,\n    1: setDataModalCalendar\n  } = useState({\n    dateString: '',\n    limit: 0,\n    scheduleInDay: 0,\n    scheduleList: []\n  }); // -----------CREATE COURSE FORM-----------\n  // FETCH BRANCH, STUDY TIME, GRADE IN THE FIRST TIME\n\n  const fetchData = async () => {\n    setIsLoading({\n      type: 'FETCH_DATA',\n      status: true\n    });\n\n    try {\n      const [branch, studyTime, grade] = await Promise.all([branchApi.getAll({\n        pageIndex: 1,\n        pageSize: 9999\n      }), studyTimeApi.getAll({\n        selectAll: true\n      }), gradeApi.getAll({\n        selectAll: true\n      })]); // BRANCH\n\n      const newBranchList = fmSelectArr(branch.data.data, 'BranchName', 'ID'); // STUDY TIME\n\n      const newStudyTimeList = fmSelectArr(studyTime.data.data, 'Name', 'ID', ['Time', 'TimeStart', 'TimeEnd']); // GRADE\n\n      const newGradeList = fmSelectArr(grade.data.data, 'GradeName', 'ID');\n      setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n        branchList: newBranchList,\n        studyTimeList: newStudyTimeList,\n        gradeList: newGradeList\n      }));\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_DATA',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []); // FETCH USER INFORMATION - STAFF\n\n  const fetchStaffByBranch = async id => {\n    setIsLoading({\n      type: 'BranchID',\n      status: true\n    });\n\n    try {\n      const res = await staffApi.getAll({\n        BranchID: id,\n        RoleID: 7\n      }); // USER INFORMATION\n\n      if (res.status === 200) {\n        const newUserInformationList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID');\n        setOptionListForForm(preState => _objectSpread(_objectSpread({}, preState), {}, {\n          userInformationList: newUserInformationList\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionListForForm(preState => _objectSpread(_objectSpread({}, preState), {}, {\n          userInformationList: []\n        }));\n      }\n    } catch (error) {\n      console.log('FetchDataByBranch - PromiseAll:', error);\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'BranchID',\n        status: false\n      });\n    }\n  }; // PROGRAM\n\n\n  const fetchProgramByGrade = async id => {\n    setIsLoading({\n      type: 'GradeID',\n      status: true\n    });\n\n    try {\n      const res = await programApi.getAll({\n        GradeID: id,\n        isNotVideo: true\n      });\n\n      if (res.status === 200) {\n        const newProgramList = fmSelectArr(res.data.data, 'ProgramName', 'ID', ['Price']);\n        setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n          programList: newProgramList\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n          programList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GradeID',\n        status: false\n      });\n    }\n  }; // GET ENOUGH 2 VALUE TO GET TEACHER - NEED BRANCH ID - PROGRAM ID\n\n\n  const getValueBeforeFetchTeacher = async (key, value) => {\n    setDataToFetchTeacher(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [key]: value\n    }));\n  };\n\n  const fetchTeacher = async () => {\n    setIsLoading({\n      type: 'ProgramID',\n      status: true\n    });\n\n    try {\n      const res = await teacherApi.getTeacherByProgram(dataToFetchTeacher);\n\n      if (res.status === 200) {\n        const newTeacherList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID');\n\n        if (userInformation && userInformation.RoleID === 2) {\n          setOptionListForForm(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n            teacherList: newTeacherList.filter(item => item.value === userInformation.UserInformationID)\n          }));\n\n          if (newTeacherList.filter(item => item.value === userInformation.UserInformationID).length == 0) {\n            showNoti('danger', 'Giáo viên không được phép dạy chương trình này!');\n          }\n        } else {\n          setOptionListForForm(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n            teacherList: newTeacherList\n          }));\n        }\n      }\n\n      if (res.status === 204) {\n        showNoti('danger', 'Không tìm thấy giáo viên!');\n        setOptionListForForm(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n          teacherList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ProgramID',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (dataToFetchTeacher.ProgramID && dataToFetchTeacher.BranchID) {\n      fetchTeacher();\n    }\n  }, [dataToFetchTeacher]); // CURRICULUM: GET ENOUGH 2 VALUE TO GET CURRICULUM - NEED PROGRAM ID - STUDY TIME ID\n\n  const getValueBeforeFetchCurriculum = async (key, value) => {\n    setDataToFetchCurriculum(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [key]: value\n    }));\n  };\n\n  const fetchCurriculum = async () => {\n    setIsLoading({\n      type: 'ProgramID',\n      status: true\n    });\n\n    try {\n      const res = await curriculumApi.getAll({\n        StudyTimeID: dataToFetchCurriculum.StudyTimeID,\n        ProgramID: dataToFetchCurriculum.ProgramID\n      });\n\n      if (res.status === 200) {\n        const newCurriculum = fmSelectArr(res.data.data, 'CurriculumName', 'ID');\n        setOptionListForForm(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n          curriculumList: newCurriculum\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionListForForm(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n          curriculumList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ProgramID',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (dataToFetchCurriculum.ProgramID && dataToFetchCurriculum.StudyTimeID) {\n      fetchCurriculum();\n    }\n  }, [dataToFetchCurriculum]); // -----------GET COURSE-----------\n\n  const getCourse = async object => {\n    console.log('object of object tracking: ', object);\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n\n    try {\n      const {\n        BranchID,\n        CurriculumID,\n        StartDay: StartDate,\n        ProgramID,\n        TeacherID,\n        GradeID,\n        CourseName,\n        SalaryOfLesson,\n        Price,\n        TimeCourse,\n        Avatar\n      } = object;\n      stoneDataToSave.current = {\n        CourseName,\n        AcademicUID: 0,\n        BranchID,\n        CurriculumID,\n        ProgramID,\n        TeacherID,\n        GradeID,\n        StartDay: StartDate,\n        SalaryOfLesson: +SalaryOfLesson.replace(/\\D/g, ''),\n        Price: +Price.replace(/\\D/g, ''),\n        TimeCourse,\n        Avatar\n      };\n      const lessonParams = {\n        CurriculumnID: CurriculumID,\n        StartDate,\n        BranchID,\n        StudyTimeID: TimeCourse.map(t => t.StudyTimeID).join(','),\n        DaySelected: TimeCourse.map(t => t.DaySelected).join(','),\n        TeacherID\n      };\n      const studyDayParams = {\n        BranchID,\n        StartDate,\n        StudyTimeID: TimeCourse.map(t => t.StudyTimeID).join(','),\n        DaySelected: TimeCourse.map(t => t.DaySelected).join(',')\n      };\n      const arrRes = await Promise.all([lessonOnlineApi.getAll(lessonParams), studyDayOnlineApi.getAll(studyDayParams)]).then(([lessonList, studyDayList]) => {\n        if (lessonList.status === 200) {\n          setScheduleList({\n            available: [],\n            unavailable: lessonList.data.schedule\n          });\n        }\n\n        if (studyDayList.status === 200) {\n          setCalendarList(studyDayList.data.data);\n        }\n\n        if (lessonList.status === 200 && studyDayList.status === 200) {\n          const finalTeacherList = optionListForForm.teacherList.filter(o => o.value === TeacherID);\n          setIsSave(true);\n          setOptionListForADay({\n            optionStudyTimeList: optionListForForm.studyTimeList.filter(opt => TimeCourse.map(t => t.StudyTimeID).includes(opt.value)),\n            optionTeacherList: lessonList.data.schedule.map(s => ({\n              id: s.ID,\n              list: finalTeacherList\n            }))\n          });\n          setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n            teacherList: finalTeacherList\n          }));\n          showNoti('success', 'Thành công');\n          return true;\n        }\n      }).catch(error => {\n        error.status === 400 && showNoti('danger', error.message);\n      });\n      return arrRes;\n    } catch (error) {\n      showNoti('error', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n  }; // -----------SCHEDULE-----------\n\n\n  const onCheckTeacherAvailable = async (params) => {\n    try {\n      setIsLoading({\n        type: 'CHECK_SCHEDULE',\n        status: true\n      });\n\n      const {\n        id\n      } = params,\n            rest = _objectWithoutProperties(params, [\"id\"]);\n\n      const res = await checkTeacherApi.getAll(rest);\n      const idxInOptList = optionListForADay.optionTeacherList.findIndex(o => o.id === id);\n      const newOptionTeacherList = [...optionListForADay.optionTeacherList];\n\n      if (res.status === 200) {\n        newOptionTeacherList.splice(idxInOptList, 1, _objectSpread(_objectSpread({}, optionListForADay.optionTeacherList[idxInOptList]), {}, {\n          list: optionListForForm.teacherList\n        }));\n        setOptionListForADay(_objectSpread(_objectSpread({}, optionListForADay), {}, {\n          optionTeacherList: newOptionTeacherList\n        }));\n        return true;\n      }\n\n      if (res.status === 204) {\n        newOptionTeacherList.splice(idxInOptList, 1, _objectSpread(_objectSpread({}, optionListForADay.optionTeacherList[idxInOptList]), {}, {\n          list: [{\n            title: '----Giáo viên trống----',\n            value: 0\n          }]\n        }));\n        setOptionListForADay(_objectSpread(_objectSpread({}, optionListForADay), {}, {\n          optionTeacherList: newOptionTeacherList\n        }));\n        return false;\n      }\n    } catch (error) {} finally {\n      setIsLoading({\n        type: 'CHECK_SCHEDULE',\n        status: false\n      });\n    }\n  };\n\n  const checkDuplicateStudyTimeInDay = (arr, vl) => {\n    const scheduleSameStudyTime = arr.filter(s => s.CaID === vl);\n\n    if (scheduleSameStudyTime.length > 1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const getNewValueForSchedule = async (uid, date, key, vl) => {\n    var _optionStudyTimeList$;\n\n    const {\n      optionStudyTimeList\n    } = optionListForADay;\n\n    switch (key) {\n      case 'CaID':\n        const CaName = (_optionStudyTimeList$ = optionStudyTimeList.find(o => o.value === vl)) === null || _optionStudyTimeList$ === void 0 ? void 0 : _optionStudyTimeList$.title;\n        const isHasTeacher = await onCheckTeacherAvailable({\n          id: uid,\n          TeacherID: stoneDataToSave.current.TeacherID,\n          CourseID: 0,\n          StudyTimeID: Number(vl),\n          Date: date\n        });\n        const newTeacher = isHasTeacher ? {\n          TeacherID: stoneDataToSave.current.TeacherID,\n          TeacherName: optionListForForm.teacherList[0].title\n        } : {\n          TeacherID: 0,\n          TeacherName: 'Giáo viên trống'\n        };\n        return _objectSpread(_objectSpread({}, newTeacher), {}, {\n          CaName,\n          [key]: vl\n        });\n\n      default:\n        break;\n    }\n  };\n\n  const getNewUnavailableScheduleList = async (uid, key, vl) => {\n    const {\n      unavailable\n    } = scheduleList;\n    const newUnavailable = [...unavailable];\n    const idxSchedule = newUnavailable.findIndex(s => s.ID === uid); // DATE TO CHECK DUPLICATE VALUE\n\n    let date = '';\n\n    if (idxSchedule >= 0) {\n      const schedule = newUnavailable[idxSchedule];\n      date = schedule.date;\n      const newVl = await getNewValueForSchedule(uid, date, key, vl);\n\n      const newSchedule = _objectSpread(_objectSpread({}, schedule), newVl);\n\n      newUnavailable.splice(idxSchedule, 1, newSchedule);\n    }\n\n    return {\n      date,\n      rs: newUnavailable\n    };\n  };\n\n  const changeValueSchedule = async (uid, key, vl) => {\n    const {\n      rs: newUnavailableScheduleList,\n      date\n    } = await getNewUnavailableScheduleList(uid, key, vl);\n    const scheduleList = newUnavailableScheduleList.filter(s => s.date === date);\n\n    if (checkDuplicateStudyTimeInDay(scheduleList, vl)) {\n      showNoti('danger', 'Dữ liệu trùng lập');\n    }\n\n    setDataModalCalendar(_objectSpread(_objectSpread({}, dataModalCalendar), {}, {\n      scheduleList: scheduleList\n    }));\n    setScheduleList(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      unavailable: newUnavailableScheduleList\n    }));\n  };\n\n  const changeStatusSchedule = async (sch, type = 1) => {\n    const newScheduleUnavailableList = [...scheduleList.unavailable];\n    const newScheduleAvailableList = [...scheduleList.available];\n    const fmDate = moment(dataModalCalendar.dateString).format('YYYY-MM-DD');\n    const fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(newScheduleUnavailableList, 'date'); // type = 2 => unavailable to available\n\n    if (type === 2) {\n      const idx = newScheduleUnavailableList.findIndex(s => s.ID === sch.ID);\n\n      const newScheduleObj = _objectSpread(_objectSpread({}, newScheduleUnavailableList[idx]), {}, {\n        date: fmDate\n      });\n\n      newScheduleUnavailableList.splice(idx, 1);\n      newScheduleAvailableList.push(newScheduleObj);\n    } // type = 1 => available to unavailable\n\n\n    if (type === 1) {\n      var _fmScheduleUnavailabl;\n\n      const limit = calendarList.find(c => c.Day === dataModalCalendar.dateString).Limit;\n\n      if (((_fmScheduleUnavailabl = fmScheduleUnavailableToObject[fmDate]) === null || _fmScheduleUnavailabl === void 0 ? void 0 : _fmScheduleUnavailabl.length) >= limit) {\n        showNoti('danger', 'Số ca đạt giới hạn');\n        return false;\n      }\n\n      const idx = newScheduleAvailableList.findIndex(s => s.ID === sch.ID);\n\n      const newScheduleObj = _objectSpread(_objectSpread({}, newScheduleAvailableList[idx]), {}, {\n        date: fmDate\n      }); // CHECK AVAILABLE TEACHER\n\n\n      const newTeacher = await getNewValueForSchedule(newScheduleObj.ID, fmDate, 'CaID', newScheduleObj.CaID);\n      newScheduleAvailableList.splice(idx, 1);\n      newScheduleUnavailableList.push(_objectSpread(_objectSpread({}, newScheduleObj), newTeacher));\n    }\n\n    setScheduleList(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      available: newScheduleAvailableList,\n      unavailable: newScheduleUnavailableList\n    }));\n    return true;\n  }; // -----------CALENDAR-----------\n\n\n  const calendarDateFormat = calendarArr => {\n    const {\n      unavailable\n    } = scheduleList;\n    const fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(unavailable, 'date');\n    const rs = calendarArr.map((c, idx) => {\n      var _fmScheduleUnavailabl2;\n\n      let isValid = true;\n      let limit = c.Limit;\n      let scheduleListForADay = [];\n      let title = `Số buổi trống: ${limit}`;\n      const calendarHadSchedule = (_fmScheduleUnavailabl2 = fmScheduleUnavailableToObject[c.Day.slice(0, 10)]) === null || _fmScheduleUnavailabl2 === void 0 ? void 0 : _fmScheduleUnavailabl2.length;\n\n      if (calendarHadSchedule) {\n        limit = c.Limit - calendarHadSchedule;\n        scheduleListForADay = fmScheduleUnavailableToObject[c.Day.slice(0, 10)];\n        title = 'Click để xem chi tiết';\n      }\n\n      if (!limit) {\n        isValid = false;\n      }\n\n      return {\n        id: idx + 1,\n        title: title,\n        start: moment(c.Day).toDate(),\n        end: moment(c.Day).toDate(),\n        resource: {\n          dateString: c.Day,\n          valid: isValid,\n          limit: c.Limit,\n          scheduleList: scheduleListForADay\n        }\n      };\n    });\n    return rs;\n  };\n\n  const onToggleSchedule = async (sch, type) => {\n    const isChangeStatus = await changeStatusSchedule(sch, type);\n\n    if (isChangeStatus) {\n      const newScheduleList = [...dataModalCalendar.scheduleList];\n      const idx = newScheduleList.findIndex(s => s.ID === sch.ID);\n\n      if (idx >= 0) {\n        newScheduleList.splice(idx, 1);\n      } else {\n        newScheduleList.push(sch);\n      }\n\n      setDataModalCalendar(_objectSpread(_objectSpread({}, dataModalCalendar), {}, {\n        scheduleInDay: newScheduleList.length,\n        scheduleList: newScheduleList\n      }));\n    }\n  }; // -----------SAVE COURSE-----------\n\n\n  const getTitle = (arr, vl) => arr.find(p => p.value === vl).title;\n\n  const getMultiTitle = (arrList, arrVl) => {\n    const rs = [];\n\n    for (const r1 of arrVl.split(',')) {\n      for (const r2 of arrList) {\n        if (+r1 === r2.value) {\n          rs.push(r2.title);\n          break;\n        }\n      }\n    }\n\n    return rs.join(', ');\n  };\n\n  const onValidateDataToSave = () => {\n    const {\n      unavailable\n    } = scheduleList;\n    const rs = {\n      show: [],\n      save: [],\n      endDate: 0\n    };\n\n    for (let i = 0, len = unavailable.length; i < len; i++) {\n      const s = unavailable[i]; // get end date of course\n\n      const checkEndDay = moment(s.date).valueOf();\n\n      if (rs.endDate < checkEndDay) {\n        rs.endDate = checkEndDay;\n      }\n\n      const dayArr = ['Chủ Nhật', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'];\n      const dayOffWeek = dayArr[moment(s.date).day()];\n      let isValid = !s.TeacherID;\n\n      for (let i2 = 0; i2 < len; i2++) {\n        const s2 = scheduleList.unavailable[i2];\n\n        if (i !== i2 && s.date === s2.date && s.CaID === s2.CaID) {\n          isValid = true;\n          break;\n        }\n      }\n\n      rs.show.push({\n        date: s.date,\n        dayOffWeek,\n        studyTimeName: s.CaName,\n        teacherName: s.TeacherName,\n        StudyTimeID: s.CaID,\n        isValid\n      });\n      rs.save.push({\n        CurriculumsDetailID: s.Tiet.CurriculumsDetailID,\n        Date: s.date,\n        StudyTimeID: s.CaID,\n        TeacherID: s.TeacherID,\n        SubjectID: s.Tiet.SubjectID\n      });\n    }\n\n    return rs;\n  };\n\n  const onFetchDataToSave = () => {\n    const {\n      branchList,\n      programList,\n      curriculumList,\n      studyTimeList,\n      teacherList\n    } = optionListForForm;\n    const {\n      show,\n      save,\n      endDate\n    } = onValidateDataToSave();\n    const scheduleListSorted = show.sort((a, b) => moment(a.date).valueOf() - moment(b.date).valueOf());\n    const fmScheduleShowToObject = fmArrayToObjectWithSpecialKey(scheduleListSorted, 'date');\n    const {\n      BranchID,\n      ProgramID,\n      CurriculumID,\n      StartDay,\n      CourseName,\n      TeacherID,\n      TimeCourse\n    } = stoneDataToSave.current;\n    const BranchName = getTitle(branchList, BranchID);\n    const ProgramName = getTitle(programList, ProgramID);\n    const TeacherName = getTitle(teacherList, TeacherID);\n    const CurriculumName = getTitle(curriculumList, CurriculumID);\n    const daySelectedListString = TimeCourse.map(t => t.DaySelected).join(',');\n    const DaySelectedName = getMultiTitle(dayOfWeek, daySelectedListString);\n    const studyTimeListString = TimeCourse.map(t => t.StudyTimeID).join(',');\n    const StudyTimeName = getMultiTitle(studyTimeList, studyTimeListString);\n    const CourseNameFinal = CourseName ? CourseName : `[${BranchName}][${ProgramName}][${CurriculumName}][${StudyTimeName}] - ${moment(StartDay).format('DD/MM/YYYY')}`;\n    setScheduleShow(fmScheduleShowToObject);\n    setSaveCourseInfo(_objectSpread(_objectSpread(_objectSpread({}, saveCourseInfo), stoneDataToSave.current), {}, {\n      CourseName: CourseNameFinal,\n      BranchName,\n      ProgramName,\n      TeacherName,\n      CurriculumName,\n      DaySelectedName,\n      StudyTimeName,\n      DaySelected: daySelectedListString,\n      StudyTimeID: studyTimeListString,\n      EndDay: moment(endDate).format('YYYY/MM/DD'),\n      Schedule: save\n    }));\n  };\n\n  const onSaveCourse = async () => {\n    setIsLoading({\n      type: 'SAVE_COURSE',\n      status: true\n    });\n\n    try {\n      const haveErrors = Object.keys(scheduleShow).find((date, idx) => scheduleShow[date].find(s => s.isValid));\n\n      if (haveErrors) {\n        showNoti('danger', 'Đã xảy ra lỗi. Xin kiểm tra lại');\n        return;\n      }\n\n      console.log('saveCourseInfo: ', saveCourseInfo);\n      const res = await courseApi.add(saveCourseInfo);\n\n      if (res.status === 200) {\n        showNoti('success', res.data.message);\n        router.push('/course/course-list/');\n        return res;\n      }\n    } catch (error) {\n      showNoti('error', error.message);\n    } finally {\n      setIsLoading({\n        type: 'SAVE_COURSE',\n        status: false\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-course\",\n    children: [/*#__PURE__*/_jsxDEV(TitlePage, {\n      title: \"T\\u1EA1o kh\\xF3a h\\u1ECDc online\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8 col-12\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: \"S\\u1EAFp x\\u1EBFp l\\u1ECBch h\\u1ECDc\",\n          extra: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-page-course\",\n            children: [/*#__PURE__*/_jsxDEV(CreateCourseOnlineForm, {\n              isLoading: isLoading,\n              isUpdate: false //\n              ,\n              optionListForForm: optionListForForm //\n              ,\n              handleGetCourse: getCourse,\n              handleFetchDataByBranch: fetchStaffByBranch,\n              handleFetchProgramByGrade: fetchProgramByGrade,\n              handleGetValueBeforeFetchCurriculum: getValueBeforeFetchCurriculum,\n              handleGetValueBeforeFetchTeacher: getValueBeforeFetchTeacher\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 9\n            }, this), isSave && /*#__PURE__*/_jsxDEV(SaveCreateCourseOnline, {\n              isLoading: isLoading,\n              saveInfo: saveCourseInfo,\n              scheduleShow: scheduleShow,\n              handleSaveCourse: onSaveCourse,\n              handleFetchDataToSave: onFetchDataToSave\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 8\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(CreateCourseCalendar, {\n            eventList: calendarDateFormat(calendarList) //\n            ,\n            isLoaded: true //\n            ,\n            handleSetDataModalCalendar: setDataModalCalendar,\n            dataModalCalendar: dataModalCalendar //\n            ,\n            unAvailableList: /*#__PURE__*/_jsxDEV(Schedule, {\n              children: /*#__PURE__*/_jsxDEV(ScheduleList, {\n                children: scheduleList.available.map((s, idx) => /*#__PURE__*/_jsxDEV(ScheduleOnlineItem, {\n                  scheduleObj: s,\n                  handleChangeStatusSchedule: onToggleSchedule\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 844,\n                  columnNumber: 12\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 842,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 9\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(ScheduleList, {\n              panelActiveListInModal: dataModalCalendar.scheduleList.map((_, idx) => idx),\n              children: dataModalCalendar.scheduleList.map((s, idx) => {\n                var _optionListForADay$op;\n\n                return /*#__PURE__*/_jsxDEV(ScheduleOnlineItem, {\n                  isUnavailable: true,\n                  scheduleObj: s,\n                  isLoading: isLoading,\n                  handleChangeValueSchedule: changeValueSchedule,\n                  handleChangeStatusSchedule: onToggleSchedule,\n                  optionTeacherList: ((_optionListForADay$op = optionListForADay.optionTeacherList.find(o => o.id === s.ID)) === null || _optionListForADay$op === void 0 ? void 0 : _optionListForADay$op.list) || [],\n                  optionStudyTime: optionListForADay.optionStudyTimeList\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 852,\n                  columnNumber: 10\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 850,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 col-12 d-none d-md-block\",\n        children: /*#__PURE__*/_jsxDEV(Schedule, {\n          children: /*#__PURE__*/_jsxDEV(ScheduleList, {\n            children: scheduleList.available.map((s, idx) => /*#__PURE__*/_jsxDEV(ScheduleOnlineItem, {\n              scheduleObj: s,\n              handleChangeStatusSchedule: onToggleSchedule\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 802,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 800,\n    columnNumber: 3\n  }, this);\n};\n\nexport default CreateCourseOnline;","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/components/Global/CreateCourseOnline/CreateCourseOnline.tsx"],"names":["Card","moment","useRouter","React","useEffect","useRef","useState","branchApi","checkTeacherApi","courseApi","curriculumApi","gradeApi","lessonOnlineApi","programApi","staffApi","studyDayOnlineApi","studyTimeApi","teacherApi","TitlePage","useWrap","fmArrayToObjectWithSpecialKey","fmSelectArr","CreateCourseCalendar","Schedule","ScheduleList","CreateCourseOnlineForm","SaveCreateCourseOnline","ScheduleOnlineItem","dayOfWeek","title","value","CreateCourseOnline","router","showNoti","userInformation","isLoading","setIsLoading","type","status","optionListForForm","setOptionListForForm","branchList","studyTimeList","gradeList","programList","teacherList","curriculumList","userInformationList","dataToFetchCurriculum","setDataToFetchCurriculum","StudyTimeID","ProgramID","dataToFetchTeacher","setDataToFetchTeacher","BranchID","scheduleList","setScheduleList","available","unavailable","optionListForADay","setOptionListForADay","optionStudyTimeList","optionTeacherList","calendarList","setCalendarList","isSave","setIsSave","scheduleShow","setScheduleShow","stoneDataToSave","CourseName","AcademicUID","CurriculumID","TeacherID","StartDay","GradeID","SalaryOfLesson","Price","TimeCourse","Avatar","saveCourseInfo","setSaveCourseInfo","BranchName","StudyTimeName","ProgramName","TeacherName","CurriculumName","EndDay","DaySelected","DaySelectedName","TypeCourse","ImageCourse","dataModalCalendar","setDataModalCalendar","dateString","limit","scheduleInDay","fetchData","branch","studyTime","grade","Promise","all","getAll","pageIndex","pageSize","selectAll","newBranchList","data","newStudyTimeList","newGradeList","error","message","fetchStaffByBranch","id","res","RoleID","newUserInformationList","preState","console","log","fetchProgramByGrade","isNotVideo","newProgramList","getValueBeforeFetchTeacher","key","prevState","fetchTeacher","getTeacherByProgram","newTeacherList","filter","item","UserInformationID","length","getValueBeforeFetchCurriculum","fetchCurriculum","newCurriculum","getCourse","object","StartDate","current","replace","lessonParams","CurriculumnID","map","t","join","studyDayParams","arrRes","then","lessonList","studyDayList","schedule","finalTeacherList","o","opt","includes","s","ID","list","catch","onCheckTeacherAvailable","params","rest","idxInOptList","findIndex","newOptionTeacherList","splice","checkDuplicateStudyTimeInDay","arr","vl","scheduleSameStudyTime","CaID","getNewValueForSchedule","uid","date","CaName","find","isHasTeacher","CourseID","Number","Date","newTeacher","getNewUnavailableScheduleList","newUnavailable","idxSchedule","newVl","newSchedule","rs","changeValueSchedule","newUnavailableScheduleList","changeStatusSchedule","sch","newScheduleUnavailableList","newScheduleAvailableList","fmDate","format","fmScheduleUnavailableToObject","idx","newScheduleObj","push","c","Day","Limit","calendarDateFormat","calendarArr","isValid","scheduleListForADay","calendarHadSchedule","slice","start","toDate","end","resource","valid","onToggleSchedule","isChangeStatus","newScheduleList","getTitle","p","getMultiTitle","arrList","arrVl","r1","split","r2","onValidateDataToSave","show","save","endDate","i","len","checkEndDay","valueOf","dayArr","dayOffWeek","day","i2","s2","studyTimeName","teacherName","CurriculumsDetailID","Tiet","SubjectID","onFetchDataToSave","scheduleListSorted","sort","a","b","fmScheduleShowToObject","daySelectedListString","studyTimeListString","CourseNameFinal","onSaveCourse","haveErrors","Object","keys","add","_"],"mappings":"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","sourcesContent":["import { Card } from 'antd'\r\nimport moment from 'moment'\r\nimport { useRouter } from 'next/router'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport {\r\n\tbranchApi,\r\n\tcheckTeacherApi,\r\n\tcourseApi,\r\n\tcurriculumApi,\r\n\tgradeApi,\r\n\tlessonOnlineApi,\r\n\tprogramApi,\r\n\tstaffApi,\r\n\tstudyDayOnlineApi,\r\n\tstudyTimeApi,\r\n\tteacherApi\r\n} from '~/apiBase'\r\nimport TitlePage from '~/components/TitlePage'\r\nimport { useWrap } from '~/context/wrap'\r\nimport { fmArrayToObjectWithSpecialKey, fmSelectArr } from '~/utils/functions'\r\nimport CreateCourseCalendar from '../CreateCourse/Calendar/CreateCourseCalendar'\r\nimport Schedule from '../CreateCourse/Schedule/Schedule'\r\nimport ScheduleList from '../CreateCourse/Schedule/ScheduleList'\r\nimport CreateCourseOnlineForm from './CreateCourseOnlineForm/CreateCourseOnlineForm'\r\nimport SaveCreateCourseOnline from './SaveCreateCourseOnline'\r\nimport ScheduleOnlineItem from './ScheduleOnline/ScheduleOnlineItem'\r\n\r\n// ------------ MAIN COMPONENT ------------------\r\nconst dayOfWeek = [\r\n\t{\r\n\t\ttitle: 'Thứ 2',\r\n\t\tvalue: 1\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 3',\r\n\t\tvalue: 2\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 4',\r\n\t\tvalue: 3\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 5',\r\n\t\tvalue: 4\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 6',\r\n\t\tvalue: 5\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 7',\r\n\t\tvalue: 6\r\n\t},\r\n\t{\r\n\t\ttitle: 'Chủ nhật',\r\n\t\tvalue: 0\r\n\t}\r\n]\r\n\r\nconst CreateCourseOnline = () => {\r\n\tconst router = useRouter()\r\n\t// -----------STATE-----------\r\n\t// FORM\r\n\tconst { showNoti, userInformation } = useWrap()\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t})\r\n\tconst [optionListForForm, setOptionListForForm] = useState<ICOOptionListForForm>({\r\n\t\tbranchList: [],\r\n\t\tstudyTimeList: [],\r\n\t\tgradeList: [],\r\n\t\tprogramList: [],\r\n\t\tteacherList: [],\r\n\t\tdayOfWeek,\r\n\t\tcurriculumList: [],\r\n\t\tuserInformationList: []\r\n\t})\r\n\tconst [dataToFetchCurriculum, setDataToFetchCurriculum] = useState<{\r\n\t\tStudyTimeID: number\r\n\t\tProgramID: number\r\n\t}>({\r\n\t\tStudyTimeID: null,\r\n\t\tProgramID: null\r\n\t})\r\n\tconst [dataToFetchTeacher, setDataToFetchTeacher] = useState<{ ProgramID: number; BranchID: number }>({\r\n\t\tBranchID: null,\r\n\t\tProgramID: null\r\n\t})\r\n\t//Lesson\r\n\tconst [scheduleList, setScheduleList] = useState<ICOCreateScheduleList>({\r\n\t\tavailable: [],\r\n\t\tunavailable: []\r\n\t})\r\n\tconst [optionListForADay, setOptionListForADay] = useState<ICOOptionListForADay>({\r\n\t\toptionStudyTimeList: [],\r\n\t\toptionTeacherList: []\r\n\t})\r\n\t//StudyDay\r\n\tconst [calendarList, setCalendarList] = useState<IStudyDay[]>([])\r\n\t// SAVE\r\n\tconst [isSave, setIsSave] = useState(false)\r\n\tconst [scheduleShow, setScheduleShow] = useState<ICOCreateScheduleShowList>({})\r\n\tconst stoneDataToSave = useRef<ICOStoneDataToSave>({\r\n\t\tCourseName: '',\r\n\t\tAcademicUID: 0,\r\n\t\tBranchID: 0,\r\n\t\tCurriculumID: 0,\r\n\t\tProgramID: 0,\r\n\t\tTeacherID: 0,\r\n\t\tStartDay: '',\r\n\t\tGradeID: 0,\r\n\t\tSalaryOfLesson: 0,\r\n\t\tPrice: 0,\r\n\t\tTimeCourse: [],\r\n\t\tAvatar: ''\r\n\t})\r\n\tconst [saveCourseInfo, setSaveCourseInfo] = useState<ICOSaveCourseInfo>({\r\n\t\tCourseName: '',\r\n\t\tAcademicUID: 0,\r\n\t\tBranchID: 0,\r\n\t\tBranchName: '',\r\n\t\tGradeID: 0,\r\n\t\tStudyTimeID: '',\r\n\t\tStudyTimeName: '',\r\n\t\tProgramID: 0,\r\n\t\tProgramName: '',\r\n\t\tTeacherID: 0,\r\n\t\tTeacherName: '',\r\n\t\tCurriculumID: 0,\r\n\t\tCurriculumName: '',\r\n\t\tStartDay: '',\r\n\t\tEndDay: '',\r\n\t\tDaySelected: '',\r\n\t\tDaySelectedName: '',\r\n\t\tTypeCourse: 2,\r\n\t\tSalaryOfLesson: 0,\r\n\t\tPrice: 0,\r\n\t\tSchedule: [],\r\n\t\tImageCourse: ''\r\n\t})\r\n\t// CALENDAR MODAL\r\n\tconst [dataModalCalendar, setDataModalCalendar] = useState<ICODataModal>({\r\n\t\tdateString: '',\r\n\t\tlimit: 0,\r\n\t\tscheduleInDay: 0,\r\n\t\tscheduleList: []\r\n\t})\r\n\t// -----------CREATE COURSE FORM-----------\r\n\t// FETCH BRANCH, STUDY TIME, GRADE IN THE FIRST TIME\r\n\tconst fetchData = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tconst [branch, studyTime, grade] = await Promise.all([\r\n\t\t\t\tbranchApi.getAll({ pageIndex: 1, pageSize: 9999 }),\r\n\t\t\t\tstudyTimeApi.getAll({ selectAll: true }),\r\n\t\t\t\tgradeApi.getAll({ selectAll: true })\r\n\t\t\t])\r\n\t\t\t// BRANCH\r\n\t\t\tconst newBranchList = fmSelectArr(branch.data.data, 'BranchName', 'ID')\r\n\t\t\t// STUDY TIME\r\n\t\t\tconst newStudyTimeList = fmSelectArr(studyTime.data.data, 'Name', 'ID', ['Time', 'TimeStart', 'TimeEnd'])\r\n\t\t\t// GRADE\r\n\t\t\tconst newGradeList = fmSelectArr(grade.data.data, 'GradeName', 'ID')\r\n\t\t\tsetOptionListForForm({\r\n\t\t\t\t...optionListForForm,\r\n\t\t\t\tbranchList: newBranchList,\r\n\t\t\t\tstudyTimeList: newStudyTimeList,\r\n\t\t\t\tgradeList: newGradeList\r\n\t\t\t})\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tfetchData()\r\n\t}, [])\r\n\t// FETCH USER INFORMATION - STAFF\r\n\tconst fetchStaffByBranch = async (id: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'BranchID',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await staffApi.getAll({ BranchID: id, RoleID: 7 })\r\n\t\t\t// USER INFORMATION\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newUserInformationList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID')\r\n\t\t\t\tsetOptionListForForm((preState) => ({\r\n\t\t\t\t\t...preState,\r\n\t\t\t\t\tuserInformationList: newUserInformationList\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForForm((preState) => ({\r\n\t\t\t\t\t...preState,\r\n\t\t\t\t\tuserInformationList: []\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('FetchDataByBranch - PromiseAll:', error)\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'BranchID',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t// PROGRAM\r\n\tconst fetchProgramByGrade = async (id: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GradeID',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await programApi.getAll({\r\n\t\t\t\tGradeID: id,\r\n\t\t\t\tisNotVideo: true\r\n\t\t\t})\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newProgramList = fmSelectArr(res.data.data, 'ProgramName', 'ID', ['Price'])\r\n\t\t\t\tsetOptionListForForm({\r\n\t\t\t\t\t...optionListForForm,\r\n\t\t\t\t\tprogramList: newProgramList\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForForm({\r\n\t\t\t\t\t...optionListForForm,\r\n\t\t\t\t\tprogramList: []\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GradeID',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t// GET ENOUGH 2 VALUE TO GET TEACHER - NEED BRANCH ID - PROGRAM ID\r\n\tconst getValueBeforeFetchTeacher = async (key: string, value: number) => {\r\n\t\tsetDataToFetchTeacher((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\t[key]: value\r\n\t\t}))\r\n\t}\r\n\r\n\tconst fetchTeacher = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ProgramID',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tconst res = await teacherApi.getTeacherByProgram(dataToFetchTeacher)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newTeacherList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID')\r\n\t\t\t\tif (userInformation && userInformation.RoleID === 2) {\r\n\t\t\t\t\tsetOptionListForForm((prevState) => ({\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\tteacherList: newTeacherList.filter((item) => item.value === userInformation.UserInformationID)\r\n\t\t\t\t\t}))\r\n\t\t\t\t\tif (newTeacherList.filter((item) => item.value === userInformation.UserInformationID).length == 0) {\r\n\t\t\t\t\t\tshowNoti('danger', 'Giáo viên không được phép dạy chương trình này!')\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetOptionListForForm((prevState) => ({\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\tteacherList: newTeacherList\r\n\t\t\t\t\t}))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', 'Không tìm thấy giáo viên!')\r\n\t\t\t\tsetOptionListForForm((prevState) => ({\r\n\t\t\t\t\t...prevState,\r\n\t\t\t\t\tteacherList: []\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ProgramID',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tif (dataToFetchTeacher.ProgramID && dataToFetchTeacher.BranchID) {\r\n\t\t\tfetchTeacher()\r\n\t\t}\r\n\t}, [dataToFetchTeacher])\r\n\t// CURRICULUM: GET ENOUGH 2 VALUE TO GET CURRICULUM - NEED PROGRAM ID - STUDY TIME ID\r\n\tconst getValueBeforeFetchCurriculum = async (key: string, value: number) => {\r\n\t\tsetDataToFetchCurriculum((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\t[key]: value\r\n\t\t}))\r\n\t}\r\n\tconst fetchCurriculum = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ProgramID',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await curriculumApi.getAll({\r\n\t\t\t\tStudyTimeID: dataToFetchCurriculum.StudyTimeID,\r\n\t\t\t\tProgramID: dataToFetchCurriculum.ProgramID\r\n\t\t\t})\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newCurriculum = fmSelectArr(res.data.data, 'CurriculumName', 'ID')\r\n\t\t\t\tsetOptionListForForm((prevState) => ({\r\n\t\t\t\t\t...prevState,\r\n\t\t\t\t\tcurriculumList: newCurriculum\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForForm((prevState) => ({\r\n\t\t\t\t\t...prevState,\r\n\t\t\t\t\tcurriculumList: []\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ProgramID',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tif (dataToFetchCurriculum.ProgramID && dataToFetchCurriculum.StudyTimeID) {\r\n\t\t\tfetchCurriculum()\r\n\t\t}\r\n\t}, [dataToFetchCurriculum])\r\n\t// -----------GET COURSE-----------\r\n\tconst getCourse = async (object: ICOCreateForm) => {\r\n\t\tconsole.log('object of object tracking: ', object)\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tconst {\r\n\t\t\t\tBranchID,\r\n\t\t\t\tCurriculumID,\r\n\t\t\t\tStartDay: StartDate,\r\n\t\t\t\tProgramID,\r\n\t\t\t\tTeacherID,\r\n\t\t\t\tGradeID,\r\n\t\t\t\tCourseName,\r\n\t\t\t\tSalaryOfLesson,\r\n\t\t\t\tPrice,\r\n\t\t\t\tTimeCourse,\r\n\t\t\t\tAvatar\r\n\t\t\t} = object\r\n\t\t\tstoneDataToSave.current = {\r\n\t\t\t\tCourseName,\r\n\t\t\t\tAcademicUID: 0,\r\n\t\t\t\tBranchID,\r\n\t\t\t\tCurriculumID,\r\n\t\t\t\tProgramID,\r\n\t\t\t\tTeacherID,\r\n\t\t\t\tGradeID,\r\n\t\t\t\tStartDay: StartDate,\r\n\t\t\t\tSalaryOfLesson: +SalaryOfLesson.replace(/\\D/g, ''),\r\n\t\t\t\tPrice: +Price.replace(/\\D/g, ''),\r\n\t\t\t\tTimeCourse,\r\n\t\t\t\tAvatar\r\n\t\t\t}\r\n\t\t\tconst lessonParams = {\r\n\t\t\t\tCurriculumnID: CurriculumID,\r\n\t\t\t\tStartDate,\r\n\t\t\t\tBranchID,\r\n\t\t\t\tStudyTimeID: TimeCourse.map((t) => t.StudyTimeID).join(','),\r\n\t\t\t\tDaySelected: TimeCourse.map((t) => t.DaySelected).join(','),\r\n\t\t\t\tTeacherID\r\n\t\t\t}\r\n\t\t\tconst studyDayParams = {\r\n\t\t\t\tBranchID,\r\n\t\t\t\tStartDate,\r\n\t\t\t\tStudyTimeID: TimeCourse.map((t) => t.StudyTimeID).join(','),\r\n\t\t\t\tDaySelected: TimeCourse.map((t) => t.DaySelected).join(',')\r\n\t\t\t}\r\n\t\t\tconst arrRes = await Promise.all([lessonOnlineApi.getAll(lessonParams), studyDayOnlineApi.getAll(studyDayParams)])\r\n\t\t\t\t.then(([lessonList, studyDayList]) => {\r\n\t\t\t\t\tif (lessonList.status === 200) {\r\n\t\t\t\t\t\tsetScheduleList({\r\n\t\t\t\t\t\t\tavailable: [],\r\n\t\t\t\t\t\t\tunavailable: lessonList.data.schedule\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (studyDayList.status === 200) {\r\n\t\t\t\t\t\tsetCalendarList(studyDayList.data.data)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (lessonList.status === 200 && studyDayList.status === 200) {\r\n\t\t\t\t\t\tconst finalTeacherList = optionListForForm.teacherList.filter((o) => o.value === TeacherID)\r\n\t\t\t\t\t\tsetIsSave(true)\r\n\t\t\t\t\t\tsetOptionListForADay({\r\n\t\t\t\t\t\t\toptionStudyTimeList: optionListForForm.studyTimeList.filter((opt) =>\r\n\t\t\t\t\t\t\t\tTimeCourse.map((t) => t.StudyTimeID).includes(opt.value as number)\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\toptionTeacherList: lessonList.data.schedule.map((s) => ({\r\n\t\t\t\t\t\t\t\tid: s.ID,\r\n\t\t\t\t\t\t\t\tlist: finalTeacherList\r\n\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\tsetOptionListForForm({\r\n\t\t\t\t\t\t\t...optionListForForm,\r\n\t\t\t\t\t\t\tteacherList: finalTeacherList\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\tshowNoti('success', 'Thành công')\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\terror.status === 400 && showNoti('danger', error.message)\r\n\t\t\t\t})\r\n\t\t\treturn arrRes\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('error', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t// -----------SCHEDULE-----------\r\n\tconst onCheckTeacherAvailable = async (params: {\r\n\t\tid: number\r\n\t\tTeacherID: number\r\n\t\tDate: string\r\n\t\tStudyTimeID: number\r\n\t\tCourseID: number\r\n\t}) => {\r\n\t\ttry {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'CHECK_SCHEDULE',\r\n\t\t\t\tstatus: true\r\n\t\t\t})\r\n\t\t\tconst { id, ...rest } = params\r\n\t\t\tconst res = await checkTeacherApi.getAll(rest)\r\n\t\t\tconst idxInOptList = optionListForADay.optionTeacherList.findIndex((o) => o.id === id)\r\n\t\t\tconst newOptionTeacherList = [...optionListForADay.optionTeacherList]\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tnewOptionTeacherList.splice(idxInOptList, 1, {\r\n\t\t\t\t\t...optionListForADay.optionTeacherList[idxInOptList],\r\n\t\t\t\t\tlist: optionListForForm.teacherList\r\n\t\t\t\t})\r\n\t\t\t\tsetOptionListForADay({\r\n\t\t\t\t\t...optionListForADay,\r\n\t\t\t\t\toptionTeacherList: newOptionTeacherList\r\n\t\t\t\t})\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tnewOptionTeacherList.splice(idxInOptList, 1, {\r\n\t\t\t\t\t...optionListForADay.optionTeacherList[idxInOptList],\r\n\t\t\t\t\tlist: [{ title: '----Giáo viên trống----', value: 0 }]\r\n\t\t\t\t})\r\n\t\t\t\tsetOptionListForADay({\r\n\t\t\t\t\t...optionListForADay,\r\n\t\t\t\t\toptionTeacherList: newOptionTeacherList\r\n\t\t\t\t})\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'CHECK_SCHEDULE',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tconst checkDuplicateStudyTimeInDay = (arr: ISchedule[], vl: number) => {\r\n\t\tconst scheduleSameStudyTime = arr.filter((s) => s.CaID === vl)\r\n\t\tif (scheduleSameStudyTime.length > 1) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\tconst getNewValueForSchedule = async (uid: number, date: string, key: 'CaID', vl: number) => {\r\n\t\tconst { optionStudyTimeList } = optionListForADay\r\n\r\n\t\tswitch (key) {\r\n\t\t\tcase 'CaID':\r\n\t\t\t\tconst CaName = optionStudyTimeList.find((o) => o.value === vl)?.title\r\n\r\n\t\t\t\tconst isHasTeacher = await onCheckTeacherAvailable({\r\n\t\t\t\t\tid: uid,\r\n\t\t\t\t\tTeacherID: stoneDataToSave.current.TeacherID,\r\n\t\t\t\t\tCourseID: 0,\r\n\t\t\t\t\tStudyTimeID: Number(vl),\r\n\t\t\t\t\tDate: date\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst newTeacher = isHasTeacher\r\n\t\t\t\t\t? {\r\n\t\t\t\t\t\t\tTeacherID: stoneDataToSave.current.TeacherID,\r\n\t\t\t\t\t\t\tTeacherName: optionListForForm.teacherList[0].title\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t: {\r\n\t\t\t\t\t\t\tTeacherID: 0,\r\n\t\t\t\t\t\t\tTeacherName: 'Giáo viên trống'\r\n\t\t\t\t\t  }\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...newTeacher,\r\n\t\t\t\t\tCaName,\r\n\t\t\t\t\t[key]: vl\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\tconst getNewUnavailableScheduleList = async (uid: number, key: 'CaID', vl: number) => {\r\n\t\tconst { unavailable } = scheduleList\r\n\t\tconst newUnavailable = [...unavailable]\r\n\r\n\t\tconst idxSchedule = newUnavailable.findIndex((s) => s.ID === uid)\r\n\r\n\t\t// DATE TO CHECK DUPLICATE VALUE\r\n\t\tlet date: string = ''\r\n\t\tif (idxSchedule >= 0) {\r\n\t\t\tconst schedule = newUnavailable[idxSchedule]\r\n\t\t\tdate = schedule.date\r\n\t\t\tconst newVl = await getNewValueForSchedule(uid, date, key, vl)\r\n\t\t\tconst newSchedule = {\r\n\t\t\t\t...schedule,\r\n\t\t\t\t...newVl\r\n\t\t\t}\r\n\t\t\tnewUnavailable.splice(idxSchedule, 1, newSchedule)\r\n\t\t}\r\n\r\n\t\treturn { date, rs: newUnavailable }\r\n\t}\r\n\tconst changeValueSchedule = async (uid: number, key: 'CaID', vl: number) => {\r\n\t\tconst { rs: newUnavailableScheduleList, date } = await getNewUnavailableScheduleList(uid, key, vl)\r\n\t\tconst scheduleList = newUnavailableScheduleList.filter((s) => s.date === date)\r\n\t\tif (checkDuplicateStudyTimeInDay(scheduleList, vl)) {\r\n\t\t\tshowNoti('danger', 'Dữ liệu trùng lập')\r\n\t\t}\r\n\t\tsetDataModalCalendar({\r\n\t\t\t...dataModalCalendar,\r\n\t\t\tscheduleList: scheduleList\r\n\t\t})\r\n\t\tsetScheduleList((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tunavailable: newUnavailableScheduleList\r\n\t\t}))\r\n\t}\r\n\tconst changeStatusSchedule = async (sch: ISchedule, type: number = 1) => {\r\n\t\tconst newScheduleUnavailableList = [...scheduleList.unavailable]\r\n\t\tconst newScheduleAvailableList = [...scheduleList.available]\r\n\t\tconst fmDate = moment(dataModalCalendar.dateString).format('YYYY-MM-DD')\r\n\t\tconst fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(newScheduleUnavailableList, 'date')\r\n\t\t// type = 2 => unavailable to available\r\n\t\tif (type === 2) {\r\n\t\t\tconst idx = newScheduleUnavailableList.findIndex((s) => s.ID === sch.ID)\r\n\t\t\tconst newScheduleObj = {\r\n\t\t\t\t...newScheduleUnavailableList[idx],\r\n\t\t\t\tdate: fmDate\r\n\t\t\t}\r\n\t\t\tnewScheduleUnavailableList.splice(idx, 1)\r\n\t\t\tnewScheduleAvailableList.push(newScheduleObj)\r\n\t\t}\r\n\t\t// type = 1 => available to unavailable\r\n\t\tif (type === 1) {\r\n\t\t\tconst limit = calendarList.find((c) => c.Day === dataModalCalendar.dateString).Limit\r\n\t\t\tif (fmScheduleUnavailableToObject[fmDate]?.length >= limit) {\r\n\t\t\t\tshowNoti('danger', 'Số ca đạt giới hạn')\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\tconst idx = newScheduleAvailableList.findIndex((s) => s.ID === sch.ID)\r\n\t\t\tconst newScheduleObj = {\r\n\t\t\t\t...newScheduleAvailableList[idx],\r\n\t\t\t\tdate: fmDate\r\n\t\t\t}\r\n\t\t\t// CHECK AVAILABLE TEACHER\r\n\t\t\tconst newTeacher = await getNewValueForSchedule(newScheduleObj.ID, fmDate, 'CaID', newScheduleObj.CaID)\r\n\r\n\t\t\tnewScheduleAvailableList.splice(idx, 1)\r\n\t\t\tnewScheduleUnavailableList.push({ ...newScheduleObj, ...newTeacher })\r\n\t\t}\r\n\t\tsetScheduleList((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tavailable: newScheduleAvailableList,\r\n\t\t\tunavailable: newScheduleUnavailableList\r\n\t\t}))\r\n\t\treturn true\r\n\t}\r\n\r\n\t// -----------CALENDAR-----------\r\n\tconst calendarDateFormat = (calendarArr: IStudyDay[]) => {\r\n\t\tconst { unavailable } = scheduleList\r\n\t\tconst fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(unavailable, 'date')\r\n\t\tconst rs = calendarArr.map((c, idx) => {\r\n\t\t\tlet isValid = true\r\n\t\t\tlet limit = c.Limit\r\n\t\t\tlet scheduleListForADay = []\r\n\t\t\tlet title = `Số buổi trống: ${limit}`\r\n\r\n\t\t\tconst calendarHadSchedule = fmScheduleUnavailableToObject[c.Day.slice(0, 10)]?.length\r\n\r\n\t\t\tif (calendarHadSchedule) {\r\n\t\t\t\tlimit = c.Limit - calendarHadSchedule\r\n\t\t\t\tscheduleListForADay = fmScheduleUnavailableToObject[c.Day.slice(0, 10)]\r\n\t\t\t\ttitle = 'Click để xem chi tiết'\r\n\t\t\t}\r\n\r\n\t\t\tif (!limit) {\r\n\t\t\t\tisValid = false\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tid: idx + 1,\r\n\t\t\t\ttitle: title,\r\n\t\t\t\tstart: moment(c.Day).toDate(),\r\n\t\t\t\tend: moment(c.Day).toDate(),\r\n\t\t\t\tresource: {\r\n\t\t\t\t\tdateString: c.Day,\r\n\t\t\t\t\tvalid: isValid,\r\n\t\t\t\t\tlimit: c.Limit,\r\n\t\t\t\t\tscheduleList: scheduleListForADay\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn rs\r\n\t}\r\n\tconst onToggleSchedule = async (sch: ISchedule, type: number) => {\r\n\t\tconst isChangeStatus = await changeStatusSchedule(sch, type)\r\n\t\tif (isChangeStatus) {\r\n\t\t\tconst newScheduleList = [...dataModalCalendar.scheduleList]\r\n\t\t\tconst idx = newScheduleList.findIndex((s) => s.ID === sch.ID)\r\n\t\t\tif (idx >= 0) {\r\n\t\t\t\tnewScheduleList.splice(idx, 1)\r\n\t\t\t} else {\r\n\t\t\t\tnewScheduleList.push(sch)\r\n\t\t\t}\r\n\t\t\tsetDataModalCalendar({\r\n\t\t\t\t...dataModalCalendar,\r\n\t\t\t\tscheduleInDay: newScheduleList.length,\r\n\t\t\t\tscheduleList: newScheduleList\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t// -----------SAVE COURSE-----------\r\n\tconst getTitle = (arr: IOptionCommon[], vl) => arr.find((p) => p.value === vl).title\r\n\tconst getMultiTitle = (arrList: IOptionCommon[], arrVl: string) => {\r\n\t\tconst rs = []\r\n\t\tfor (const r1 of arrVl.split(',')) {\r\n\t\t\tfor (const r2 of arrList) {\r\n\t\t\t\tif (+r1 === r2.value) {\r\n\t\t\t\t\trs.push(r2.title)\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rs.join(', ')\r\n\t}\r\n\tconst onValidateDataToSave = () => {\r\n\t\tconst { unavailable } = scheduleList\r\n\t\tconst rs: {\r\n\t\t\tshow: {\r\n\t\t\t\tdate: string\r\n\t\t\t\tdayOffWeek: string\r\n\t\t\t\tstudyTimeName: string\r\n\t\t\t\tteacherName: string\r\n\t\t\t\tStudyTimeID: number\r\n\t\t\t\tisValid: boolean\r\n\t\t\t}[]\r\n\t\t\tsave: ICOScheduleListToSave[]\r\n\t\t\tendDate: number\r\n\t\t} = {\r\n\t\t\tshow: [],\r\n\t\t\tsave: [],\r\n\t\t\tendDate: 0\r\n\t\t}\r\n\t\tfor (let i = 0, len = unavailable.length; i < len; i++) {\r\n\t\t\tconst s = unavailable[i]\r\n\t\t\t// get end date of course\r\n\t\t\tconst checkEndDay = moment(s.date).valueOf()\r\n\t\t\tif (rs.endDate < checkEndDay) {\r\n\t\t\t\trs.endDate = checkEndDay\r\n\t\t\t}\r\n\t\t\tconst dayArr = ['Chủ Nhật', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7']\r\n\t\t\tconst dayOffWeek = dayArr[moment(s.date).day()]\r\n\t\t\tlet isValid = !s.TeacherID\r\n\t\t\tfor (let i2 = 0; i2 < len; i2++) {\r\n\t\t\t\tconst s2 = scheduleList.unavailable[i2]\r\n\t\t\t\tif (i !== i2 && s.date === s2.date && s.CaID === s2.CaID) {\r\n\t\t\t\t\tisValid = true\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trs.show.push({\r\n\t\t\t\tdate: s.date,\r\n\t\t\t\tdayOffWeek,\r\n\t\t\t\tstudyTimeName: s.CaName,\r\n\t\t\t\tteacherName: s.TeacherName,\r\n\t\t\t\tStudyTimeID: s.CaID,\r\n\t\t\t\tisValid\r\n\t\t\t})\r\n\t\t\trs.save.push({\r\n\t\t\t\tCurriculumsDetailID: s.Tiet.CurriculumsDetailID,\r\n\t\t\t\tDate: s.date,\r\n\t\t\t\tStudyTimeID: s.CaID,\r\n\t\t\t\tTeacherID: s.TeacherID,\r\n\t\t\t\tSubjectID: s.Tiet.SubjectID\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn rs\r\n\t}\r\n\r\n\tconst onFetchDataToSave = () => {\r\n\t\tconst { branchList, programList, curriculumList, studyTimeList, teacherList } = optionListForForm\r\n\t\tconst { show, save, endDate } = onValidateDataToSave()\r\n\r\n\t\tconst scheduleListSorted = show.sort((a, b) => moment(a.date).valueOf() - moment(b.date).valueOf())\r\n\r\n\t\tconst fmScheduleShowToObject = fmArrayToObjectWithSpecialKey(scheduleListSorted, 'date')\r\n\r\n\t\tconst { BranchID, ProgramID, CurriculumID, StartDay, CourseName, TeacherID, TimeCourse } = stoneDataToSave.current\r\n\r\n\t\tconst BranchName = getTitle(branchList, BranchID)\r\n\t\tconst ProgramName = getTitle(programList, ProgramID)\r\n\t\tconst TeacherName = getTitle(teacherList, TeacherID)\r\n\t\tconst CurriculumName = getTitle(curriculumList, CurriculumID)\r\n\r\n\t\tconst daySelectedListString = TimeCourse.map((t) => t.DaySelected).join(',')\r\n\t\tconst DaySelectedName = getMultiTitle(dayOfWeek, daySelectedListString)\r\n\t\tconst studyTimeListString = TimeCourse.map((t) => t.StudyTimeID).join(',')\r\n\t\tconst StudyTimeName = getMultiTitle(studyTimeList, studyTimeListString)\r\n\r\n\t\tconst CourseNameFinal = CourseName\r\n\t\t\t? CourseName\r\n\t\t\t: `[${BranchName}][${ProgramName}][${CurriculumName}][${StudyTimeName}] - ${moment(StartDay).format('DD/MM/YYYY')}`\r\n\r\n\t\tsetScheduleShow(fmScheduleShowToObject)\r\n\t\tsetSaveCourseInfo({\r\n\t\t\t...saveCourseInfo,\r\n\t\t\t...stoneDataToSave.current,\r\n\t\t\tCourseName: CourseNameFinal,\r\n\t\t\tBranchName,\r\n\t\t\tProgramName,\r\n\t\t\tTeacherName,\r\n\t\t\tCurriculumName,\r\n\t\t\tDaySelectedName,\r\n\t\t\tStudyTimeName,\r\n\t\t\tDaySelected: daySelectedListString,\r\n\t\t\tStudyTimeID: studyTimeListString,\r\n\t\t\tEndDay: moment(endDate).format('YYYY/MM/DD'),\r\n\t\t\tSchedule: save\r\n\t\t})\r\n\t}\r\n\r\n\tconst onSaveCourse = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'SAVE_COURSE',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tconst haveErrors = Object.keys(scheduleShow).find((date, idx) => scheduleShow[date].find((s) => s.isValid))\r\n\t\t\tif (haveErrors) {\r\n\t\t\t\tshowNoti('danger', 'Đã xảy ra lỗi. Xin kiểm tra lại')\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tconsole.log('saveCourseInfo: ', saveCourseInfo)\r\n\t\t\tconst res = await courseApi.add(saveCourseInfo)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tshowNoti('success', res.data.message)\r\n\t\t\t\trouter.push('/course/course-list/')\r\n\t\t\t\treturn res\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('error', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'SAVE_COURSE',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"create-course\">\r\n\t\t\t<TitlePage title=\"Tạo khóa học online\" />\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-8 col-12\">\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\ttitle=\"Sắp xếp lịch học\"\r\n\t\t\t\t\t\textra={\r\n\t\t\t\t\t\t\t<div className=\"btn-page-course\">\r\n\t\t\t\t\t\t\t\t<CreateCourseOnlineForm\r\n\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\tisUpdate={false}\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\toptionListForForm={optionListForForm}\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\thandleGetCourse={getCourse}\r\n\t\t\t\t\t\t\t\t\thandleFetchDataByBranch={fetchStaffByBranch}\r\n\t\t\t\t\t\t\t\t\thandleFetchProgramByGrade={fetchProgramByGrade}\r\n\t\t\t\t\t\t\t\t\thandleGetValueBeforeFetchCurriculum={getValueBeforeFetchCurriculum}\r\n\t\t\t\t\t\t\t\t\thandleGetValueBeforeFetchTeacher={getValueBeforeFetchTeacher}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t{isSave && (\r\n\t\t\t\t\t\t\t\t\t<SaveCreateCourseOnline\r\n\t\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\t\tsaveInfo={saveCourseInfo}\r\n\t\t\t\t\t\t\t\t\t\tscheduleShow={scheduleShow}\r\n\t\t\t\t\t\t\t\t\t\thandleSaveCourse={onSaveCourse}\r\n\t\t\t\t\t\t\t\t\t\thandleFetchDataToSave={onFetchDataToSave}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CreateCourseCalendar\r\n\t\t\t\t\t\t\teventList={calendarDateFormat(calendarList)}\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\tisLoaded={true}\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\thandleSetDataModalCalendar={setDataModalCalendar}\r\n\t\t\t\t\t\t\tdataModalCalendar={dataModalCalendar}\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\tunAvailableList={\r\n\t\t\t\t\t\t\t\t<Schedule>\r\n\t\t\t\t\t\t\t\t\t<ScheduleList>\r\n\t\t\t\t\t\t\t\t\t\t{scheduleList.available.map((s, idx) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<ScheduleOnlineItem key={idx} scheduleObj={s} handleChangeStatusSchedule={onToggleSchedule} />\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</ScheduleList>\r\n\t\t\t\t\t\t\t\t</Schedule>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ScheduleList panelActiveListInModal={dataModalCalendar.scheduleList.map((_, idx) => idx)}>\r\n\t\t\t\t\t\t\t\t{dataModalCalendar.scheduleList.map((s, idx) => (\r\n\t\t\t\t\t\t\t\t\t<ScheduleOnlineItem\r\n\t\t\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\t\t\tisUnavailable={true}\r\n\t\t\t\t\t\t\t\t\t\tscheduleObj={s}\r\n\t\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\t\thandleChangeValueSchedule={changeValueSchedule}\r\n\t\t\t\t\t\t\t\t\t\thandleChangeStatusSchedule={onToggleSchedule}\r\n\t\t\t\t\t\t\t\t\t\toptionTeacherList={optionListForADay.optionTeacherList.find((o) => o.id === s.ID)?.list || []}\r\n\t\t\t\t\t\t\t\t\t\toptionStudyTime={optionListForADay.optionStudyTimeList}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</ScheduleList>\r\n\t\t\t\t\t\t</CreateCourseCalendar>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-4 col-12 d-none d-md-block\">\r\n\t\t\t\t\t<Schedule>\r\n\t\t\t\t\t\t<ScheduleList>\r\n\t\t\t\t\t\t\t{scheduleList.available.map((s, idx) => (\r\n\t\t\t\t\t\t\t\t<ScheduleOnlineItem key={idx} scheduleObj={s} handleChangeStatusSchedule={onToggleSchedule} />\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ScheduleList>\r\n\t\t\t\t\t</Schedule>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CreateCourseOnline\r\n"]},"metadata":{},"sourceType":"module"}