{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\Option\\\\IdiomsForm.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Form, Modal, Spin, Tooltip } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { idiomsApi } from '~/apiBase/options/idioms';\nimport EditorField from '~/components/FormControl/EditorField';\nimport { useWrap } from '~/context/wrap';\nconst IdiomsForm = /*#__PURE__*/React.memo(props => {\n  const {\n    idiomsId,\n    reloadData,\n    idiomsDetail,\n    currentPage\n  } = props;\n  const {\n    setValue\n  } = useForm();\n  const {\n    0: isModalVisible,\n    1: setIsModalVisible\n  } = useState(false);\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: idiomsInput,\n    1: setIdiomsInput\n  } = useState();\n  const {\n    0: isReset,\n    1: setIsReset\n  } = useState(false);\n  const defaultValuesInit = {\n    Idioms: ''\n  };\n  const schema = yup.object().shape({\n    Idioms: yup.string().required('Bạn không được để trống')\n  });\n  const form = useForm({\n    defaultValues: defaultValuesInit,\n    resolver: yupResolver(schema)\n  });\n  console.log(idiomsInput);\n\n  const onSubmit = async data => {\n    console.log(data);\n    setLoading(true);\n\n    if (idiomsId) {\n      try {\n        let res = await idiomsApi.update(_objectSpread(_objectSpread({}, data), {}, {\n          ID: idiomsId,\n          Idioms: idiomsInput\n        }));\n        afterSubmit(res === null || res === void 0 ? void 0 : res.data.message);\n        reloadData(currentPage);\n      } catch (error) {\n        showNoti('danger', error.message);\n        setLoading(false);\n      }\n    } else {\n      try {\n        let res = await idiomsApi.add(_objectSpread(_objectSpread({}, data), {}, {\n          Enable: true,\n          Idioms: idiomsInput\n        }));\n\n        if (res.status === 200) {\n          form.reset({\n            Idioms: ''\n          });\n        }\n\n        afterSubmit(res === null || res === void 0 ? void 0 : res.data.message);\n        reloadData(1);\n        setIdiomsInput(null);\n        setIsReset(true);\n      } catch (error) {\n        showNoti('danger', error.message);\n        setLoading(false);\n      }\n    }\n  };\n\n  const afterSubmit = mes => {\n    showNoti('success', mes);\n    setLoading(false);\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    if (idiomsDetail) {\n      form.setValue('Idioms', idiomsDetail.Idioms);\n      console.log(idiomsDetail.Idioms);\n    }\n  }, [isModalVisible]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [idiomsId ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-icon edit\",\n      onClick: () => {\n        setIsModalVisible(true);\n      },\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"C\\u1EADp nh\\u1EADt\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-edit\",\n          style: {\n            color: '#34c4a4',\n            fontSize: 16,\n            marginBottom: -1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-warning add-new\",\n      onClick: () => {\n        setIsModalVisible(true);\n      },\n      children: \"Th\\xEAm m\\u1EDBi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      width: 800,\n      title: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: idiomsId ? 'Cập nhật' : 'Thêm mới'\n      }, void 0, false),\n      visible: isModalVisible,\n      onCancel: () => setIsModalVisible(false),\n      footer: null,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          layout: \"vertical\",\n          onFinish: onSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12\",\n              children: /*#__PURE__*/_jsxDEV(EditorField, {\n                form: form,\n                label: \"C\\xE2u th\\xE0nh ng\\u1EEF\",\n                name: \"Idioms\" // content={idiomsDetail ? idiomsDetail.Idioms : idiomsInput}\n                ,\n                handleChange: value => setIdiomsInput(value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12 text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-primary\",\n                children: [\"L\\u01B0u\", loading == true && /*#__PURE__*/_jsxDEV(Spin, {\n                  className: \"loading-base\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 30\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n});\nexport default IdiomsForm;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/Option/IdiomsForm.tsx"],"names":["yupResolver","Form","Modal","Spin","Tooltip","React","useEffect","useState","useForm","yup","idiomsApi","EditorField","useWrap","IdiomsForm","memo","props","idiomsId","reloadData","idiomsDetail","currentPage","setValue","isModalVisible","setIsModalVisible","showNoti","loading","setLoading","idiomsInput","setIdiomsInput","isReset","setIsReset","defaultValuesInit","Idioms","schema","object","shape","string","required","form","defaultValues","resolver","console","log","onSubmit","data","res","update","ID","afterSubmit","message","error","add","Enable","status","reset","mes","color","fontSize","marginBottom","value"],"mappings":"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","sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup'\r\nimport { Form, Modal, Spin, Tooltip } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport * as yup from 'yup'\r\nimport { idiomsApi } from '~/apiBase/options/idioms'\r\nimport EditorField from '~/components/FormControl/EditorField'\r\nimport { useWrap } from '~/context/wrap'\r\n\r\nconst IdiomsForm = React.memo((props: any) => {\r\n\tconst { idiomsId, reloadData, idiomsDetail, currentPage } = props\r\n\tconst { setValue } = useForm()\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n\tconst { showNoti } = useWrap()\r\n\tconst [loading, setLoading] = useState(false)\r\n\tconst [idiomsInput, setIdiomsInput] = useState()\r\n\tconst [isReset, setIsReset] = useState(false)\r\n\r\n\tconst defaultValuesInit = {\r\n\t\tIdioms: ''\r\n\t}\r\n\tconst schema = yup.object().shape({\r\n\t\tIdioms: yup.string().required('Bạn không được để trống')\r\n\t})\r\n\tconst form = useForm({\r\n\t\tdefaultValues: defaultValuesInit,\r\n\t\tresolver: yupResolver(schema)\r\n\t})\r\n\tconsole.log(idiomsInput)\r\n\r\n\tconst onSubmit = async (data: any) => {\r\n\t\tconsole.log(data)\r\n\t\tsetLoading(true)\r\n\t\tif (idiomsId) {\r\n\t\t\ttry {\r\n\t\t\t\tlet res = await idiomsApi.update({\r\n\t\t\t\t\t...data,\r\n\t\t\t\t\tID: idiomsId,\r\n\t\t\t\t\tIdioms: idiomsInput\r\n\t\t\t\t})\r\n\t\t\t\tafterSubmit(res?.data.message)\r\n\t\t\t\treloadData(currentPage)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tlet res = await idiomsApi.add({\r\n\t\t\t\t\t...data,\r\n\t\t\t\t\tEnable: true,\r\n\t\t\t\t\tIdioms: idiomsInput\r\n\t\t\t\t})\r\n\t\t\t\tif (res.status === 200) {\r\n\t\t\t\t\tform.reset({\r\n\t\t\t\t\t\tIdioms: ''\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tafterSubmit(res?.data.message)\r\n\t\t\t\treloadData(1)\r\n\t\t\t\tsetIdiomsInput(null)\r\n\t\t\t\tsetIsReset(true)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst afterSubmit = (mes) => {\r\n\t\tshowNoti('success', mes)\r\n\t\tsetLoading(false)\r\n\t\tsetIsModalVisible(false)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (idiomsDetail) {\r\n\t\t\tform.setValue('Idioms', idiomsDetail.Idioms)\r\n\t\t\tconsole.log(idiomsDetail.Idioms)\r\n\t\t}\r\n\t}, [isModalVisible])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{idiomsId ? (\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"btn btn-icon edit\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetIsModalVisible(true)\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Tooltip title=\"Cập nhật\">\r\n\t\t\t\t\t\t<i className=\"fas fa-edit\" style={{ color: '#34c4a4', fontSize: 16, marginBottom: -1 }}></i>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</button>\r\n\t\t\t) : (\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"btn btn-warning add-new\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetIsModalVisible(true)\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tThêm mới\r\n\t\t\t\t</button>\r\n\t\t\t)}\r\n\r\n\t\t\t<Modal\r\n\t\t\t\twidth={800}\r\n\t\t\t\ttitle={<>{idiomsId ? 'Cập nhật' : 'Thêm mới'}</>}\r\n\t\t\t\tvisible={isModalVisible}\r\n\t\t\t\tonCancel={() => setIsModalVisible(false)}\r\n\t\t\t\tfooter={null}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"container-fluid\">\r\n\t\t\t\t\t<Form layout=\"vertical\" onFinish={onSubmit}>\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<EditorField\r\n\t\t\t\t\t\t\t\t\tform={form}\r\n\t\t\t\t\t\t\t\t\tlabel=\"Câu thành ngữ\"\r\n\t\t\t\t\t\t\t\t\tname=\"Idioms\"\r\n\t\t\t\t\t\t\t\t\t// content={idiomsDetail ? idiomsDetail.Idioms : idiomsInput}\r\n\t\t\t\t\t\t\t\t\thandleChange={(value) => setIdiomsInput(value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12 text-center\">\r\n\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\">\r\n\t\t\t\t\t\t\t\t\tLưu\r\n\t\t\t\t\t\t\t\t\t{loading == true && <Spin className=\"loading-base\" />}\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t</>\r\n\t)\r\n})\r\n\r\nexport default IdiomsForm\r\n"]},"metadata":{},"sourceType":"module"}