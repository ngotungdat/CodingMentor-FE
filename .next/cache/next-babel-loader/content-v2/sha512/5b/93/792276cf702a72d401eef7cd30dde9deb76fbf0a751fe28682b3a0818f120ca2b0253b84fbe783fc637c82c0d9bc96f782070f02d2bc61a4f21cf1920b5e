{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\pages\\\\question-bank\\\\question-list\\\\index.tsx\";\n// import React, { useState, useRef, useEffect } from \"react\";\n// import { Popover, Card, Tooltip, Select, Spin } from \"antd\";\n// import TitlePage from \"~/components/Elements/TitlePage\";\n// import { Info, Bookmark, Edit, Trash2 } from \"react-feather\";\n// import CreateQuestionForm from \"~/components/Global/QuestionBank/CreateQuestionForm\";\n// import { dataTypeGroup, dataTypeSingle } from \"~/lib/question-bank/dataBoxType\";\n// import { data } from \"~/lib/option/dataOption2\";\n// import LayoutBase from \"~/components/LayoutBase\";\n// import QuestionSingle from \"~/components/Global/QuestionBank/QuestionShow/QuestionSingle\";\n// import QuestionMultiple from \"~/components/Global/QuestionBank/QuestionShow/QuestionMultiple\";\n// import QuestionWrite from \"~/components/Global/QuestionBank/QuestionShow/QuestionWritting\";\n// import {\n//   programApi,\n//   subjectApi,\n//   exerciseApi,\n//   exerciseGroupApi,\n// } from \"~/apiBase\";\n// import { useWrap } from \"~/context/wrap\";\n// import { questionObj } from \"~/lib/TypeData\";\n// import GroupWrap from \"~/components/Global/QuestionBank/GroupWrap\";\n// import QuestionWritting from \"~/components/Global/QuestionBank/QuestionShow/QuestionWritting\";\n// import QuestionTyping from \"~/components/Global/QuestionBank/QuestionShow/QuestionTyping\";\n// import QuestionDrag from \"~/components/Global/QuestionBank/QuestionShow/QuestionDrag\";\n// import QuestionMap from \"~/components/Global/QuestionBank/QuestionShow/QuestionMap\";\n// const { Option, OptGroup } = Select;\n// let isOpenTypeQuestion = false;\n// const listTodoApi = {\n//   pageSize: 10,\n//   pageIndex: 1,\n//   SubjectID: null,\n//   Type: null,\n//   Level: null,\n//   ExerciseGroupID: null,\n//   ExamTopicType: null,\n// };\n// const listAlphabet = [\n//   \"A\",\n//   \"B\",\n//   \"C\",\n//   \"D\",\n//   \"F\",\n//   \"G\",\n//   \"H\",\n//   \"I\",\n//   \"J\",\n//   \"K\",\n//   \"L\",\n//   \"M\",\n//   \"N\",\n//   \"O\",\n//   \"P\",\n//   \"Q\",\n//   \"R\",\n//   \"S\",\n//   \"T\",\n//   \"U\",\n//   \"V\",\n// ];\n// const QuestionList = () => {\n//   const { showNoti } = useWrap();\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [dataProgram, setDataProgram] = useState<IProgram[]>(null);\n//   const [dataSubject, setDataSubject] = useState<ISubject[]>(null);\n//   const [loadingSelect, setLoadingSelect] = useState(false);\n//   const [questionData, setQuestionData] = useState(questionObj);\n//   const [showListQuestion, setShowListQuestion] = useState(false);\n//   const [showTypeQuetion, setShowTypeQuestion] = useState({\n//     type: null,\n//     status: false,\n//   });\n//   const [todoApi, setTodoApi] = useState(listTodoApi);\n//   const [dataSource, setDataSource] = useState([]);\n//   const boxEl = useRef(null);\n//   const [totalPageIndex, setTotalPageIndex] = useState(0);\n//   const [loadingQuestion, setLoadingQuestion] = useState(false);\n//   const [isGroup, setIsGroup] = useState({\n//     id: null,\n//     status: null,\n//   });\n//   const [valueSubject, setValueSubject] = useState(\"Chọn môn học\");\n//   const [dataGroup, setDataGroup] = useState([]);\n//   const [dataExercise, setDataExercise] = useState();\n//   // Phân loại dạng câu hỏi để trả ra danh sách\n//   const returnQuestionType = () => {\n//     // console.log(\"Type is: \", todoApi.Type);\n//     switch (todoApi.Type) {\n//       /** Quesion Single */\n//       case 1:\n//         return (\n//           <GroupWrap\n//             isGroup={isGroup}\n//             listQuestion={dataGroup}\n//             onFetchData={onFetchData}\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\n//             onEditData={(data) => onEditData(data)}\n//             onAddData={(data) => onAddData(data)}\n//           >\n//             <QuestionSingle\n//               listAlphabet={listAlphabet}\n//               isGroup={isGroup}\n//               loadingQuestion={loadingQuestion}\n//               listQuestion={dataSource}\n//               onFetchData={onFetchData}\n//               onEditData={(data) => onEditData(data)}\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             />\n//           </GroupWrap>\n//         );\n//         break;\n//       /** Quesion Multiple */\n//       case 4:\n//         return (\n//           <GroupWrap\n//             isGroup={isGroup}\n//             listQuestion={dataGroup}\n//             onFetchData={onFetchData}\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\n//             onEditData={(data) => onEditData(data)}\n//             onAddData={(data) => onAddData(data)}\n//           >\n//             <QuestionMultiple\n//               listAlphabet={listAlphabet}\n//               isGroup={isGroup}\n//               loadingQuestion={loadingQuestion}\n//               listQuestion={dataSource}\n//               onFetchData={onFetchData}\n//               onEditData={(data) => onEditData(data)}\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             />\n//           </GroupWrap>\n//         );\n//         break;\n//       /** Quesion Writting */\n//       case 6:\n//         return (\n//           <QuestionWritting\n//             listAlphabet={listAlphabet}\n//             isGroup={isGroup}\n//             loadingQuestion={loadingQuestion}\n//             listQuestion={dataSource}\n//             onFetchData={onFetchData}\n//             onEditData={(data) => onEditData(data)}\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//           />\n//         );\n//         break;\n//       /** Quesion Typing */\n//       case 3:\n//         return (\n//           <GroupWrap\n//             isGroup={isGroup}\n//             listQuestion={dataGroup}\n//             onFetchData={onFetchData}\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\n//             onEditData={(data) => onEditData(data)}\n//             onAddData={(data) => onAddData(data)}\n//           >\n//             <QuestionTyping\n//               listAlphabet={listAlphabet}\n//               isGroup={isGroup}\n//               loadingQuestion={loadingQuestion}\n//               listQuestion={dataExercise}\n//               onFetchData={onFetchData}\n//               onEditData={(data) => onEditData(data)}\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             />\n//           </GroupWrap>\n//         );\n//         break;\n//       /** Quesion Drag */\n//       case 2:\n//         return (\n//           <GroupWrap\n//             isGroup={isGroup}\n//             listQuestion={dataGroup}\n//             onFetchData={onFetchData}\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\n//             onEditData={(data) => onEditData(data)}\n//             onAddData={(data) => onAddData(data)}\n//           >\n//             <QuestionDrag\n//               listAlphabet={listAlphabet}\n//               isGroup={isGroup}\n//               loadingQuestion={loadingQuestion}\n//               listQuestion={dataExercise}\n//               onFetchData={onFetchData}\n//               onEditData={(data) => onEditData(data)}\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             />\n//           </GroupWrap>\n//         );\n//         break;\n//       /** Quesion Map */\n//       case 5:\n//         return (\n//           <GroupWrap\n//             isGroup={isGroup}\n//             listQuestion={dataGroup}\n//             onFetchData={onFetchData}\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\n//             onEditData={(data) => onEditData(data)}\n//             onAddData={(data) => onAddData(data)}\n//           >\n//             <QuestionMap\n//               listAlphabet={listAlphabet}\n//               isGroup={isGroup}\n//               loadingQuestion={loadingQuestion}\n//               listQuestion={dataSource}\n//               onFetchData={onFetchData}\n//               onEditData={(data) => onEditData(data)}\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\n//             />\n//           </GroupWrap>\n//         );\n//         break;\n//       default:\n//         return (\n//           <p className=\"text-center\">\n//             <b>Danh sách còn trống</b>\n//           </p>\n//         );\n//         break;\n//     }\n//   };\n//   // GET DATA SOURCE - DATA EXERCISE\n//   const getDataSource = async () => {\n//     let res = null;\n//     try {\n//       if (!isGroup.status) {\n//         res = await exerciseApi.getAll({ ...todoApi, ExerciseGroupID: 0 });\n//       } else {\n//         res = await exerciseGroupApi.getAll(todoApi);\n//       }\n//       if (res.status == 200) {\n//         // Xét coi này câu hỏi nhóm hay đơn\n//         if (!isGroup.status) {\n//           let cloneData = [...dataSource];\n//           res.data.data.forEach((item, index) => {\n//             cloneData.push(item);\n//           });\n//           setDataSource([...cloneData]);\n//         } else {\n//           let cloneData = [...dataGroup];\n//           res.data.data.forEach((item, index) => {\n//             cloneData.push(item);\n//           });\n//           setDataGroup([...cloneData]);\n//         }\n//         // todoApi.pageIndex == 1 && showNoti(\"success\", \"Thành công\");\n//         // !showListQuestion && setShowListQuestion(true);\n//         // Caculator pageindex\n//         let totalPage = Math.ceil(res.data.totalRow / 10);\n//         setTotalPageIndex(totalPage);\n//       }\n//       if (res.status == 204) {\n//         // showNoti(\"danger\", \"Không có dữ liệu\");\n//         if (!isGroup.status) {\n//           if (todoApi.Type == 3) {\n//             setShowListQuestion(false);\n//           }\n//         } else {\n//           setShowListQuestion(true);\n//         }\n//       }\n//     } catch (error) {\n//       showNoti(\"danger\", error.message);\n//     } finally {\n//       setIsLoading(false);\n//       loadingQuestion && setLoadingQuestion(false);\n//     }\n//   };\n//   // GET DATA PROGRAM\n//   const getDataProgram = async () => {\n//     try {\n//       let res = await programApi.getAll({ pageIndex: 1, pageSize: 999999 });\n//       res.status == 200 && setDataProgram(res.data.data);\n//       res.status == 204 && showNoti(\"danger\", \"Chương trình không có dữ liệu\");\n//     } catch (error) {\n//       showNoti(\"danger\", error.message);\n//     } finally {\n//     }\n//   };\n//   // GET DATA SUBJECT\n//   const getDataSubject = async (id) => {\n//     setLoadingSelect(true);\n//     try {\n//       let res = await subjectApi.getAll({\n//         pageIndex: 1,\n//         pageSize: 999999,\n//         ProgramID: id,\n//       });\n//       res.status == 200 && setDataSubject(res.data.data);\n//       res.status == 204 && showNoti(\"danger\", \"Môn học không có dữ liệu\");\n//     } catch (error) {\n//       showNoti(\"danger\", error.message);\n//     } finally {\n//       setLoadingSelect(false);\n//     }\n//   };\n//   // CHỌN DẠNG CÂU HỎI (CHOICE, MULTIPLE,...)\n//   const changeBoxType = (e: any, Type: number, TypeName: string) => {\n//     e.preventDefault();\n//     questionData.Type = Type;\n//     questionData.TypeName = TypeName;\n//     // Kiểm dạng câu hỏi gì để thay đổi list answer\n//     switch (Type) {\n//       case 4:\n//         questionData.ExerciseAnswer = [];\n//         // setQuestionData({ ...questionData });\n//         break;\n//       case 1:\n//         questionData.ExerciseAnswer = questionObj.ExerciseAnswer;\n//         break;\n//       // case 3:\n//       //   questionData.ExerciseList = [];\n//       default:\n//         break;\n//     }\n//     // Add value vào data chung\n//     setQuestionData({ ...questionData });\n//     // Active\n//     setShowTypeQuestion({\n//       ...showTypeQuetion,\n//       type: Type,\n//     });\n//     // Show danh sách câu hỏi bên cạnh\n//     setIsLoading(true);\n//     !showListQuestion && setShowListQuestion(true);\n//     setDataSource([]);\n//     setDataGroup([]);\n//     setTodoApi({\n//       ...todoApi,\n//       Type: Type,\n//       SubjectID: questionData.SubjectID,\n//       Level: questionData.Level,\n//       pageIndex: 1,\n//     });\n//   };\n//   // console.log(\"Question Data bên ngoài: \", questionData);\n//   // HANDLE CHANGE SELECT - THAO TÁC VỚI CÁC SELECT\n//   const handleChange_select = (selectName, option) => {\n//     setDataSource([]);\n//     setDataGroup([]);\n//     switch (selectName) {\n//       // -- Chọn chương trình\n//       case \"program\":\n//         getDataSubject(option.value);\n//         setDataSubject(null);\n//         setValueSubject(\"Chọn môn học\");\n//         showListQuestion &&\n//           (setIsLoading(true),\n//           setTodoApi({\n//             ...todoApi,\n//             pageIndex: 1,\n//             SubjectID: null,\n//           }));\n//         setShowTypeQuestion({\n//           type: null,\n//           status: false,\n//         });\n//         setShowListQuestion(false);\n//         break;\n//       // -- Chọn loại câu hỏi đơn hay nhóm\n//       case \"type-question-group\":\n//         // questionData.ExerciseGroupID = option.value;\n//         isOpenTypeQuestion = true;\n//         if (option.value == 0) {\n//           setIsGroup({\n//             id: null,\n//             status: false,\n//           });\n//         } else {\n//           setIsGroup({\n//             ...isGroup,\n//             status: true,\n//           });\n//         }\n//         showListQuestion &&\n//           (setIsLoading(true),\n//           setTodoApi({\n//             ...todoApi,\n//             pageIndex: 1,\n//           }));\n//         break;\n//       // -- Chọn môn học\n//       case \"subject\":\n//         questionData.SubjectID = option.value;\n//         questionData.SubjectName = option.children;\n//         setValueSubject(option.value);\n//         showListQuestion &&\n//           (setIsLoading(true),\n//           setTodoApi({\n//             ...todoApi,\n//             SubjectID: option.value,\n//             pageIndex: 1,\n//           }));\n//         break;\n//       // -- Chọn level (Dễ, trung bình, khó)\n//       case \"level\":\n//         questionData.Level = option.value;\n//         questionData.LevelName = option.children;\n//         showListQuestion &&\n//           (setIsLoading(true),\n//           setTodoApi({\n//             ...todoApi,\n//             Level: option.value,\n//           }));\n//         break;\n//       default:\n//         break;\n//     }\n//     setQuestionData({ ...questionData });\n//     // kiểm tra mới vào đã chọn đầy đủ 4 trường hay chưa rồi mới show danh sách dạng câu hỏi\n//     if (!showTypeQuetion.status) {\n//       if (\n//         questionData.ExerciseGroupID !== null &&\n//         questionData.SubjectID !== null &&\n//         questionData.Level !== null &&\n//         isOpenTypeQuestion == true\n//       ) {\n//         setShowTypeQuestion({\n//           ...showTypeQuetion,\n//           status: true,\n//         });\n//       }\n//     }\n//   };\n//   // ON ADD NEW DATA\n//   const addDataGroup = (dataAdd) => {\n//     dataGroup.splice(0, 0, dataAdd);\n//     setDataGroup([...dataGroup]);\n//   };\n//   const addDataSingle = (dataAdd) => {\n//     dataSource.splice(0, 0, dataAdd);\n//     setDataSource([...dataSource]);\n//   };\n//   const onAddData = (dataAdd) => {\n//     console.log(\"DATA add outside: \", dataAdd);\n//     if (!isGroup.status) {\n//       addDataSingle(dataAdd);\n//     } else {\n//       if (dataAdd.ExerciseGroupID) {\n//         addDataSingle(dataAdd);\n//       } else {\n//         addDataGroup(dataAdd);\n//       }\n//     }\n//     questionData.Content = \"\";\n//     setQuestionData({ ...questionData });\n//   };\n//   // console.log(\"DATA SOURCE: \", dataSource);\n//   // console.log(\"DATA GROUP: \", dataGroup);\n//   // ON EDIT DATA\n//   // console.log(\"Data Exercise: \", dataExercise);\n//   const editDataGroup = (dataEdit) => {\n//     let index = dataGroup.findIndex((item) => item.ID == dataEdit.ID);\n//     dataGroup.splice(index, 1, dataEdit);\n//     // let exerciseList = [...dataEdit.ExerciseList];\n//     setDataExercise(dataEdit);\n//     setDataGroup([...dataGroup]);\n//   };\n//   const editDataSingle = (dataEdit) => {\n//     if (dataEdit.Type == 4) {\n//       let newAnswerList = dataEdit.ExerciseAnswer.filter(\n//         (item) => item.Enable !== false\n//       );\n//       dataEdit.ExerciseAnswer = newAnswerList;\n//     }\n//     let index = dataSource.findIndex((item) => item.ID == dataEdit.ID);\n//     dataSource.splice(index, 1, dataEdit);\n//     setDataSource([...dataSource]);\n//   };\n//   const onEditData = (dataEdit) => {\n//     console.log(\"DATA edit outside \", dataEdit);\n//     if (!isGroup.status) {\n//       // Nếu là dạng câu hỏi nhiều đáp án thì phải xóa nó đi\n//       editDataSingle(dataEdit);\n//     } else {\n//       if (dataEdit.ExerciseGroupID) {\n//         editDataSingle(dataEdit);\n//       } else {\n//         editDataGroup(dataEdit);\n//       }\n//     }\n//     questionData.Content = \"\";\n//     setQuestionData({ ...questionData });\n//   };\n//   // ON REMOVE DATA\n//   const removeDataSingle = (dataRemove) => {\n//     let quesIndex = dataSource.findIndex((item) => item.ID == dataRemove.ID);\n//     dataSource.splice(quesIndex, 1);\n//     setDataSource([...dataSource]);\n//   };\n//   const removeDataGroup = (dataRemove) => {\n//     console.log(\"Data remove outside: \", dataRemove);\n//     if (dataRemove.isDeleteExercise) {\n//       setDataExercise(dataRemove);\n//     } else {\n//       let quesIndex = dataGroup.findIndex((item) => item.ID == dataRemove);\n//       dataGroup.splice(quesIndex, 1);\n//       setDataGroup([...dataGroup]);\n//     }\n//   };\n//   const onRemoveData = (dataRemove) => {\n//     if (!isGroup.status) {\n//       removeDataSingle(dataRemove);\n//     } else {\n//       if (dataRemove.ExerciseGroupID) {\n//         removeDataSingle(dataRemove);\n//       } else {\n//         removeDataGroup(dataRemove);\n//       }\n//     }\n//   };\n//   // ON FETCH DATA\n//   const onFetchData = () => {\n//     scrollToTop(), setIsLoading(true), setDataSource([]), setDataGroup([]);\n//     setTodoApi({ ...todoApi, pageIndex: 1, pageSize: 10 });\n//   };\n//   // SCROLL TO TOP\n//   const scrollToTop = () => {\n//     boxEl.current.scrollTo(0, 0);\n//   };\n//   // ON SCROLL\n//   const onScroll = () => {\n//     const scrollHeight = boxEl.current.scrollHeight;\n//     const offsetHeight = boxEl.current.offsetHeight;\n//     const scrollTop = boxEl.current.scrollTop;\n//     // console.log(\"Height: \", scrollHeight - offsetHeight);\n//     // console.log(\"Scroll: \", scrollTop);\n//     if (scrollTop > scrollHeight - offsetHeight - 40) {\n//       if (todoApi.pageIndex < totalPageIndex) {\n//         setLoadingQuestion(true);\n//         if (scrollTop > 0 && loadingQuestion == false) {\n//           setTodoApi({\n//             ...todoApi,\n//             pageIndex: todoApi.pageIndex + 1,\n//           });\n//         }\n//       }\n//     }\n//   };\n//   // console.log(\"DATA exercise: \", dataSource);\n//   useEffect(() => {\n//     getDataProgram(); // Lấy data chương trình\n//   }, []);\n//   useEffect(() => {\n//     if (questionData.Type !== 0) {\n//       getDataSource();\n//     }\n//     questionData.Content = \"\";\n//     switch (questionData.Type) {\n//       case 4:\n//         questionData.ExerciseAnswer = [];\n//         break;\n//       default:\n//         break;\n//     }\n//     setQuestionData({ ...questionData });\n//   }, [todoApi]);\n//   return (\n//     <div className=\"question-create\">\n//       <TitlePage title=\"Tạo câu hỏi\" />\n//       <div className=\"row\">\n//         <div className=\"col-md-12\"></div>\n//       </div>\n//       <div className=\"row\">\n//         <div className=\"col-md-8 col-12\">\n//           <Card\n//             className=\"card-detail-question\"\n//             title={\n//               <div className=\"title-question-bank\">\n//                 <h3 className=\"title-big\">\n//                   <Bookmark />{\" \"}\n//                   {!isGroup.status\n//                     ? \"Danh sách câu hỏi\"\n//                     : \"Danh sách nhóm câu hỏi\"}\n//                 </h3>\n//                 <p\n//                   style={{\n//                     paddingLeft: \"30px\",\n//                     fontSize: \"13px\",\n//                     marginBottom: \"0\",\n//                     fontWeight: 500,\n//                     color: \"#777777\",\n//                   }}\n//                 >\n//                   {questionData.TypeName}\n//                 </p>\n//                 {/* <p className=\"text-lesson\">\n//                   <span className=\"font-weight-black\">Môn học:</span>\n//                   <span>{questionData?.SubjectName}</span>\n//                 </p> */}\n//               </div>\n//             }\n//             extra={\n//               <CreateQuestionForm\n//                 questionData={questionData}\n//                 onFetchData={onFetchData}\n//                 isGroup={isGroup}\n//                 onAddData={(data) => onAddData(data)}\n//               />\n//             }\n//           >\n//             {!showListQuestion ? (\n//               <>\n//                 <p className=\"font-weight-primary text-center\">\n//                   Vui lòng chọn môn học và dạng câu hỏi\n//                 </p>\n//                 <div className=\"img-load\">\n//                   <img src=\"/images/study-min.jpg\" alt=\"\" />\n//                 </div>\n//               </>\n//             ) : isLoading ? (\n//               <div className=\"text-center p-2\">\n//                 <Spin />\n//               </div>\n//             ) : (\n//               <div\n//                 className={`question-list active`}\n//                 ref={boxEl}\n//                 onScroll={onScroll}\n//               >\n//                 {returnQuestionType()}\n//               </div>\n//             )}\n//           </Card>\n//         </div>\n//         <div className=\"col-md-4 col-12\">\n//           <Card className=\"card-box-type\">\n//             <div className={`row ${showTypeQuetion ? \"mb-2\" : \"\"}`}>\n//               {/** CHỌN CHƯƠNG TRÌNH */}\n//               <div className=\"col-md-6 col-12 \">\n//                 <div className=\"item-select\">\n//                   <Select\n//                     className=\"style-input\"\n//                     defaultValue=\"Chọn chương trình\"\n//                     style={{ width: \"100%\" }}\n//                     onChange={(value, option) =>\n//                       handleChange_select(\"program\", option)\n//                     }\n//                   >\n//                     {dataProgram?.map((item, index) => (\n//                       <Option key={index} value={item.ID}>\n//                         {item.ProgramName}\n//                       </Option>\n//                     ))}\n//                   </Select>\n//                 </div>\n//               </div>\n//               {/** CHỌN MÔN HỌC */}\n//               <div className=\"col-md-6 col-12 \">\n//                 <div className=\"item-select\">\n//                   {/* <p className=\"font-weight-black mb-2\">Chọn môn học</p> */}\n//                   <Select\n//                     loading={loadingSelect}\n//                     className=\"style-input\"\n//                     defaultValue=\"Chọn môn học\"\n//                     value={valueSubject}\n//                     style={{ width: \"100%\" }}\n//                     onChange={(value, option) =>\n//                       handleChange_select(\"subject\", option)\n//                     }\n//                   >\n//                     {dataSubject?.map((item, index) => (\n//                       <Option key={index} value={item.ID}>\n//                         {item.SubjectName}\n//                       </Option>\n//                     ))}\n//                   </Select>\n//                 </div>\n//               </div>\n//               {/** LOẠI CÂU HỎI (SINGLE HOẶC GROUP)  */}\n//               <div className=\"col-md-6 col-12 mt-3\">\n//                 <div className=\"item-select\">\n//                   {/* <p className=\"font-weight-black mb-2\">Loại câu hỏi</p> */}\n//                   <Select\n//                     className=\"style-input\"\n//                     defaultValue=\"Chọn loại câu hỏi\"\n//                     style={{ width: \"100%\" }}\n//                     onChange={(value, option) =>\n//                       handleChange_select(\"type-question-group\", option)\n//                     }\n//                   >\n//                     <Option value={0}>Câu hỏi đơn</Option>\n//                     <Option value={1}>Câu hỏi nhóm</Option>\n//                   </Select>\n//                 </div>\n//               </div>\n//               {/** MỨC ĐỘ  */}\n//               <div className=\"col-md-6 col-12 mt-3\">\n//                 <div className=\"item-select\">\n//                   {/* <p className=\"font-weight-black mb-2\">Loại câu hỏi</p> */}\n//                   <Select\n//                     className=\"style-input\"\n//                     defaultValue=\"Chọn mức độ\"\n//                     style={{ width: \"100%\" }}\n//                     onChange={(value, option) =>\n//                       handleChange_select(\"level\", option)\n//                     }\n//                   >\n//                     <Option value={1}>Dễ</Option>\n//                     <Option value={2}>Trung bình</Option>\n//                     <Option value={3}>Khó</Option>\n//                   </Select>\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"row\">\n//               <div\n//                 className={`wrap-type-question w-100 ${\n//                   showTypeQuetion.status ? \"active\" : \"nun-active\"\n//                 }`}\n//               >\n//                 {isGroup.status\n//                   ? dataTypeGroup?.map((item, index) => (\n//                       <div className=\"col-md-12\" key={index}>\n//                         <div className=\"box-type-question\">\n//                           <a\n//                             href=\"#\"\n//                             onClick={(e) =>\n//                               changeBoxType(e, item.Type, item.TypeName)\n//                             }\n//                             className={\n//                               item.Type === showTypeQuetion.type ? \"active\" : \"\"\n//                             }\n//                           >\n//                             <div className=\"type-img\">\n//                               <img\n//                                 src={item.Images}\n//                                 alt=\"\"\n//                                 className=\"img-inner\"\n//                               />\n//                             </div>\n//                             <div className=\"type-detail\">\n//                               {/* <h5 className=\"number\">{item.Number}</h5> */}\n//                               <div className=\"p text\">{item.TypeName}</div>\n//                             </div>\n//                           </a>\n//                         </div>\n//                       </div>\n//                     ))\n//                   : dataTypeSingle?.map((item, index) => (\n//                       <div className=\"col-md-12\" key={index}>\n//                         <div className=\"box-type-question\">\n//                           <a\n//                             href=\"#\"\n//                             onClick={(e) =>\n//                               changeBoxType(e, item.Type, item.TypeName)\n//                             }\n//                             className={\n//                               item.Type === showTypeQuetion.type ? \"active\" : \"\"\n//                             }\n//                           >\n//                             <div className=\"type-img\">\n//                               <img\n//                                 src={item.Images}\n//                                 alt=\"\"\n//                                 className=\"img-inner\"\n//                               />\n//                             </div>\n//                             <div className=\"type-detail\">\n//                               {/* <h5 className=\"number\">{item.Number}</h5> */}\n//                               <div className=\"p text\">{item.TypeName}</div>\n//                             </div>\n//                           </a>\n//                         </div>\n//                       </div>\n//                     ))}\n//               </div>\n//             </div>\n//           </Card>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// QuestionList.layout = LayoutBase;\n// export default QuestionList;\nimport React from 'react';\nimport QuestionCreate from '~/components/Global/QuestionBank/QuestionCreate';\nimport LayoutBase from '~/components/LayoutBase';\n\nconst QuestionList = () => {\n  return /*#__PURE__*/_jsxDEV(QuestionCreate, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 855,\n    columnNumber: 9\n  }, this);\n};\n\nQuestionList.layout = LayoutBase;\nexport default QuestionList;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/pages/question-bank/question-list/index.tsx"],"names":["React","QuestionCreate","LayoutBase","QuestionList","layout"],"mappingskB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iDAA3B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAC1B,sBAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CAFD;;AAIAA,YAAY,CAACC,MAAb,GAAsBF,UAAtB;AACA,eAAeC,YAAf","sourcesContent":["// import React, { useState, useRef, useEffect } from \"react\";\r\n\r\n// import { Popover, Card, Tooltip, Select, Spin } from \"antd\";\r\n// import TitlePage from \"~/components/Elements/TitlePage\";\r\n// import { Info, Bookmark, Edit, Trash2 } from \"react-feather\";\r\n// import CreateQuestionForm from \"~/components/Global/QuestionBank/CreateQuestionForm\";\r\n// import { dataTypeGroup, dataTypeSingle } from \"~/lib/question-bank/dataBoxType\";\r\n// import { data } from \"~/lib/option/dataOption2\";\r\n// import LayoutBase from \"~/components/LayoutBase\";\r\n// import QuestionSingle from \"~/components/Global/QuestionBank/QuestionShow/QuestionSingle\";\r\n// import QuestionMultiple from \"~/components/Global/QuestionBank/QuestionShow/QuestionMultiple\";\r\n// import QuestionWrite from \"~/components/Global/QuestionBank/QuestionShow/QuestionWritting\";\r\n// import {\r\n//   programApi,\r\n//   subjectApi,\r\n//   exerciseApi,\r\n//   exerciseGroupApi,\r\n// } from \"~/apiBase\";\r\n// import { useWrap } from \"~/context/wrap\";\r\n// import { questionObj } from \"~/lib/TypeData\";\r\n// import GroupWrap from \"~/components/Global/QuestionBank/GroupWrap\";\r\n// import QuestionWritting from \"~/components/Global/QuestionBank/QuestionShow/QuestionWritting\";\r\n// import QuestionTyping from \"~/components/Global/QuestionBank/QuestionShow/QuestionTyping\";\r\n// import QuestionDrag from \"~/components/Global/QuestionBank/QuestionShow/QuestionDrag\";\r\n// import QuestionMap from \"~/components/Global/QuestionBank/QuestionShow/QuestionMap\";\r\n\r\n// const { Option, OptGroup } = Select;\r\n// let isOpenTypeQuestion = false;\r\n// const listTodoApi = {\r\n//   pageSize: 10,\r\n//   pageIndex: 1,\r\n//   SubjectID: null,\r\n//   Type: null,\r\n//   Level: null,\r\n//   ExerciseGroupID: null,\r\n//   ExamTopicType: null,\r\n// };\r\n\r\n// const listAlphabet = [\r\n//   \"A\",\r\n//   \"B\",\r\n//   \"C\",\r\n//   \"D\",\r\n//   \"F\",\r\n//   \"G\",\r\n//   \"H\",\r\n//   \"I\",\r\n//   \"J\",\r\n//   \"K\",\r\n//   \"L\",\r\n//   \"M\",\r\n//   \"N\",\r\n//   \"O\",\r\n//   \"P\",\r\n//   \"Q\",\r\n//   \"R\",\r\n//   \"S\",\r\n//   \"T\",\r\n//   \"U\",\r\n//   \"V\",\r\n// ];\r\n\r\n// const QuestionList = () => {\r\n//   const { showNoti } = useWrap();\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [dataProgram, setDataProgram] = useState<IProgram[]>(null);\r\n//   const [dataSubject, setDataSubject] = useState<ISubject[]>(null);\r\n//   const [loadingSelect, setLoadingSelect] = useState(false);\r\n//   const [questionData, setQuestionData] = useState(questionObj);\r\n//   const [showListQuestion, setShowListQuestion] = useState(false);\r\n//   const [showTypeQuetion, setShowTypeQuestion] = useState({\r\n//     type: null,\r\n//     status: false,\r\n//   });\r\n//   const [todoApi, setTodoApi] = useState(listTodoApi);\r\n//   const [dataSource, setDataSource] = useState([]);\r\n//   const boxEl = useRef(null);\r\n//   const [totalPageIndex, setTotalPageIndex] = useState(0);\r\n//   const [loadingQuestion, setLoadingQuestion] = useState(false);\r\n//   const [isGroup, setIsGroup] = useState({\r\n//     id: null,\r\n//     status: null,\r\n//   });\r\n//   const [valueSubject, setValueSubject] = useState(\"Chọn môn học\");\r\n//   const [dataGroup, setDataGroup] = useState([]);\r\n//   const [dataExercise, setDataExercise] = useState();\r\n\r\n//   // Phân loại dạng câu hỏi để trả ra danh sách\r\n//   const returnQuestionType = () => {\r\n//     // console.log(\"Type is: \", todoApi.Type);\r\n\r\n//     switch (todoApi.Type) {\r\n//       /** Quesion Single */\r\n//       case 1:\r\n//         return (\r\n//           <GroupWrap\r\n//             isGroup={isGroup}\r\n//             listQuestion={dataGroup}\r\n//             onFetchData={onFetchData}\r\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\r\n//             onEditData={(data) => onEditData(data)}\r\n//             onAddData={(data) => onAddData(data)}\r\n//           >\r\n//             <QuestionSingle\r\n//               listAlphabet={listAlphabet}\r\n//               isGroup={isGroup}\r\n//               loadingQuestion={loadingQuestion}\r\n//               listQuestion={dataSource}\r\n//               onFetchData={onFetchData}\r\n//               onEditData={(data) => onEditData(data)}\r\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             />\r\n//           </GroupWrap>\r\n//         );\r\n//         break;\r\n//       /** Quesion Multiple */\r\n//       case 4:\r\n//         return (\r\n//           <GroupWrap\r\n//             isGroup={isGroup}\r\n//             listQuestion={dataGroup}\r\n//             onFetchData={onFetchData}\r\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\r\n//             onEditData={(data) => onEditData(data)}\r\n//             onAddData={(data) => onAddData(data)}\r\n//           >\r\n//             <QuestionMultiple\r\n//               listAlphabet={listAlphabet}\r\n//               isGroup={isGroup}\r\n//               loadingQuestion={loadingQuestion}\r\n//               listQuestion={dataSource}\r\n//               onFetchData={onFetchData}\r\n//               onEditData={(data) => onEditData(data)}\r\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             />\r\n//           </GroupWrap>\r\n//         );\r\n//         break;\r\n//       /** Quesion Writting */\r\n//       case 6:\r\n//         return (\r\n//           <QuestionWritting\r\n//             listAlphabet={listAlphabet}\r\n//             isGroup={isGroup}\r\n//             loadingQuestion={loadingQuestion}\r\n//             listQuestion={dataSource}\r\n//             onFetchData={onFetchData}\r\n//             onEditData={(data) => onEditData(data)}\r\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//           />\r\n//         );\r\n//         break;\r\n//       /** Quesion Typing */\r\n//       case 3:\r\n//         return (\r\n//           <GroupWrap\r\n//             isGroup={isGroup}\r\n//             listQuestion={dataGroup}\r\n//             onFetchData={onFetchData}\r\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\r\n//             onEditData={(data) => onEditData(data)}\r\n//             onAddData={(data) => onAddData(data)}\r\n//           >\r\n//             <QuestionTyping\r\n//               listAlphabet={listAlphabet}\r\n//               isGroup={isGroup}\r\n//               loadingQuestion={loadingQuestion}\r\n//               listQuestion={dataExercise}\r\n//               onFetchData={onFetchData}\r\n//               onEditData={(data) => onEditData(data)}\r\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             />\r\n//           </GroupWrap>\r\n//         );\r\n//         break;\r\n//       /** Quesion Drag */\r\n//       case 2:\r\n//         return (\r\n//           <GroupWrap\r\n//             isGroup={isGroup}\r\n//             listQuestion={dataGroup}\r\n//             onFetchData={onFetchData}\r\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\r\n//             onEditData={(data) => onEditData(data)}\r\n//             onAddData={(data) => onAddData(data)}\r\n//           >\r\n//             <QuestionDrag\r\n//               listAlphabet={listAlphabet}\r\n//               isGroup={isGroup}\r\n//               loadingQuestion={loadingQuestion}\r\n//               listQuestion={dataExercise}\r\n//               onFetchData={onFetchData}\r\n//               onEditData={(data) => onEditData(data)}\r\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             />\r\n//           </GroupWrap>\r\n//         );\r\n//         break;\r\n//       /** Quesion Map */\r\n//       case 5:\r\n//         return (\r\n//           <GroupWrap\r\n//             isGroup={isGroup}\r\n//             listQuestion={dataGroup}\r\n//             onFetchData={onFetchData}\r\n//             onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             getGroupID={(groupID) => setIsGroup({ ...isGroup, id: groupID })}\r\n//             onEditData={(data) => onEditData(data)}\r\n//             onAddData={(data) => onAddData(data)}\r\n//           >\r\n//             <QuestionMap\r\n//               listAlphabet={listAlphabet}\r\n//               isGroup={isGroup}\r\n//               loadingQuestion={loadingQuestion}\r\n//               listQuestion={dataSource}\r\n//               onFetchData={onFetchData}\r\n//               onEditData={(data) => onEditData(data)}\r\n//               onRemoveData={(dataRemove) => onRemoveData(dataRemove)}\r\n//             />\r\n//           </GroupWrap>\r\n//         );\r\n//         break;\r\n//       default:\r\n//         return (\r\n//           <p className=\"text-center\">\r\n//             <b>Danh sách còn trống</b>\r\n//           </p>\r\n//         );\r\n//         break;\r\n//     }\r\n//   };\r\n\r\n//   // GET DATA SOURCE - DATA EXERCISE\r\n//   const getDataSource = async () => {\r\n//     let res = null;\r\n//     try {\r\n//       if (!isGroup.status) {\r\n//         res = await exerciseApi.getAll({ ...todoApi, ExerciseGroupID: 0 });\r\n//       } else {\r\n//         res = await exerciseGroupApi.getAll(todoApi);\r\n//       }\r\n\r\n//       if (res.status == 200) {\r\n//         // Xét coi này câu hỏi nhóm hay đơn\r\n//         if (!isGroup.status) {\r\n//           let cloneData = [...dataSource];\r\n//           res.data.data.forEach((item, index) => {\r\n//             cloneData.push(item);\r\n//           });\r\n\r\n//           setDataSource([...cloneData]);\r\n//         } else {\r\n//           let cloneData = [...dataGroup];\r\n//           res.data.data.forEach((item, index) => {\r\n//             cloneData.push(item);\r\n//           });\r\n\r\n//           setDataGroup([...cloneData]);\r\n//         }\r\n\r\n//         // todoApi.pageIndex == 1 && showNoti(\"success\", \"Thành công\");\r\n//         // !showListQuestion && setShowListQuestion(true);\r\n\r\n//         // Caculator pageindex\r\n//         let totalPage = Math.ceil(res.data.totalRow / 10);\r\n//         setTotalPageIndex(totalPage);\r\n//       }\r\n\r\n//       if (res.status == 204) {\r\n//         // showNoti(\"danger\", \"Không có dữ liệu\");\r\n//         if (!isGroup.status) {\r\n//           if (todoApi.Type == 3) {\r\n//             setShowListQuestion(false);\r\n//           }\r\n//         } else {\r\n//           setShowListQuestion(true);\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       showNoti(\"danger\", error.message);\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//       loadingQuestion && setLoadingQuestion(false);\r\n//     }\r\n//   };\r\n\r\n//   // GET DATA PROGRAM\r\n//   const getDataProgram = async () => {\r\n//     try {\r\n//       let res = await programApi.getAll({ pageIndex: 1, pageSize: 999999 });\r\n//       res.status == 200 && setDataProgram(res.data.data);\r\n//       res.status == 204 && showNoti(\"danger\", \"Chương trình không có dữ liệu\");\r\n//     } catch (error) {\r\n//       showNoti(\"danger\", error.message);\r\n//     } finally {\r\n//     }\r\n//   };\r\n\r\n//   // GET DATA SUBJECT\r\n//   const getDataSubject = async (id) => {\r\n//     setLoadingSelect(true);\r\n//     try {\r\n//       let res = await subjectApi.getAll({\r\n//         pageIndex: 1,\r\n//         pageSize: 999999,\r\n//         ProgramID: id,\r\n//       });\r\n//       res.status == 200 && setDataSubject(res.data.data);\r\n//       res.status == 204 && showNoti(\"danger\", \"Môn học không có dữ liệu\");\r\n//     } catch (error) {\r\n//       showNoti(\"danger\", error.message);\r\n//     } finally {\r\n//       setLoadingSelect(false);\r\n//     }\r\n//   };\r\n\r\n//   // CHỌN DẠNG CÂU HỎI (CHOICE, MULTIPLE,...)\r\n//   const changeBoxType = (e: any, Type: number, TypeName: string) => {\r\n//     e.preventDefault();\r\n\r\n//     questionData.Type = Type;\r\n//     questionData.TypeName = TypeName;\r\n\r\n//     // Kiểm dạng câu hỏi gì để thay đổi list answer\r\n//     switch (Type) {\r\n//       case 4:\r\n//         questionData.ExerciseAnswer = [];\r\n//         // setQuestionData({ ...questionData });\r\n//         break;\r\n//       case 1:\r\n//         questionData.ExerciseAnswer = questionObj.ExerciseAnswer;\r\n//         break;\r\n//       // case 3:\r\n//       //   questionData.ExerciseList = [];\r\n//       default:\r\n//         break;\r\n//     }\r\n\r\n//     // Add value vào data chung\r\n//     setQuestionData({ ...questionData });\r\n\r\n//     // Active\r\n//     setShowTypeQuestion({\r\n//       ...showTypeQuetion,\r\n//       type: Type,\r\n//     });\r\n\r\n//     // Show danh sách câu hỏi bên cạnh\r\n//     setIsLoading(true);\r\n//     !showListQuestion && setShowListQuestion(true);\r\n//     setDataSource([]);\r\n//     setDataGroup([]);\r\n//     setTodoApi({\r\n//       ...todoApi,\r\n//       Type: Type,\r\n//       SubjectID: questionData.SubjectID,\r\n//       Level: questionData.Level,\r\n//       pageIndex: 1,\r\n//     });\r\n//   };\r\n\r\n//   // console.log(\"Question Data bên ngoài: \", questionData);\r\n\r\n//   // HANDLE CHANGE SELECT - THAO TÁC VỚI CÁC SELECT\r\n//   const handleChange_select = (selectName, option) => {\r\n//     setDataSource([]);\r\n//     setDataGroup([]);\r\n\r\n//     switch (selectName) {\r\n//       // -- Chọn chương trình\r\n//       case \"program\":\r\n//         getDataSubject(option.value);\r\n//         setDataSubject(null);\r\n//         setValueSubject(\"Chọn môn học\");\r\n//         showListQuestion &&\r\n//           (setIsLoading(true),\r\n//           setTodoApi({\r\n//             ...todoApi,\r\n//             pageIndex: 1,\r\n//             SubjectID: null,\r\n//           }));\r\n//         setShowTypeQuestion({\r\n//           type: null,\r\n//           status: false,\r\n//         });\r\n//         setShowListQuestion(false);\r\n//         break;\r\n\r\n//       // -- Chọn loại câu hỏi đơn hay nhóm\r\n//       case \"type-question-group\":\r\n//         // questionData.ExerciseGroupID = option.value;\r\n//         isOpenTypeQuestion = true;\r\n//         if (option.value == 0) {\r\n//           setIsGroup({\r\n//             id: null,\r\n//             status: false,\r\n//           });\r\n//         } else {\r\n//           setIsGroup({\r\n//             ...isGroup,\r\n//             status: true,\r\n//           });\r\n//         }\r\n//         showListQuestion &&\r\n//           (setIsLoading(true),\r\n//           setTodoApi({\r\n//             ...todoApi,\r\n//             pageIndex: 1,\r\n//           }));\r\n\r\n//         break;\r\n\r\n//       // -- Chọn môn học\r\n//       case \"subject\":\r\n//         questionData.SubjectID = option.value;\r\n//         questionData.SubjectName = option.children;\r\n//         setValueSubject(option.value);\r\n\r\n//         showListQuestion &&\r\n//           (setIsLoading(true),\r\n//           setTodoApi({\r\n//             ...todoApi,\r\n//             SubjectID: option.value,\r\n//             pageIndex: 1,\r\n//           }));\r\n\r\n//         break;\r\n\r\n//       // -- Chọn level (Dễ, trung bình, khó)\r\n//       case \"level\":\r\n//         questionData.Level = option.value;\r\n//         questionData.LevelName = option.children;\r\n//         showListQuestion &&\r\n//           (setIsLoading(true),\r\n//           setTodoApi({\r\n//             ...todoApi,\r\n//             Level: option.value,\r\n//           }));\r\n//         break;\r\n//       default:\r\n//         break;\r\n//     }\r\n//     setQuestionData({ ...questionData });\r\n\r\n//     // kiểm tra mới vào đã chọn đầy đủ 4 trường hay chưa rồi mới show danh sách dạng câu hỏi\r\n//     if (!showTypeQuetion.status) {\r\n//       if (\r\n//         questionData.ExerciseGroupID !== null &&\r\n//         questionData.SubjectID !== null &&\r\n//         questionData.Level !== null &&\r\n//         isOpenTypeQuestion == true\r\n//       ) {\r\n//         setShowTypeQuestion({\r\n//           ...showTypeQuetion,\r\n//           status: true,\r\n//         });\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // ON ADD NEW DATA\r\n//   const addDataGroup = (dataAdd) => {\r\n//     dataGroup.splice(0, 0, dataAdd);\r\n//     setDataGroup([...dataGroup]);\r\n//   };\r\n\r\n//   const addDataSingle = (dataAdd) => {\r\n//     dataSource.splice(0, 0, dataAdd);\r\n//     setDataSource([...dataSource]);\r\n//   };\r\n\r\n//   const onAddData = (dataAdd) => {\r\n//     console.log(\"DATA add outside: \", dataAdd);\r\n\r\n//     if (!isGroup.status) {\r\n//       addDataSingle(dataAdd);\r\n//     } else {\r\n//       if (dataAdd.ExerciseGroupID) {\r\n//         addDataSingle(dataAdd);\r\n//       } else {\r\n//         addDataGroup(dataAdd);\r\n//       }\r\n//     }\r\n//     questionData.Content = \"\";\r\n//     setQuestionData({ ...questionData });\r\n//   };\r\n\r\n//   // console.log(\"DATA SOURCE: \", dataSource);\r\n//   // console.log(\"DATA GROUP: \", dataGroup);\r\n\r\n//   // ON EDIT DATA\r\n\r\n//   // console.log(\"Data Exercise: \", dataExercise);\r\n\r\n//   const editDataGroup = (dataEdit) => {\r\n//     let index = dataGroup.findIndex((item) => item.ID == dataEdit.ID);\r\n//     dataGroup.splice(index, 1, dataEdit);\r\n\r\n//     // let exerciseList = [...dataEdit.ExerciseList];\r\n\r\n//     setDataExercise(dataEdit);\r\n//     setDataGroup([...dataGroup]);\r\n//   };\r\n\r\n//   const editDataSingle = (dataEdit) => {\r\n//     if (dataEdit.Type == 4) {\r\n//       let newAnswerList = dataEdit.ExerciseAnswer.filter(\r\n//         (item) => item.Enable !== false\r\n//       );\r\n//       dataEdit.ExerciseAnswer = newAnswerList;\r\n//     }\r\n\r\n//     let index = dataSource.findIndex((item) => item.ID == dataEdit.ID);\r\n//     dataSource.splice(index, 1, dataEdit);\r\n\r\n//     setDataSource([...dataSource]);\r\n//   };\r\n\r\n//   const onEditData = (dataEdit) => {\r\n//     console.log(\"DATA edit outside \", dataEdit);\r\n\r\n//     if (!isGroup.status) {\r\n//       // Nếu là dạng câu hỏi nhiều đáp án thì phải xóa nó đi\r\n//       editDataSingle(dataEdit);\r\n//     } else {\r\n//       if (dataEdit.ExerciseGroupID) {\r\n//         editDataSingle(dataEdit);\r\n//       } else {\r\n//         editDataGroup(dataEdit);\r\n//       }\r\n//     }\r\n\r\n//     questionData.Content = \"\";\r\n//     setQuestionData({ ...questionData });\r\n//   };\r\n\r\n//   // ON REMOVE DATA\r\n//   const removeDataSingle = (dataRemove) => {\r\n//     let quesIndex = dataSource.findIndex((item) => item.ID == dataRemove.ID);\r\n//     dataSource.splice(quesIndex, 1);\r\n//     setDataSource([...dataSource]);\r\n//   };\r\n\r\n//   const removeDataGroup = (dataRemove) => {\r\n//     console.log(\"Data remove outside: \", dataRemove);\r\n//     if (dataRemove.isDeleteExercise) {\r\n//       setDataExercise(dataRemove);\r\n//     } else {\r\n//       let quesIndex = dataGroup.findIndex((item) => item.ID == dataRemove);\r\n//       dataGroup.splice(quesIndex, 1);\r\n//       setDataGroup([...dataGroup]);\r\n//     }\r\n//   };\r\n\r\n//   const onRemoveData = (dataRemove) => {\r\n//     if (!isGroup.status) {\r\n//       removeDataSingle(dataRemove);\r\n//     } else {\r\n//       if (dataRemove.ExerciseGroupID) {\r\n//         removeDataSingle(dataRemove);\r\n//       } else {\r\n//         removeDataGroup(dataRemove);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // ON FETCH DATA\r\n//   const onFetchData = () => {\r\n//     scrollToTop(), setIsLoading(true), setDataSource([]), setDataGroup([]);\r\n//     setTodoApi({ ...todoApi, pageIndex: 1, pageSize: 10 });\r\n//   };\r\n\r\n//   // SCROLL TO TOP\r\n//   const scrollToTop = () => {\r\n//     boxEl.current.scrollTo(0, 0);\r\n//   };\r\n\r\n//   // ON SCROLL\r\n//   const onScroll = () => {\r\n//     const scrollHeight = boxEl.current.scrollHeight;\r\n//     const offsetHeight = boxEl.current.offsetHeight;\r\n//     const scrollTop = boxEl.current.scrollTop;\r\n\r\n//     // console.log(\"Height: \", scrollHeight - offsetHeight);\r\n//     // console.log(\"Scroll: \", scrollTop);\r\n\r\n//     if (scrollTop > scrollHeight - offsetHeight - 40) {\r\n//       if (todoApi.pageIndex < totalPageIndex) {\r\n//         setLoadingQuestion(true);\r\n\r\n//         if (scrollTop > 0 && loadingQuestion == false) {\r\n//           setTodoApi({\r\n//             ...todoApi,\r\n//             pageIndex: todoApi.pageIndex + 1,\r\n//           });\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // console.log(\"DATA exercise: \", dataSource);\r\n\r\n//   useEffect(() => {\r\n//     getDataProgram(); // Lấy data chương trình\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (questionData.Type !== 0) {\r\n//       getDataSource();\r\n//     }\r\n//     questionData.Content = \"\";\r\n//     switch (questionData.Type) {\r\n//       case 4:\r\n//         questionData.ExerciseAnswer = [];\r\n//         break;\r\n\r\n//       default:\r\n//         break;\r\n//     }\r\n//     setQuestionData({ ...questionData });\r\n//   }, [todoApi]);\r\n\r\n//   return (\r\n//     <div className=\"question-create\">\r\n//       <TitlePage title=\"Tạo câu hỏi\" />\r\n//       <div className=\"row\">\r\n//         <div className=\"col-md-12\"></div>\r\n//       </div>\r\n//       <div className=\"row\">\r\n//         <div className=\"col-md-8 col-12\">\r\n//           <Card\r\n//             className=\"card-detail-question\"\r\n//             title={\r\n//               <div className=\"title-question-bank\">\r\n//                 <h3 className=\"title-big\">\r\n//                   <Bookmark />{\" \"}\r\n//                   {!isGroup.status\r\n//                     ? \"Danh sách câu hỏi\"\r\n//                     : \"Danh sách nhóm câu hỏi\"}\r\n//                 </h3>\r\n//                 <p\r\n//                   style={{\r\n//                     paddingLeft: \"30px\",\r\n//                     fontSize: \"13px\",\r\n//                     marginBottom: \"0\",\r\n//                     fontWeight: 500,\r\n//                     color: \"#777777\",\r\n//                   }}\r\n//                 >\r\n//                   {questionData.TypeName}\r\n//                 </p>\r\n//                 {/* <p className=\"text-lesson\">\r\n//                   <span className=\"font-weight-black\">Môn học:</span>\r\n//                   <span>{questionData?.SubjectName}</span>\r\n//                 </p> */}\r\n//               </div>\r\n//             }\r\n//             extra={\r\n//               <CreateQuestionForm\r\n//                 questionData={questionData}\r\n//                 onFetchData={onFetchData}\r\n//                 isGroup={isGroup}\r\n//                 onAddData={(data) => onAddData(data)}\r\n//               />\r\n//             }\r\n//           >\r\n//             {!showListQuestion ? (\r\n//               <>\r\n//                 <p className=\"font-weight-primary text-center\">\r\n//                   Vui lòng chọn môn học và dạng câu hỏi\r\n//                 </p>\r\n//                 <div className=\"img-load\">\r\n//                   <img src=\"/images/study-min.jpg\" alt=\"\" />\r\n//                 </div>\r\n//               </>\r\n//             ) : isLoading ? (\r\n//               <div className=\"text-center p-2\">\r\n//                 <Spin />\r\n//               </div>\r\n//             ) : (\r\n//               <div\r\n//                 className={`question-list active`}\r\n//                 ref={boxEl}\r\n//                 onScroll={onScroll}\r\n//               >\r\n//                 {returnQuestionType()}\r\n//               </div>\r\n//             )}\r\n//           </Card>\r\n//         </div>\r\n//         <div className=\"col-md-4 col-12\">\r\n//           <Card className=\"card-box-type\">\r\n//             <div className={`row ${showTypeQuetion ? \"mb-2\" : \"\"}`}>\r\n//               {/** CHỌN CHƯƠNG TRÌNH */}\r\n//               <div className=\"col-md-6 col-12 \">\r\n//                 <div className=\"item-select\">\r\n//                   <Select\r\n//                     className=\"style-input\"\r\n//                     defaultValue=\"Chọn chương trình\"\r\n//                     style={{ width: \"100%\" }}\r\n//                     onChange={(value, option) =>\r\n//                       handleChange_select(\"program\", option)\r\n//                     }\r\n//                   >\r\n//                     {dataProgram?.map((item, index) => (\r\n//                       <Option key={index} value={item.ID}>\r\n//                         {item.ProgramName}\r\n//                       </Option>\r\n//                     ))}\r\n//                   </Select>\r\n//                 </div>\r\n//               </div>\r\n//               {/** CHỌN MÔN HỌC */}\r\n//               <div className=\"col-md-6 col-12 \">\r\n//                 <div className=\"item-select\">\r\n//                   {/* <p className=\"font-weight-black mb-2\">Chọn môn học</p> */}\r\n//                   <Select\r\n//                     loading={loadingSelect}\r\n//                     className=\"style-input\"\r\n//                     defaultValue=\"Chọn môn học\"\r\n//                     value={valueSubject}\r\n//                     style={{ width: \"100%\" }}\r\n//                     onChange={(value, option) =>\r\n//                       handleChange_select(\"subject\", option)\r\n//                     }\r\n//                   >\r\n//                     {dataSubject?.map((item, index) => (\r\n//                       <Option key={index} value={item.ID}>\r\n//                         {item.SubjectName}\r\n//                       </Option>\r\n//                     ))}\r\n//                   </Select>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/** LOẠI CÂU HỎI (SINGLE HOẶC GROUP)  */}\r\n//               <div className=\"col-md-6 col-12 mt-3\">\r\n//                 <div className=\"item-select\">\r\n//                   {/* <p className=\"font-weight-black mb-2\">Loại câu hỏi</p> */}\r\n//                   <Select\r\n//                     className=\"style-input\"\r\n//                     defaultValue=\"Chọn loại câu hỏi\"\r\n//                     style={{ width: \"100%\" }}\r\n//                     onChange={(value, option) =>\r\n//                       handleChange_select(\"type-question-group\", option)\r\n//                     }\r\n//                   >\r\n//                     <Option value={0}>Câu hỏi đơn</Option>\r\n//                     <Option value={1}>Câu hỏi nhóm</Option>\r\n//                   </Select>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               {/** MỨC ĐỘ  */}\r\n//               <div className=\"col-md-6 col-12 mt-3\">\r\n//                 <div className=\"item-select\">\r\n//                   {/* <p className=\"font-weight-black mb-2\">Loại câu hỏi</p> */}\r\n//                   <Select\r\n//                     className=\"style-input\"\r\n//                     defaultValue=\"Chọn mức độ\"\r\n//                     style={{ width: \"100%\" }}\r\n//                     onChange={(value, option) =>\r\n//                       handleChange_select(\"level\", option)\r\n//                     }\r\n//                   >\r\n//                     <Option value={1}>Dễ</Option>\r\n//                     <Option value={2}>Trung bình</Option>\r\n//                     <Option value={3}>Khó</Option>\r\n//                   </Select>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"row\">\r\n//               <div\r\n//                 className={`wrap-type-question w-100 ${\r\n//                   showTypeQuetion.status ? \"active\" : \"nun-active\"\r\n//                 }`}\r\n//               >\r\n//                 {isGroup.status\r\n//                   ? dataTypeGroup?.map((item, index) => (\r\n//                       <div className=\"col-md-12\" key={index}>\r\n//                         <div className=\"box-type-question\">\r\n//                           <a\r\n//                             href=\"#\"\r\n//                             onClick={(e) =>\r\n//                               changeBoxType(e, item.Type, item.TypeName)\r\n//                             }\r\n//                             className={\r\n//                               item.Type === showTypeQuetion.type ? \"active\" : \"\"\r\n//                             }\r\n//                           >\r\n//                             <div className=\"type-img\">\r\n//                               <img\r\n//                                 src={item.Images}\r\n//                                 alt=\"\"\r\n//                                 className=\"img-inner\"\r\n//                               />\r\n//                             </div>\r\n//                             <div className=\"type-detail\">\r\n//                               {/* <h5 className=\"number\">{item.Number}</h5> */}\r\n//                               <div className=\"p text\">{item.TypeName}</div>\r\n//                             </div>\r\n//                           </a>\r\n//                         </div>\r\n//                       </div>\r\n//                     ))\r\n//                   : dataTypeSingle?.map((item, index) => (\r\n//                       <div className=\"col-md-12\" key={index}>\r\n//                         <div className=\"box-type-question\">\r\n//                           <a\r\n//                             href=\"#\"\r\n//                             onClick={(e) =>\r\n//                               changeBoxType(e, item.Type, item.TypeName)\r\n//                             }\r\n//                             className={\r\n//                               item.Type === showTypeQuetion.type ? \"active\" : \"\"\r\n//                             }\r\n//                           >\r\n//                             <div className=\"type-img\">\r\n//                               <img\r\n//                                 src={item.Images}\r\n//                                 alt=\"\"\r\n//                                 className=\"img-inner\"\r\n//                               />\r\n//                             </div>\r\n//                             <div className=\"type-detail\">\r\n//                               {/* <h5 className=\"number\">{item.Number}</h5> */}\r\n//                               <div className=\"p text\">{item.TypeName}</div>\r\n//                             </div>\r\n//                           </a>\r\n//                         </div>\r\n//                       </div>\r\n//                     ))}\r\n//               </div>\r\n//             </div>\r\n//           </Card>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// QuestionList.layout = LayoutBase;\r\n// export default QuestionList;\r\n\r\nimport React from 'react';\r\nimport QuestionCreate from '~/components/Global/QuestionBank/QuestionCreate';\r\nimport LayoutBase from '~/components/LayoutBase';\r\n\r\nconst QuestionList = () => {\r\n\treturn <QuestionCreate />;\r\n};\r\n\r\nQuestionList.layout = LayoutBase;\r\nexport default QuestionList;\r\n"]},"metadata":{},"sourceType":"module"}