{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\Option\\\\Area\\\\Area.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { areaApi } from '~/apiBase';\nimport DeleteTableRow from '~/components/Elements/DeleteTableRow/DeleteTableRow';\nimport SortBox from '~/components/Elements/SortBox';\nimport PowerTable from '~/components/PowerTable';\nimport FilterColumn from '~/components/Tables/FilterColumn';\nimport { useWrap } from '~/context/wrap';\nimport AreaForm from './AreaForm';\nconst SHOW_SORT = false;\n\nconst Area = () => {\n  const {\n    0: areaList,\n    1: setAreaList\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    showNoti,\n    pageSize\n  } = useWrap();\n  const {\n    0: activeColumnSearch,\n    1: setActiveColumnSearch\n  } = useState(''); // FILTER\n\n  const listFieldInit = {\n    pageIndex: 1,\n    pageSize: pageSize,\n    sort: 1,\n    sortType: true,\n    AreaName: ''\n  };\n  let refValue = useRef({\n    pageIndex: 1,\n    pageSize: 10,\n    sort: -1,\n    sortType: false\n  });\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(listFieldInit); // SORT OPTION\n\n  const sortOptionList = [{\n    dataSort: {\n      sort: 0,\n      sortType: true\n    },\n    value: 1,\n    text: 'Tên tăng dần'\n  }, {\n    dataSort: {\n      sort: 0,\n      sortType: false\n    },\n    value: 2,\n    text: 'Tên giảm dần'\n  }]; // PAGINATION\n\n  const getPagination = (pageIndex, pageSize) => {\n    if (!pageSize) pageSize = 10;\n    refValue.current = _objectSpread(_objectSpread({}, refValue.current), {}, {\n      pageSize,\n      pageIndex\n    });\n    setFilters(_objectSpread(_objectSpread({}, filters), refValue.current));\n  }; // SORT\n\n\n  const onSort = option => {\n    refValue.current = _objectSpread(_objectSpread({}, refValue.current), {}, {\n      sort: option.title.sort,\n      sortType: option.title.sortType\n    });\n    setFilters(_objectSpread(_objectSpread({}, listFieldInit), refValue.current));\n  }; // RESET SEARCH\n\n\n  const onResetSearch = () => {\n    setActiveColumnSearch('');\n    setFilters(_objectSpread(_objectSpread({}, listFieldInit), {}, {\n      pageSize: refValue.current.pageSize\n    }));\n  }; // ACTION SEARCH\n\n\n  const onSearch = (valueSearch, dataIndex) => {\n    setActiveColumnSearch(dataIndex);\n    setFilters(_objectSpread(_objectSpread(_objectSpread({}, listFieldInit), refValue.current), {}, {\n      pageIndex: 1,\n      [dataIndex]: valueSearch\n    }));\n  }; // GET DATA IN FIRST TIME\n\n\n  const fetchAreaList = async () => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      let res = await areaApi.getAll(filters);\n\n      if (res.status === 200) {\n        if (res.data.totalRow && res.data.data.length) {\n          setAreaList(res.data.data);\n          setTotalPage(res.data.totalRow);\n        }\n      } else if (res.status === 204) {\n        showNoti('danger', 'Không tìm thấy');\n        setAreaList([]);\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchAreaList();\n  }, [filters]); // CREATE\n\n  const onCreateArea = async data => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      res = await areaApi.add(_objectSpread(_objectSpread({}, data), {}, {\n        Enable: true\n      }));\n      res.status === 200 && showNoti('success', res.data.message);\n      onResetSearch();\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  }; // UPDATE\n\n\n  const onUpdateArea = async (newObj, idx) => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      res = await areaApi.update(newObj);\n\n      if (res.status === 200) {\n        const newAreaList = [...areaList];\n        newAreaList.splice(idx, 1, newObj);\n        setAreaList(newAreaList);\n        showNoti('success', res.data.message);\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  }; // DELETE\n\n\n  const onDeleteArea = idx => {\n    return async () => {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: true\n      });\n\n      try {\n        const delObj = areaList[idx];\n        const res = await areaApi.delete(_objectSpread(_objectSpread({}, delObj), {}, {\n          Enable: false\n        }));\n        res.status === 200 && showNoti('success', res.data.message);\n\n        if (areaList.length === 1) {\n          filters.pageIndex === 1 ? (setFilters(_objectSpread(_objectSpread(_objectSpread({}, listFieldInit), refValue.current), {}, {\n            pageIndex: 1\n          })), setAreaList([])) : setFilters(_objectSpread(_objectSpread(_objectSpread({}, filters), refValue.current), {}, {\n            pageIndex: filters.pageIndex - 1\n          }));\n          return;\n        }\n\n        fetchAreaList();\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'GET_ALL',\n          status: false\n        });\n      }\n    };\n  }; // COLUMN FOR TABLE\n\n\n  const columns = [_objectSpread(_objectSpread({\n    title: 'Tên tỉnh/thành phố',\n    dataIndex: 'AreaName'\n  }, FilterColumn('AreaName', onSearch, onResetSearch, 'text')), {}, {\n    className: activeColumnSearch === 'AreaName' ? 'active-column-search' : '',\n    render: text => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-black\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 22\n    }, this)\n  }), {\n    title: 'Ngày khởi tạo',\n    dataIndex: 'ModifiedOn',\n    render: date => moment(date).format('DD/MM/YYYY')\n  }, {\n    title: 'Được tạo bởi',\n    dataIndex: 'ModifiedBy'\n  }, {\n    align: 'center',\n    render: (value, _, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(AreaForm, {\n        isLoading: isLoading,\n        isUpdate: true,\n        updateObj: value,\n        indexUpdateObj: idx,\n        handleUpdateArea: onUpdateArea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(DeleteTableRow, {\n        handleDelete: onDeleteArea(idx)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 5\n    }, this)\n  }]; // RETURN\n\n  return /*#__PURE__*/_jsxDEV(PowerTable, {\n    currentPage: filters.pageIndex,\n    totalPage: totalPage,\n    getPagination: getPagination,\n    loading: isLoading,\n    addClass: \"basic-header\",\n    TitlePage: \"Danh s\\xE1ch t\\u1EC9nh\",\n    TitleCard: /*#__PURE__*/_jsxDEV(AreaForm, {\n      isLoading: isLoading,\n      isUpdate: false,\n      handleCreateArea: onCreateArea\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 15\n    }, this),\n    dataSource: areaList,\n    columns: columns,\n    Extra: SHOW_SORT && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"extra-table\",\n      children: /*#__PURE__*/_jsxDEV(SortBox, {\n        handleSort: onSort,\n        dataOption: sortOptionList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 3\n  }, this);\n};\n\nexport default Area;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/Option/Area/Area.tsx"],"names":["moment","React","useEffect","useRef","useState","areaApi","DeleteTableRow","SortBox","PowerTable","FilterColumn","useWrap","AreaForm","SHOW_SORT","Area","areaList","setAreaList","isLoading","setIsLoading","type","status","totalPage","setTotalPage","showNoti","pageSize","activeColumnSearch","setActiveColumnSearch","listFieldInit","pageIndex","sort","sortType","AreaName","refValue","filters","setFilters","sortOptionList","dataSort","value","text","getPagination","current","onSort","option","title","onResetSearch","onSearch","valueSearch","dataIndex","fetchAreaList","res","getAll","data","totalRow","length","error","message","onCreateArea","add","Enable","onUpdateArea","newObj","idx","update","newAreaList","splice","onDeleteArea","delObj","delete","columns","className","render","date","format","align","_","e","stopPropagation"],"mappings":"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","sourcesContent":["import moment from 'moment'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { areaApi } from '~/apiBase'\r\nimport DeleteTableRow from '~/components/Elements/DeleteTableRow/DeleteTableRow'\r\nimport SortBox from '~/components/Elements/SortBox'\r\nimport PowerTable from '~/components/PowerTable'\r\nimport FilterColumn from '~/components/Tables/FilterColumn'\r\nimport { useWrap } from '~/context/wrap'\r\nimport AreaForm from './AreaForm'\r\n\r\nconst SHOW_SORT = false\r\n\r\nconst Area = () => {\r\n\tconst [areaList, setAreaList] = useState<IArea[]>([])\r\n\tconst [isLoading, setIsLoading] = useState({ type: '', status: false })\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\tconst { showNoti, pageSize } = useWrap()\r\n\tconst [activeColumnSearch, setActiveColumnSearch] = useState('')\r\n\r\n\t// FILTER\r\n\tconst listFieldInit = {\r\n\t\tpageIndex: 1,\r\n\t\tpageSize: pageSize,\r\n\t\tsort: 1,\r\n\t\tsortType: true,\r\n\t\tAreaName: ''\r\n\t}\r\n\tlet refValue = useRef({\r\n\t\tpageIndex: 1,\r\n\t\tpageSize: 10,\r\n\t\tsort: -1,\r\n\t\tsortType: false\r\n\t})\r\n\tconst [filters, setFilters] = useState(listFieldInit)\r\n\r\n\t// SORT OPTION\r\n\tconst sortOptionList = [\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsort: 0,\r\n\t\t\t\tsortType: true\r\n\t\t\t},\r\n\t\t\tvalue: 1,\r\n\t\t\ttext: 'Tên tăng dần'\r\n\t\t},\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsort: 0,\r\n\t\t\t\tsortType: false\r\n\t\t\t},\r\n\t\t\tvalue: 2,\r\n\t\t\ttext: 'Tên giảm dần'\r\n\t\t}\r\n\t]\r\n\r\n\t// PAGINATION\r\n\tconst getPagination = (pageIndex: number, pageSize: number) => {\r\n\t\tif (!pageSize) pageSize = 10\r\n\t\trefValue.current = {\r\n\t\t\t...refValue.current,\r\n\t\t\tpageSize,\r\n\t\t\tpageIndex\r\n\t\t}\r\n\t\tsetFilters({\r\n\t\t\t...filters,\r\n\t\t\t...refValue.current\r\n\t\t})\r\n\t}\r\n\r\n\t// SORT\r\n\tconst onSort = (option) => {\r\n\t\trefValue.current = {\r\n\t\t\t...refValue.current,\r\n\t\t\tsort: option.title.sort,\r\n\t\t\tsortType: option.title.sortType\r\n\t\t}\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\t...refValue.current\r\n\t\t})\r\n\t}\r\n\r\n\t// RESET SEARCH\r\n\tconst onResetSearch = () => {\r\n\t\tsetActiveColumnSearch('')\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\tpageSize: refValue.current.pageSize\r\n\t\t})\r\n\t}\r\n\r\n\t// ACTION SEARCH\r\n\tconst onSearch = (valueSearch, dataIndex) => {\r\n\t\tsetActiveColumnSearch(dataIndex)\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\t...refValue.current,\r\n\t\t\tpageIndex: 1,\r\n\t\t\t[dataIndex]: valueSearch\r\n\t\t})\r\n\t}\r\n\r\n\t// GET DATA IN FIRST TIME\r\n\tconst fetchAreaList = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tlet res = await areaApi.getAll(filters)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tif (res.data.totalRow && res.data.data.length) {\r\n\t\t\t\t\tsetAreaList(res.data.data)\r\n\t\t\t\t\tsetTotalPage(res.data.totalRow)\r\n\t\t\t\t}\r\n\t\t\t} else if (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', 'Không tìm thấy')\r\n\t\t\t\tsetAreaList([])\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchAreaList()\r\n\t}, [filters])\r\n\r\n\t// CREATE\r\n\tconst onCreateArea = async (data: any) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\tlet res\r\n\t\ttry {\r\n\t\t\tres = await areaApi.add({\r\n\t\t\t\t...data,\r\n\t\t\t\tEnable: true\r\n\t\t\t})\r\n\t\t\tres.status === 200 && showNoti('success', res.data.message)\r\n\t\t\tonResetSearch()\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn res\r\n\t}\r\n\r\n\t// UPDATE\r\n\tconst onUpdateArea = async (newObj: any, idx: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\tlet res\r\n\t\ttry {\r\n\t\t\tres = await areaApi.update(newObj)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newAreaList = [...areaList]\r\n\t\t\t\tnewAreaList.splice(idx, 1, newObj)\r\n\t\t\t\tsetAreaList(newAreaList)\r\n\t\t\t\tshowNoti('success', res.data.message)\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn res\r\n\t}\r\n\r\n\t// DELETE\r\n\tconst onDeleteArea = (idx: number) => {\r\n\t\treturn async () => {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: true\r\n\t\t\t})\r\n\t\t\ttry {\r\n\t\t\t\tconst delObj = areaList[idx]\r\n\t\t\t\tconst res = await areaApi.delete({\r\n\t\t\t\t\t...delObj,\r\n\t\t\t\t\tEnable: false\r\n\t\t\t\t})\r\n\t\t\t\tres.status === 200 && showNoti('success', res.data.message)\r\n\t\t\t\tif (areaList.length === 1) {\r\n\t\t\t\t\tfilters.pageIndex === 1\r\n\t\t\t\t\t\t? (setFilters({\r\n\t\t\t\t\t\t\t\t...listFieldInit,\r\n\t\t\t\t\t\t\t\t...refValue.current,\r\n\t\t\t\t\t\t\t\tpageIndex: 1\r\n\t\t\t\t\t\t  }),\r\n\t\t\t\t\t\t  setAreaList([]))\r\n\t\t\t\t\t\t: setFilters({\r\n\t\t\t\t\t\t\t\t...filters,\r\n\t\t\t\t\t\t\t\t...refValue.current,\r\n\t\t\t\t\t\t\t\tpageIndex: filters.pageIndex - 1\r\n\t\t\t\t\t\t  })\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tfetchAreaList()\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// COLUMN FOR TABLE\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Tên tỉnh/thành phố',\r\n\t\t\tdataIndex: 'AreaName',\r\n\t\t\t...FilterColumn('AreaName', onSearch, onResetSearch, 'text'),\r\n\t\t\tclassName: activeColumnSearch === 'AreaName' ? 'active-column-search' : '',\r\n\t\t\trender: (text) => <p className=\"font-weight-black\">{text}</p>\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Ngày khởi tạo',\r\n\t\t\tdataIndex: 'ModifiedOn',\r\n\t\t\trender: (date) => moment(date).format('DD/MM/YYYY')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Được tạo bởi',\r\n\t\t\tdataIndex: 'ModifiedBy'\r\n\t\t},\r\n\t\t{\r\n\t\t\talign: 'center',\r\n\t\t\trender: (value, _, idx) => (\r\n\t\t\t\t<div onClick={(e) => e.stopPropagation()}>\r\n\t\t\t\t\t<AreaForm isLoading={isLoading} isUpdate={true} updateObj={value} indexUpdateObj={idx} handleUpdateArea={onUpdateArea} />\r\n\t\t\t\t\t<DeleteTableRow handleDelete={onDeleteArea(idx)} />\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t]\r\n\r\n\t// RETURN\r\n\treturn (\r\n\t\t<PowerTable\r\n\t\t\tcurrentPage={filters.pageIndex}\r\n\t\t\ttotalPage={totalPage}\r\n\t\t\tgetPagination={getPagination}\r\n\t\t\tloading={isLoading}\r\n\t\t\taddClass=\"basic-header\"\r\n\t\t\tTitlePage=\"Danh sách tỉnh\"\r\n\t\t\tTitleCard={<AreaForm isLoading={isLoading} isUpdate={false} handleCreateArea={onCreateArea} />}\r\n\t\t\tdataSource={areaList}\r\n\t\t\tcolumns={columns}\r\n\t\t\tExtra={\r\n\t\t\t\tSHOW_SORT && (\r\n\t\t\t\t\t<div className=\"extra-table\">\r\n\t\t\t\t\t\t<SortBox handleSort={onSort} dataOption={sortOptionList} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Area\r\n"]},"metadata":{},"sourceType":"module"}