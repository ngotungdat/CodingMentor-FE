{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\QuestionBank\\\\QuestionFormType\\\\MultipleForm.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useWrap } from '~/context/wrap';\nimport { Form, Input, Checkbox, Tooltip } from 'antd';\nimport { exerciseApi } from '~/apiBase/';\nimport { CloseOutlined } from '@ant-design/icons';\nimport { Plus } from 'react-feather';\nimport EditorSimple from '~/components/Elements/EditorSimple';\nimport UploadAudio from '~/components/Elements/UploadAudio';\nlet AnsID = 0;\nconst listAlphabet = ['A', 'B', 'C', 'D', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V'];\n\nconst MultipleForm = props => {\n  var _questionData$Exercis;\n\n  const {\n    isSubmit,\n    questionData,\n    changeIsSubmit,\n    visible,\n    changeData,\n    isGroup\n  } = props;\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    reset,\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: {\n      isSubmitting,\n      errors,\n      isSubmitted\n    }\n  } = useForm();\n  const [form] = Form.useForm();\n  const {\n    0: questionDataForm,\n    1: setQuestionDataForm\n  } = useState(null);\n  const {\n    0: isResetEditor,\n    1: setIsResetEditor\n  } = useState(false);\n  const {\n    0: answerList,\n    1: setAnswerList\n  } = useState(questionData.ExerciseAnswer);\n  const {\n    0: loadAtFirst,\n    1: setLoadAtFirst\n  } = useState(true);\n  console.log('Question in form: ', questionDataForm); // SUBMI FORM\n\n  const onSubmit = handleSubmit((data, e) => {\n    console.log('DATA SUBMIT: ', data);\n  }); // GET VALUE IN EDITOR\n\n  const getDataEditor = dataEditor => {\n    if (questionDataForm) {\n      questionDataForm.Content = dataEditor;\n    }\n\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  };\n\n  const getDescribeAnswer = dataEditor => {\n    if (questionDataForm) {\n      questionDataForm.DescribeAnswer = dataEditor;\n    }\n\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // Reset value in form\n\n\n  const resetForm = () => {\n    questionDataForm.Content = '';\n    questionDataForm.ExerciseAnswer = [];\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // ON CHANGE IS CORRECT\n\n\n  const onChange_isCorrect = (e, AnswerID) => {\n    let checked = e.target.checked; // Tìm vị trí sau đó gán correct vào\n\n    let AnswerIndex = questionDataForm.ExerciseAnswer.findIndex(item => item.ID == AnswerID);\n    questionDataForm.ExerciseAnswer[AnswerIndex].isTrue = checked;\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // ON CHANGE TEXT\n\n\n  const onChange_text = (e, AnswerID) => {\n    let text = e.target.value;\n    let AnswerIndex = questionDataForm.ExerciseAnswer.findIndex(item => item.ID == AnswerID);\n    questionDataForm.ExerciseAnswer[AnswerIndex].AnswerContent = text;\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // HANLDE ADD ANSWER\n\n\n  const handleAddAnswer = () => {\n    AnsID++;\n    questionDataForm.ExerciseAnswer.push({\n      ID: AnsID,\n      AnswerContent: '',\n      isTrue: false,\n      Enable: true,\n      isAdd: true\n    });\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // HANDLE DELETE ANSWER ITEM\n\n\n  const deleteAnswerItem = async AnswerID => {\n    let AnswerIndex = questionDataForm.ExerciseAnswer.findIndex(item => item.ID == AnswerID);\n\n    if (questionDataForm.ExerciseAnswer[AnswerIndex].isAdd) {\n      questionDataForm.ExerciseAnswer.splice(AnswerIndex, 1);\n    } else {\n      questionDataForm.ExerciseAnswer[AnswerIndex].Enable = false;\n    }\n\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // SUBMIT FORM\n\n\n  const handleSubmitQuestion = async () => {\n    console.log('DATA SUBMIT IN FORM: ', questionDataForm);\n    let res = null;\n\n    try {\n      if (questionDataForm.ID) {\n        let cloneData = JSON.parse(JSON.stringify(questionDataForm));\n        cloneData.ExerciseAnswer.forEach((item, index) => {\n          if (item.isAdd) {\n            delete item.ID;\n          }\n        });\n        res = await exerciseApi.update(cloneData);\n      } else {\n        res = await exerciseApi.add(questionDataForm);\n      }\n\n      if (res.status == 200) {\n        changeIsSubmit(questionDataForm.ID ? questionDataForm : res.data.data);\n        showNoti('success', `${questionDataForm.ID ? 'Cập nhật' : 'Thêm'} Thành công`);\n\n        if (!questionDataForm.ID) {\n          resetForm();\n        }\n\n        setIsResetEditor(true);\n        setTimeout(() => {\n          setIsResetEditor(false);\n        }, 500);\n      }\n    } catch (error) {}\n  }; // Return alphabet\n\n\n  const returnAlphabet = AnsID => {\n    let char = '';\n    let cloneListAnswer = questionDataForm.ExerciseAnswer.filter(item => item.Enable !== false);\n    let indexAnswer = cloneListAnswer.findIndex(item => item.ID == AnsID);\n    char = listAlphabet[indexAnswer];\n    return char;\n  };\n\n  useEffect(() => {\n    isSubmit && handleSubmitQuestion();\n  }, [isSubmit]);\n  useEffect(() => {\n    if (visible) {\n      if (!questionData.ID) {\n        questionData.ExerciseAnswer = [];\n      }\n\n      setQuestionDataForm(_objectSpread({}, questionData));\n    } else {\n      setQuestionDataForm(null);\n      setLoadAtFirst(true);\n    }\n  }, [visible]);\n  useEffect(() => {\n    if (questionDataForm) {\n      if (!loadAtFirst) {\n        changeData && changeData();\n      }\n\n      setLoadAtFirst(false);\n    }\n  }, [questionDataForm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-create-question\",\n    children: visible && questionDataForm && /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      layout: \"vertical\",\n      onFinish: onSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"Question\",\n              label: \"C\\xE2u h\\u1ECFi\",\n              children: /*#__PURE__*/_jsxDEV(EditorSimple, {\n                isTranslate: true,\n                handleChange: value => getDataEditor(value),\n                isReset: isResetEditor,\n                questionContent: questionDataForm === null || questionDataForm === void 0 ? void 0 : questionDataForm.Content,\n                questionData: questionDataForm\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              label: \"File nghe\",\n              children: /*#__PURE__*/_jsxDEV(UploadAudio, {\n                getFile: file => {\n                  questionDataForm.LinkAudio = file;\n                  setQuestionDataForm(_objectSpread({}, questionDataForm));\n                },\n                valueFile: questionDataForm === null || questionDataForm === void 0 ? void 0 : questionDataForm.LinkAudio\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"style-label\",\n              children: \"\\u0110\\xE1p \\xE1n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Th\\xEAm \\u0111\\xE1p \\xE1n\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn-add-answer\",\n                onClick: handleAddAnswer,\n                children: /*#__PURE__*/_jsxDEV(Plus, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 8\n          }, this), questionData === null || questionData === void 0 ? void 0 : (_questionData$Exercis = questionData.ExerciseAnswer) === null || _questionData$Exercis === void 0 ? void 0 : _questionData$Exercis.map((item, index) => item.Enable && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6 col-12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row-ans\",\n              children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: item.isTrue,\n                onChange: e => onChange_isCorrect(e, item.ID)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  placeholder: returnAlphabet(item.ID),\n                  value: item.AnswerContent,\n                  className: \"style-input\",\n                  onChange: e => onChange_text(e, item.ID)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 14\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-ans\",\n                onClick: () => deleteAnswerItem(item.ID),\n                children: /*#__PURE__*/_jsxDEV(CloseOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 14\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 12\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 11\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 7\n        }, this), !(isGroup !== null && isGroup !== void 0 && isGroup.status) && /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Gi\\u1EA3i th\\xEDch \\u0111\\xE1p \\xE1n\",\n          name: \"DescribeAnswer\",\n          children: /*#__PURE__*/_jsxDEV(EditorSimple, {\n            handleChange: value => getDescribeAnswer(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 3\n  }, this);\n};\n\nexport default MultipleForm;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/QuestionBank/QuestionFormType/MultipleForm.tsx"],"names":["React","useEffect","useState","useForm","useWrap","Form","Input","Checkbox","Tooltip","exerciseApi","CloseOutlined","Plus","EditorSimple","UploadAudio","AnsID","listAlphabet","MultipleForm","props","isSubmit","questionData","changeIsSubmit","visible","changeData","isGroup","showNoti","reset","register","handleSubmit","control","setValue","formState","isSubmitting","errors","isSubmitted","form","questionDataForm","setQuestionDataForm","isResetEditor","setIsResetEditor","answerList","setAnswerList","ExerciseAnswer","loadAtFirst","setLoadAtFirst","console","log","onSubmit","data","e","getDataEditor","dataEditor","Content","getDescribeAnswer","DescribeAnswer","resetForm","onChange_isCorrect","AnswerID","checked","target","AnswerIndex","findIndex","item","ID","isTrue","onChange_text","text","value","AnswerContent","handleAddAnswer","push","Enable","isAdd","deleteAnswerItem","splice","handleSubmitQuestion","res","cloneData","JSON","parse","stringify","forEach","index","update","add","status","setTimeout","error","returnAlphabet","char","cloneListAnswer","filter","indexAnswer","file","LinkAudio","map"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,OAAhC,QAA+C,MAA/C;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AAEA,IAAIC,KAAK,GAAG,CAAZ;AAEA,MAAMC,YAAY,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,EAAiF,GAAjF,EAAsF,GAAtF,EAA2F,GAA3F,EAAgG,GAAhG,EAAqG,GAArG,CAArB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,cAA1B;AAA0CC,IAAAA,OAA1C;AAAmDC,IAAAA,UAAnD;AAA+DC,IAAAA;AAA/D,MAA2EN,KAAjF;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAepB,OAAO,EAA5B;AACA,QAAM;AACLqB,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,YAHK;AAILC,IAAAA,OAJK;AAKLC,IAAAA,QALK;AAMLC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA,MAAhB;AAAwBC,MAAAA;AAAxB;AANN,MAOF9B,OAAO,EAPX;AAQA,QAAM,CAAC+B,IAAD,IAAS7B,IAAI,CAACF,OAAL,EAAf;AACA,QAAM;AAAA,OAACgC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0ClC,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM;AAAA,OAACmC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCpC,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAA,OAACqC,UAAD;AAAA,OAAaC;AAAb,MAA8BtC,QAAQ,CAACiB,YAAY,CAACsB,cAAd,CAA5C;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCzC,QAAQ,CAAC,IAAD,CAA9C;AAEA0C,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCV,gBAAlC,EAjB+B,CAmB/B;;AACA,QAAMW,QAAQ,GAAGnB,YAAY,CAAC,CAACoB,IAAD,EAAYC,CAAZ,KAAkB;AAC/CJ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,IAA7B;AACA,GAF4B,CAA7B,CApB+B,CAwB/B;;AACA,QAAME,aAAa,GAAIC,UAAD,IAAgB;AACrC,QAAIf,gBAAJ,EAAsB;AACrBA,MAAAA,gBAAgB,CAACgB,OAAjB,GAA2BD,UAA3B;AACA;;AACDd,IAAAA,mBAAmB,mBAAMD,gBAAN,EAAnB;AACA,GALD;;AAOA,QAAMiB,iBAAiB,GAAIF,UAAD,IAAgB;AACzC,QAAIf,gBAAJ,EAAsB;AACrBA,MAAAA,gBAAgB,CAACkB,cAAjB,GAAkCH,UAAlC;AACA;;AACDd,IAAAA,mBAAmB,mBAAMD,gBAAN,EAAnB;AACA,GALD,CAhC+B,CAuC/B;;;AACA,QAAMmB,SAAS,GAAG,MAAM;AACvBnB,IAAAA,gBAAgB,CAACgB,OAAjB,GAA2B,EAA3B;AACAhB,IAAAA,gBAAgB,CAACM,cAAjB,GAAkC,EAAlC;AACAL,IAAAA,mBAAmB,mBAAMD,gBAAN,EAAnB;AACA,GAJD,CAxC+B,CA8C/B;;;AACA,QAAMoB,kBAAkB,GAAG,CAACP,CAAD,EAAIQ,QAAJ,KAAiB;AAC3C,QAAIC,OAAO,GAAGT,CAAC,CAACU,MAAF,CAASD,OAAvB,CAD2C,CAG3C;;AACA,QAAIE,WAAW,GAAGxB,gBAAgB,CAACM,cAAjB,CAAgCmB,SAAhC,CAA2CC,IAAD,IAAUA,IAAI,CAACC,EAAL,IAAWN,QAA/D,CAAlB;AACArB,IAAAA,gBAAgB,CAACM,cAAjB,CAAgCkB,WAAhC,EAA6CI,MAA7C,GAAsDN,OAAtD;AACArB,IAAAA,mBAAmB,mBAAMD,gBAAN,EAAnB;AACA,GAPD,CA/C+B,CAwD/B;;;AACA,QAAM6B,aAAa,GAAG,CAAChB,CAAD,EAAIQ,QAAJ,KAAiB;AACtC,QAAIS,IAAI,GAAGjB,CAAC,CAACU,MAAF,CAASQ,KAApB;AACA,QAAIP,WAAW,GAAGxB,gBAAgB,CAACM,cAAjB,CAAgCmB,SAAhC,CAA2CC,IAAD,IAAUA,IAAI,CAACC,EAAL,IAAWN,QAA/D,CAAlB;AACArB,IAAAA,gBAAgB,CAACM,cAAjB,CAAgCkB,WAAhC,EAA6CQ,aAA7C,GAA6DF,IAA7D;AACA7B,IAAAA,mBAAmB,mBAAMD,gBAAN,EAAnB;AACA,GALD,CAzD+B,CAgE/B;;;AACA,QAAMiC,eAAe,GAAG,MAAM;AAC7BtD,IAAAA,KAAK;AACLqB,IAAAA,gBAAgB,CAACM,cAAjB,CAAgC4B,IAAhC,CAAqC;AACpCP,MAAAA,EAAE,EAAEhD,KADgC;AAEpCqD,MAAAA,aAAa,EAAE,EAFqB;AAGpCJ,MAAAA,MAAM,EAAE,KAH4B;AAIpCO,MAAAA,MAAM,EAAE,IAJ4B;AAKpCC,MAAAA,KAAK,EAAE;AAL6B,KAArC;AAOAnC,IAAAA,mBAAmB,mBAAMD,gBAAN,EAAnB;AACA,GAVD,CAjE+B,CA6E/B;;;AACA,QAAMqC,gBAAgB,GAAG,MAAOhB,QAAP,IAAoB;AAC5C,QAAIG,WAAW,GAAGxB,gBAAgB,CAACM,cAAjB,CAAgCmB,SAAhC,CAA2CC,IAAD,IAAUA,IAAI,CAACC,EAAL,IAAWN,QAA/D,CAAlB;;AAEA,QAAIrB,gBAAgB,CAACM,cAAjB,CAAgCkB,WAAhC,EAA6CY,KAAjD,EAAwD;AACvDpC,MAAAA,gBAAgB,CAACM,cAAjB,CAAgCgC,MAAhC,CAAuCd,WAAvC,EAAoD,CAApD;AACA,KAFD,MAEO;AACNxB,MAAAA,gBAAgB,CAACM,cAAjB,CAAgCkB,WAAhC,EAA6CW,MAA7C,GAAsD,KAAtD;AACA;;AAEDlC,IAAAA,mBAAmB,mBAAMD,gBAAN,EAAnB;AACA,GAVD,CA9E+B,CA0F/B;;;AACA,QAAMuC,oBAAoB,GAAG,YAAY;AACxC9B,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCV,gBAArC;AACA,QAAIwC,GAAG,GAAG,IAAV;;AAEA,QAAI;AACH,UAAIxC,gBAAgB,CAAC2B,EAArB,EAAyB;AACxB,YAAIc,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe5C,gBAAf,CAAX,CAAhB;AAEAyC,QAAAA,SAAS,CAACnC,cAAV,CAAyBuC,OAAzB,CAAiC,CAACnB,IAAD,EAAOoB,KAAP,KAAiB;AACjD,cAAIpB,IAAI,CAACU,KAAT,EAAgB;AACf,mBAAOV,IAAI,CAACC,EAAZ;AACA;AACD,SAJD;AAKAa,QAAAA,GAAG,GAAG,MAAMlE,WAAW,CAACyE,MAAZ,CAAmBN,SAAnB,CAAZ;AACA,OATD,MASO;AACND,QAAAA,GAAG,GAAG,MAAMlE,WAAW,CAAC0E,GAAZ,CAAgBhD,gBAAhB,CAAZ;AACA;;AACD,UAAIwC,GAAG,CAACS,MAAJ,IAAc,GAAlB,EAAuB;AACtBhE,QAAAA,cAAc,CAACe,gBAAgB,CAAC2B,EAAjB,GAAsB3B,gBAAtB,GAAyCwC,GAAG,CAAC5B,IAAJ,CAASA,IAAnD,CAAd;AACAvB,QAAAA,QAAQ,CAAC,SAAD,EAAa,GAAEW,gBAAgB,CAAC2B,EAAjB,GAAsB,UAAtB,GAAmC,MAAO,aAAzD,CAAR;;AACA,YAAI,CAAC3B,gBAAgB,CAAC2B,EAAtB,EAA0B;AACzBR,UAAAA,SAAS;AACT;;AACDhB,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA+C,QAAAA,UAAU,CAAC,MAAM;AAChB/C,UAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA,SAFS,EAEP,GAFO,CAAV;AAGA;AACD,KAzBD,CAyBE,OAAOgD,KAAP,EAAc,CAAE;AAClB,GA9BD,CA3F+B,CA2H/B;;;AACA,QAAMC,cAAc,GAAIzE,KAAD,IAAW;AACjC,QAAI0E,IAAI,GAAG,EAAX;AACA,QAAIC,eAAe,GAAGtD,gBAAgB,CAACM,cAAjB,CAAgCiD,MAAhC,CAAwC7B,IAAD,IAAUA,IAAI,CAACS,MAAL,KAAgB,KAAjE,CAAtB;AACA,QAAIqB,WAAW,GAAGF,eAAe,CAAC7B,SAAhB,CAA2BC,IAAD,IAAUA,IAAI,CAACC,EAAL,IAAWhD,KAA/C,CAAlB;AACA0E,IAAAA,IAAI,GAAGzE,YAAY,CAAC4E,WAAD,CAAnB;AAEA,WAAOH,IAAP;AACA,GAPD;;AASAvF,EAAAA,SAAS,CAAC,MAAM;AACfiB,IAAAA,QAAQ,IAAIwD,oBAAoB,EAAhC;AACA,GAFQ,EAEN,CAACxD,QAAD,CAFM,CAAT;AAIAjB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIoB,OAAJ,EAAa;AACZ,UAAI,CAACF,YAAY,CAAC2C,EAAlB,EAAsB;AACrB3C,QAAAA,YAAY,CAACsB,cAAb,GAA8B,EAA9B;AACA;;AACDL,MAAAA,mBAAmB,mBAAMjB,YAAN,EAAnB;AACA,KALD,MAKO;AACNiB,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAO,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA;AACD,GAVQ,EAUN,CAACtB,OAAD,CAVM,CAAT;AAYApB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIkC,gBAAJ,EAAsB;AACrB,UAAI,CAACO,WAAL,EAAkB;AACjBpB,QAAAA,UAAU,IAAIA,UAAU,EAAxB;AACA;;AACDqB,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA;AACD,GAPQ,EAON,CAACR,gBAAD,CAPM,CAAT;AASA,sBACC;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,cACEd,OAAO,IAAIc,gBAAX,iBACA,QAAC,IAAD;AAAM,MAAA,IAAI,EAAED,IAAZ;AAAkB,MAAA,MAAM,EAAC,UAAzB;AAAoC,MAAA,QAAQ,EAAEY,QAA9C;AAAA,6BACC;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACC;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACC;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,mCACC,QAAC,IAAD,CAAM,IAAN;AAAW,cAAA,IAAI,EAAC,UAAhB;AAA2B,cAAA,KAAK,EAAC,iBAAjC;AAAA,qCACC,QAAC,YAAD;AACC,gBAAA,WAAW,EAAE,IADd;AAEC,gBAAA,YAAY,EAAGoB,KAAD,IAAWjB,aAAa,CAACiB,KAAD,CAFvC;AAGC,gBAAA,OAAO,EAAE7B,aAHV;AAIC,gBAAA,eAAe,EAAEF,gBAAF,aAAEA,gBAAF,uBAAEA,gBAAgB,CAAEgB,OAJpC;AAKC,gBAAA,YAAY,EAAEhB;AALf;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBADD,eAYC;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,mCACC,QAAC,IAAD,CAAM,IAAN;AAAW,cAAA,KAAK,EAAC,WAAjB;AAAA,qCACC,QAAC,WAAD;AACC,gBAAA,OAAO,EAAGyD,IAAD,IAAU;AAClBzD,kBAAAA,gBAAgB,CAAC0D,SAAjB,GAA6BD,IAA7B;AACAxD,kBAAAA,mBAAmB,mBAAMD,gBAAN,EAAnB;AACA,iBAJF;AAKC,gBAAA,SAAS,EAAEA,gBAAF,aAAEA,gBAAF,uBAAEA,gBAAgB,CAAE0D;AAL9B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBAZD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAyBC;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACC;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACC;AAAG,cAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC,QAAC,OAAD;AAAS,cAAA,KAAK,EAAC,2BAAf;AAAA,qCACC;AAAQ,gBAAA,SAAS,EAAC,gBAAlB;AAAmC,gBAAA,OAAO,EAAEzB,eAA5C;AAAA,uCACC,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,EASEjD,YATF,aASEA,YATF,gDASEA,YAAY,CAAEsB,cAThB,0DASE,sBAA8BqD,GAA9B,CACA,CAACjC,IAAD,EAAOoB,KAAP,KACCpB,IAAI,CAACS,MAAL,iBACC;AAAK,YAAA,SAAS,EAAC,iBAAf;AAAA,mCACC;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCACC,QAAC,QAAD;AAAU,gBAAA,OAAO,EAAET,IAAI,CAACE,MAAxB;AAAgC,gBAAA,QAAQ,EAAGf,CAAD,IAAOO,kBAAkB,CAACP,CAAD,EAAIa,IAAI,CAACC,EAAT;AAAnE;AAAA;AAAA;AAAA;AAAA,sBADD,eAEC,QAAC,IAAD,CAAM,IAAN;AAAA,uCACC,QAAC,KAAD;AACC,kBAAA,WAAW,EAAEyB,cAAc,CAAC1B,IAAI,CAACC,EAAN,CAD5B;AAEC,kBAAA,KAAK,EAAED,IAAI,CAACM,aAFb;AAGC,kBAAA,SAAS,EAAC,aAHX;AAIC,kBAAA,QAAQ,EAAGnB,CAAD,IAAOgB,aAAa,CAAChB,CAAD,EAAIa,IAAI,CAACC,EAAT;AAJ/B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,sBAFD,eAUC;AAAQ,gBAAA,SAAS,EAAC,YAAlB;AAA+B,gBAAA,OAAO,EAAE,MAAMU,gBAAgB,CAACX,IAAI,CAACC,EAAN,CAA9D;AAAA,uCACC,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,sBAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD,aAAsCmB,KAAtC;AAAA;AAAA;AAAA;AAAA,kBAHF,CATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzBD,EAwDE,EAAC1D,OAAD,aAACA,OAAD,eAACA,OAAO,CAAE6D,MAAV,kBACA,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,KAAK,EAAC,sCAAjB;AAAqC,UAAA,IAAI,EAAC,gBAA1C;AAAA,iCACC,QAAC,YAAD;AAAc,YAAA,YAAY,EAAGlB,KAAD,IAAgBd,iBAAiB,CAACc,KAAD;AAA7D;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAzDF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADD;AAsEA,CApOD;;AAsOA,eAAelD,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useWrap } from '~/context/wrap'\r\nimport { Form, Input, Checkbox, Tooltip } from 'antd'\r\nimport { exerciseApi } from '~/apiBase/'\r\nimport { CloseOutlined } from '@ant-design/icons'\r\nimport { Plus } from 'react-feather'\r\nimport EditorSimple from '~/components/Elements/EditorSimple'\r\nimport UploadAudio from '~/components/Elements/UploadAudio'\r\n\r\nlet AnsID = 0\r\n\r\nconst listAlphabet = ['A', 'B', 'C', 'D', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V']\r\n\r\nconst MultipleForm = (props) => {\r\n\tconst { isSubmit, questionData, changeIsSubmit, visible, changeData, isGroup } = props\r\n\tconst { showNoti } = useWrap()\r\n\tconst {\r\n\t\treset,\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\tcontrol,\r\n\t\tsetValue,\r\n\t\tformState: { isSubmitting, errors, isSubmitted }\r\n\t} = useForm()\r\n\tconst [form] = Form.useForm()\r\n\tconst [questionDataForm, setQuestionDataForm] = useState(null)\r\n\tconst [isResetEditor, setIsResetEditor] = useState(false)\r\n\tconst [answerList, setAnswerList] = useState(questionData.ExerciseAnswer)\r\n\tconst [loadAtFirst, setLoadAtFirst] = useState(true)\r\n\r\n\tconsole.log('Question in form: ', questionDataForm)\r\n\r\n\t// SUBMI FORM\r\n\tconst onSubmit = handleSubmit((data: any, e) => {\r\n\t\tconsole.log('DATA SUBMIT: ', data)\r\n\t})\r\n\r\n\t// GET VALUE IN EDITOR\r\n\tconst getDataEditor = (dataEditor) => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tquestionDataForm.Content = dataEditor\r\n\t\t}\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\tconst getDescribeAnswer = (dataEditor) => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tquestionDataForm.DescribeAnswer = dataEditor\r\n\t\t}\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// Reset value in form\r\n\tconst resetForm = () => {\r\n\t\tquestionDataForm.Content = ''\r\n\t\tquestionDataForm.ExerciseAnswer = []\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// ON CHANGE IS CORRECT\r\n\tconst onChange_isCorrect = (e, AnswerID) => {\r\n\t\tlet checked = e.target.checked\r\n\r\n\t\t// Tìm vị trí sau đó gán correct vào\r\n\t\tlet AnswerIndex = questionDataForm.ExerciseAnswer.findIndex((item) => item.ID == AnswerID)\r\n\t\tquestionDataForm.ExerciseAnswer[AnswerIndex].isTrue = checked\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// ON CHANGE TEXT\r\n\tconst onChange_text = (e, AnswerID) => {\r\n\t\tlet text = e.target.value\r\n\t\tlet AnswerIndex = questionDataForm.ExerciseAnswer.findIndex((item) => item.ID == AnswerID)\r\n\t\tquestionDataForm.ExerciseAnswer[AnswerIndex].AnswerContent = text\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// HANLDE ADD ANSWER\r\n\tconst handleAddAnswer = () => {\r\n\t\tAnsID++\r\n\t\tquestionDataForm.ExerciseAnswer.push({\r\n\t\t\tID: AnsID,\r\n\t\t\tAnswerContent: '',\r\n\t\t\tisTrue: false,\r\n\t\t\tEnable: true,\r\n\t\t\tisAdd: true\r\n\t\t})\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// HANDLE DELETE ANSWER ITEM\r\n\tconst deleteAnswerItem = async (AnswerID) => {\r\n\t\tlet AnswerIndex = questionDataForm.ExerciseAnswer.findIndex((item) => item.ID == AnswerID)\r\n\r\n\t\tif (questionDataForm.ExerciseAnswer[AnswerIndex].isAdd) {\r\n\t\t\tquestionDataForm.ExerciseAnswer.splice(AnswerIndex, 1)\r\n\t\t} else {\r\n\t\t\tquestionDataForm.ExerciseAnswer[AnswerIndex].Enable = false\r\n\t\t}\r\n\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// SUBMIT FORM\r\n\tconst handleSubmitQuestion = async () => {\r\n\t\tconsole.log('DATA SUBMIT IN FORM: ', questionDataForm)\r\n\t\tlet res = null\r\n\r\n\t\ttry {\r\n\t\t\tif (questionDataForm.ID) {\r\n\t\t\t\tlet cloneData = JSON.parse(JSON.stringify(questionDataForm))\r\n\r\n\t\t\t\tcloneData.ExerciseAnswer.forEach((item, index) => {\r\n\t\t\t\t\tif (item.isAdd) {\r\n\t\t\t\t\t\tdelete item.ID\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tres = await exerciseApi.update(cloneData)\r\n\t\t\t} else {\r\n\t\t\t\tres = await exerciseApi.add(questionDataForm)\r\n\t\t\t}\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tchangeIsSubmit(questionDataForm.ID ? questionDataForm : res.data.data)\r\n\t\t\t\tshowNoti('success', `${questionDataForm.ID ? 'Cập nhật' : 'Thêm'} Thành công`)\r\n\t\t\t\tif (!questionDataForm.ID) {\r\n\t\t\t\t\tresetForm()\r\n\t\t\t\t}\r\n\t\t\t\tsetIsResetEditor(true)\r\n\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tsetIsResetEditor(false)\r\n\t\t\t\t}, 500)\r\n\t\t\t}\r\n\t\t} catch (error) {}\r\n\t}\r\n\r\n\t// Return alphabet\r\n\tconst returnAlphabet = (AnsID) => {\r\n\t\tlet char = ''\r\n\t\tlet cloneListAnswer = questionDataForm.ExerciseAnswer.filter((item) => item.Enable !== false)\r\n\t\tlet indexAnswer = cloneListAnswer.findIndex((item) => item.ID == AnsID)\r\n\t\tchar = listAlphabet[indexAnswer]\r\n\r\n\t\treturn char\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tisSubmit && handleSubmitQuestion()\r\n\t}, [isSubmit])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (visible) {\r\n\t\t\tif (!questionData.ID) {\r\n\t\t\t\tquestionData.ExerciseAnswer = []\r\n\t\t\t}\r\n\t\t\tsetQuestionDataForm({ ...questionData })\r\n\t\t} else {\r\n\t\t\tsetQuestionDataForm(null)\r\n\t\t\tsetLoadAtFirst(true)\r\n\t\t}\r\n\t}, [visible])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tif (!loadAtFirst) {\r\n\t\t\t\tchangeData && changeData()\r\n\t\t\t}\r\n\t\t\tsetLoadAtFirst(false)\r\n\t\t}\r\n\t}, [questionDataForm])\r\n\r\n\treturn (\r\n\t\t<div className=\"form-create-question\">\r\n\t\t\t{visible && questionDataForm && (\r\n\t\t\t\t<Form form={form} layout=\"vertical\" onFinish={onSubmit}>\r\n\t\t\t\t\t<div className=\"container-fluid\">\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<Form.Item name=\"Question\" label=\"Câu hỏi\">\r\n\t\t\t\t\t\t\t\t\t<EditorSimple\r\n\t\t\t\t\t\t\t\t\t\tisTranslate={true}\r\n\t\t\t\t\t\t\t\t\t\thandleChange={(value) => getDataEditor(value)}\r\n\t\t\t\t\t\t\t\t\t\tisReset={isResetEditor}\r\n\t\t\t\t\t\t\t\t\t\tquestionContent={questionDataForm?.Content}\r\n\t\t\t\t\t\t\t\t\t\tquestionData={questionDataForm}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<Form.Item label=\"File nghe\">\r\n\t\t\t\t\t\t\t\t\t<UploadAudio\r\n\t\t\t\t\t\t\t\t\t\tgetFile={(file) => {\r\n\t\t\t\t\t\t\t\t\t\t\tquestionDataForm.LinkAudio = file\r\n\t\t\t\t\t\t\t\t\t\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tvalueFile={questionDataForm?.LinkAudio}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12 mb-4\">\r\n\t\t\t\t\t\t\t\t<p className=\"style-label\">Đáp án</p>\r\n\t\t\t\t\t\t\t\t<Tooltip title=\"Thêm đáp án\">\r\n\t\t\t\t\t\t\t\t\t<button className=\"btn-add-answer\" onClick={handleAddAnswer}>\r\n\t\t\t\t\t\t\t\t\t\t<Plus />\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t{questionData?.ExerciseAnswer?.map(\r\n\t\t\t\t\t\t\t\t(item, index) =>\r\n\t\t\t\t\t\t\t\t\titem.Enable && (\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-6 col-12\" key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"row-ans\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox checked={item.isTrue} onChange={(e) => onChange_isCorrect(e, item.ID)}></Checkbox>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder={returnAlphabet(item.ID)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={item.AnswerContent}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"style-input\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => onChange_text(e, item.ID)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t></Input>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"delete-ans\" onClick={() => deleteAnswerItem(item.ID)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CloseOutlined />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{!isGroup?.status && (\r\n\t\t\t\t\t\t\t<Form.Item label=\"Giải thích đáp án\" name=\"DescribeAnswer\">\r\n\t\t\t\t\t\t\t\t<EditorSimple handleChange={(value: any) => getDescribeAnswer(value)} />\r\n\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Form>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MultipleForm\r\n"]},"metadata":{},"sourceType":"module"}