{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\Customer\\\\Service\\\\Teacher\\\\ServiceTestTeacher.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FormOutlined } from '@ant-design/icons';\nimport { Tooltip } from 'antd';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport router from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { branchApi, examAppointmentResultApi, examTopicApi, studentApi, teacherApi, testCustomerApi } from '~/apiBase';\nimport FilterBase from '~/components/Elements/FilterBase/FilterBase';\nimport NotiModal from '~/components/Elements/NotiModal/NotiModal';\nimport SortBox from '~/components/Elements/SortBox';\nimport ExpandTable from '~/components/ExpandTable';\nimport ExamAppointmentPoint from '~/components/Global/ExamAppointment/ExamAppointmentPoint';\nimport LayoutBase from '~/components/LayoutBase';\nimport FilterColumn from '~/components/Tables/FilterColumn';\nimport { useWrap } from '~/context/wrap';\nlet pageIndex = 1;\nlet listFieldSearch = {\n  pageIndex: 1,\n  FullNameUnicode: null\n};\nlet listFieldFilter = {\n  pageIndex: 1,\n  BranchID: null,\n  // lọc\n  UserInformationID: null,\n  Status: null,\n  AppointmentDate: null\n};\nconst dataOption = [{\n  dataSort: {\n    sort: 2,\n    sortType: true\n  },\n  text: 'Tên A - Z '\n}, {\n  dataSort: {\n    sort: 2,\n    sortType: false\n  },\n  text: 'Tên Z - A'\n}, {\n  dataSort: {\n    sort: 0,\n    sortType: true\n  },\n  text: 'Ngày hẹn A - Z'\n}, {\n  dataSort: {\n    sort: 0,\n    sortType: false\n  },\n  text: 'Ngày hẹn Z - A'\n}]; // -- FOR DIFFERENT VIEW --\n\nconst listApi = [{\n  api: branchApi,\n  text: 'Trung tâm',\n  name: 'Branch'\n}, {\n  api: studentApi,\n  text: 'Học viên',\n  name: 'Student'\n}, {\n  api: teacherApi,\n  text: 'Giáo viên',\n  name: 'Teacher'\n}];\nexport default function ServiceTestTeacher(props) {\n  const {\n    0: listDataForm,\n    1: setListDataForm\n  } = useState({\n    Branch: [],\n    Student: [],\n    Teacher: []\n  });\n  const {\n    0: dataExam,\n    1: setDataExam\n  } = useState([]);\n  const {\n    0: currentDay,\n    1: setCurrentDate\n  } = useState(null);\n  const {\n    0: isOpenNoti,\n    1: setisOpenNoti\n  } = useState(false); // ------ BASE USESTATE TABLE -------\n\n  const {\n    0: dataSource,\n    1: setDataSource\n  } = useState([]);\n  const {\n    showNoti,\n    pageSize,\n    userInformation\n  } = useWrap();\n  const listTodoApi = {\n    pageSize: pageSize,\n    pageIndex: pageIndex,\n    sort: null,\n    sortType: null,\n    TeacherID: null\n  };\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    0: indexRow,\n    1: setIndexRow\n  } = useState(null);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: todoApi,\n    1: setTodoApi\n  } = useState(listTodoApi); // ------ LIST FILTER -------\n\n  const {\n    0: dataFilter,\n    1: setDataFilter\n  } = useState([{\n    name: 'BranchID',\n    title: 'Trung tâm',\n    col: 'col-md-12 col-12',\n    type: 'select',\n    optionList: null,\n    // Gọi api xong trả data vào đây\n    value: null\n  }, {\n    name: 'Status',\n    title: 'Trạng thái',\n    col: 'col-md-12 col-12',\n    type: 'select',\n    optionList: [{\n      title: 'Chưa test',\n      value: 0\n    }, {\n      title: 'Đang chấm bài test',\n      value: 1\n    }, {\n      title: 'Chưa đăng kí khóa học',\n      value: 2\n    }, {\n      title: 'Đã đăng kí khóa học',\n      value: 3\n    }, {\n      title: 'Đã hủy hẹn test',\n      value: 4\n    }],\n    value: null\n  }, {\n    name: 'AppointmentDate',\n    title: 'Ngày hẹn test',\n    col: 'col-md-12 col-12',\n    type: 'date-single',\n    value: null\n  }, {\n    name: 'date-range',\n    title: 'Từ - đến',\n    col: 'col-12',\n    type: 'date-range',\n    value: null\n  }]);\n\n  const makeNewData = (data, name) => {\n    let newData = null;\n\n    switch (name) {\n      case 'Branch':\n        newData = data.map(item => ({\n          title: item.BranchName,\n          value: item.ID\n        }));\n        setDataFunc('BranchID', newData);\n        break;\n\n      case 'Student':\n        newData = data.map(item => ({\n          title: item.FullNameUnicode,\n          value: item.UserInformationID,\n          counselorsName: item.CounselorsName == null ? '' : item.CounselorsName\n        }));\n        break;\n\n      case 'Teacher':\n        newData = data.map(item => ({\n          title: item.FullNameUnicode,\n          value: item.UserInformationID\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return newData;\n  };\n\n  const getDataTolist = (data, name) => {\n    let newData = makeNewData(data, name);\n    Object.keys(listDataForm).forEach(function (key) {\n      if (key == name) {\n        listDataForm[key] = newData;\n      }\n    });\n    setListDataForm(_objectSpread({}, listDataForm));\n  }; // ----------- GET DATA EXAM ------------\n\n\n  const getDataExam = async () => {\n    try {\n      let res = await examTopicApi.getAll({\n        selectAll: true,\n        type: 1\n      });\n\n      if (res.status === 200) {\n        setDataExam(res.data.data);\n      }\n    } catch (error) {\n      console.log('Error Exam: ', error.message);\n    }\n  }; // ----------- GET DATA SOURCE ---------------\n\n\n  const getDataAll = arrApi => {\n    arrApi.forEach((item, index) => {\n      ;\n\n      (async () => {\n        let res = null;\n\n        try {\n          if (item.name == 'Counselors') {\n            res = await item.api.getAll({\n              pageIndex: 1,\n              pageSize: 99999,\n              RoleID: 6,\n              StatusID: 0,\n              Enable: true\n            });\n          } else {\n            res = await item.api.getAll({\n              pageIndex: 1,\n              pageSize: 99999,\n              Enable: true\n            });\n          }\n\n          res.status == 200 && getDataTolist(res.data.data, item.name);\n          res.status == 204 && showNoti('danger', item.text + ' Không có dữ liệu');\n        } catch (error) {\n          showNoti('danger', error.message);\n        } finally {}\n      })();\n    });\n  }; // GET DATA SOURCE\n\n\n  const getDataSource = async () => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      let res = await examAppointmentResultApi.getAll(todoApi);\n\n      if (res.status == 200) {\n        setDataSource(res.data.data);\n        setTotalPage(res.data.totalRow); //@ts-ignore\n        // setTestDate(moment(res.data.data.AppointmentDate).format('DD/MM/YYYY HH:mm'));\n      }\n\n      res.status == 204 && setDataSource([]);\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  }; // ------ SET DATA FUN ------\n\n\n  const setDataFunc = (name, data) => {\n    dataFilter.every((item, index) => {\n      if (item.name == name) {\n        item.optionList = data;\n        return false;\n      }\n\n      return true;\n    });\n    setDataFilter([...dataFilter]);\n  }; // ---------------- AFTER SUBMIT -----------------\n\n\n  const afterPost = mes => {\n    // showNoti(\"success\", mes);\n    setTodoApi(_objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1\n    }));\n    setCurrentPage(1);\n  }; // ----------------- ON SUBMIT --------------------\n\n\n  const _onSubmit = async dataSubmit => {\n    // console.log('Data submit: ', dataSubmit);\n    // console.log('List data form: ', listDataForm);\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res = null;\n\n    try {\n      if (dataSubmit.ID) {\n        res = await testCustomerApi.update(dataSubmit);\n\n        if (res.status == 200) {\n          let newDataSource = [...dataSource];\n          newDataSource.splice(indexRow, 1, _objectSpread(_objectSpread({}, dataSubmit), {}, {\n            FullNameUnicode: listDataForm.Student.find(item => item.value == dataSubmit.UserInformationID).title,\n            BranchName: listDataForm.Branch.find(item => item.value == dataSubmit.BranchID).title,\n            TeacherName: listDataForm.Teacher.find(item => item.value == dataSubmit.TeacherID).title\n          }));\n          setDataSource(newDataSource);\n          showNoti('success', res.data.message);\n        }\n      } else {\n        var _res;\n\n        res = await testCustomerApi.add(dataSubmit);\n        ((_res = res) === null || _res === void 0 ? void 0 : _res.status) == 200 && afterPost(res.data.message);\n      }\n    } catch (error) {\n      console.log('error: ', error);\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  }; // -------------- HANDLE FILTER ------------------\n\n\n  const handleFilter = listFilter => {\n    let newListFilter = _objectSpread({}, listFieldFilter);\n\n    listFilter.forEach((item, index) => {\n      let key = item.name;\n      Object.keys(newListFilter).forEach(keyFilter => {\n        if (keyFilter == key) {\n          newListFilter[key] = item.value;\n        }\n      });\n    });\n    setTodoApi(_objectSpread(_objectSpread(_objectSpread({}, listTodoApi), newListFilter), {}, {\n      pageIndex: 1\n    }));\n  }; // --------------- HANDLE SORT ----------------------\n\n\n  const handleSort = async option => {\n    let newTodoApi = _objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1,\n      sort: option.title.sort,\n      sortType: option.title.sortType\n    });\n\n    setCurrentPage(1), setTodoApi(newTodoApi);\n  }; // ------------ ON SEARCH -----------------------\n\n\n  const checkField = (valueSearch, dataIndex) => {\n    let newList = _objectSpread({}, listFieldSearch);\n\n    Object.keys(newList).forEach(function (key) {\n      if (key != dataIndex) {\n        if (key != 'pageIndex') {\n          newList[key] = null;\n        }\n      } else {\n        newList[key] = valueSearch;\n      }\n    });\n    return newList;\n  };\n\n  const onSearch = (valueSearch, dataIndex) => {\n    let clearKey = checkField(valueSearch, dataIndex);\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), clearKey));\n  }; // HANDLE RESET\n\n\n  const resetListFieldSearch = () => {\n    Object.keys(listFieldSearch).forEach(function (key) {\n      if (key != 'pageIndex') {\n        listFieldSearch[key] = null;\n      }\n    });\n  };\n\n  const handleReset = () => {\n    setTodoApi(_objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1\n    }));\n    setCurrentPage(1), resetListFieldSearch();\n  }; // -------------- GET PAGE_NUMBER -----------------\n\n\n  const getPagination = pageNumber => {\n    pageIndex = pageNumber;\n    setCurrentPage(pageNumber);\n    console.log('Todoapi: ', todoApi);\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), {}, {\n      // ...listFieldSearch,\n      pageIndex: pageIndex\n    }));\n  }; // ============== USE EFFECT - FETCH DATA ===================\n\n\n  useEffect(() => {\n    if (userInformation) {\n      getDataSource();\n    }\n  }, [todoApi]);\n  useEffect(() => {\n    // getDataAll(listApi);\n    getDataExam(); // Get current date\n\n    let currentdate = new Date();\n    let datetime = currentdate.getDate() + '/' + (currentdate.getMonth() + 1) + '/' + currentdate.getFullYear() + ' ' + currentdate.getHours() + ':' + currentdate.getMinutes();\n    setCurrentDate(datetime);\n  }, []);\n  useEffect(() => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n\n    if (userInformation) {\n      setTodoApi(_objectSpread(_objectSpread({}, todoApi), {}, {\n        TeacherID: userInformation.UserInformationID\n      }));\n    }\n  }, [userInformation]);\n\n  const moveToTest = (e, data) => {\n    e.preventDefault();\n    let testDate = moment(data.AppointmentDate).format('DD/MM/YYYY') + ' ' + data.Time;\n    console.log('Test DAte: ', testDate);\n\n    if (currentDay < testDate) {\n      setisOpenNoti(true);\n    } else {\n      router.push('');\n    }\n  };\n\n  const expandedRowRender = record => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ExamAppointmentPoint, {\n        infoID: record.ExamAppointmentID,\n        userID: record.UserInformationID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 5\n      }, this)\n    }, void 0, false);\n  };\n\n  const columns = [_objectSpread({\n    title: 'Học viên',\n    dataIndex: 'FullNameUnicode',\n    render: a => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-primary\",\n      children: a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 19\n    }, this)\n  }, FilterColumn('FullNameUnicode', onSearch, handleReset, 'text')), {\n    width: 150,\n    title: 'Đề test',\n    dataIndex: 'ExamTopicName',\n    render: (text, data) => data.TeacherID === userInformation.UserInformationID && !data.isDone && /*#__PURE__*/_jsxDEV(Link, {\n      href: {\n        pathname: '/customer/service/service-test-teacher/detail/[slug]',\n        query: {\n          slug: `${data.ID}`,\n          teacherMarking: data.TeacherID,\n          packageResultID: data.ID,\n          type: 'test'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Ch\\u1EA5m b\\xE0i ngay\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"\",\n          className: \"font-weight-link\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 6\n    }, this)\n  }, {\n    title: 'Ngày hẹn',\n    dataIndex: 'AppointmentDate',\n    render: date => moment(date).format('DD/MM/YYYY')\n  }, {\n    width: 150,\n    title: 'Giờ hẹn',\n    dataIndex: 'Time'\n  }, {\n    title: 'Tư vấn viên',\n    dataIndex: 'CounselorsName'\n  }, {\n    title: 'Trạng thái',\n    dataIndex: 'isDone',\n    align: 'center',\n    filters: [{\n      text: 'Chưa chấm',\n      value: false\n    }, {\n      text: 'Đã chấm',\n      value: true\n    }],\n    onFilter: (value, record) => record.isDone === value,\n    render: type => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [type == true && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tag green\",\n        children: \"\\u0110\\xE3 ch\\u1EA5m xong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 23\n      }, this), type == false && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tag gray\",\n        children: \"Ch\\u01B0a ch\\u1EA5m xong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, {\n    render: data => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: data.TeacherID === userInformation.UserInformationID && /*#__PURE__*/_jsxDEV(Link, {\n        href: {\n          pathname: '/customer/service/service-test-teacher/detail/[slug]',\n          query: {\n            slug: `${data.ID}`,\n            teacherMarking: data.TeacherID,\n            packageResultID: data.ID,\n            type: 'test'\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: !data.isDone ? 'Chấm bài ngay' : 'Xem chi tiết',\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-icon edit\",\n            children: /*#__PURE__*/_jsxDEV(FormOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: userInformation && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NotiModal, {\n        isOpen: isOpenNoti,\n        isCancel: () => setisOpenNoti(false),\n        isOk: () => setisOpenNoti(false),\n        content: \"Ch\\u01B0a \\u0111\\u1EBFn gi\\u1EDD l\\xE0m \\u0111\\u1EC1 test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(ExpandTable, {\n        currentPage: currentPage,\n        totalPage: totalPage && totalPage,\n        getPagination: pageNumber => getPagination(pageNumber),\n        loading: isLoading,\n        addClass: \"basic-header\",\n        TitlePage: \"Ch\\u1EA5m b\\xE0i h\\u1EB9n test\" // TitleCard={\n        //   <StudentAdviseForm\n        //     listData={listDataForm}\n        //     isLoading={isLoading}\n        //     _onSubmit={(data: any) => _onSubmit(data)}\n        //   />\n        // }\n        ,\n        dataSource: dataSource,\n        columns: columns,\n        Extra: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"extra-table\",\n          children: [/*#__PURE__*/_jsxDEV(FilterBase, {\n            dataFilter: dataFilter,\n            handleFilter: listFilter => handleFilter(listFilter),\n            handleReset: handleReset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(SortBox, {\n            handleSort: value => handleSort(value),\n            dataOption: dataOption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 8\n        }, this),\n        expandable: {\n          expandedRowRender\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\nServiceTestTeacher.layout = LayoutBase;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/Customer/Service/Teacher/ServiceTestTeacher.tsx"],"names":["FormOutlined","Tooltip","moment","Link","router","React","useEffect","useState","branchApi","examAppointmentResultApi","examTopicApi","studentApi","teacherApi","testCustomerApi","FilterBase","NotiModal","SortBox","ExpandTable","ExamAppointmentPoint","LayoutBase","FilterColumn","useWrap","pageIndex","listFieldSearch","FullNameUnicode","listFieldFilter","BranchID","UserInformationID","Status","AppointmentDate","dataOption","dataSort","sort","sortType","text","listApi","api","name","ServiceTestTeacher","props","listDataForm","setListDataForm","Branch","Student","Teacher","dataExam","setDataExam","currentDay","setCurrentDate","isOpenNoti","setisOpenNoti","dataSource","setDataSource","showNoti","pageSize","userInformation","listTodoApi","TeacherID","isLoading","setIsLoading","type","status","totalPage","setTotalPage","indexRow","setIndexRow","currentPage","setCurrentPage","todoApi","setTodoApi","dataFilter","setDataFilter","title","col","optionList","value","makeNewData","data","newData","map","item","BranchName","ID","setDataFunc","counselorsName","CounselorsName","getDataTolist","Object","keys","forEach","key","getDataExam","res","getAll","selectAll","error","console","log","message","getDataAll","arrApi","index","RoleID","StatusID","Enable","getDataSource","totalRow","every","afterPost","mes","_onSubmit","dataSubmit","update","newDataSource","splice","find","TeacherName","add","handleFilter","listFilter","newListFilter","keyFilter","handleSort","option","newTodoApi","checkField","valueSearch","dataIndex","newList","onSearch","clearKey","resetListFieldSearch","handleReset","getPagination","pageNumber","currentdate","Date","datetime","getDate","getMonth","getFullYear","getHours","getMinutes","moveToTest","e","preventDefault","testDate","format","Time","push","expandedRowRender","record","ExamAppointmentID","columns","render","a","width","isDone","pathname","query","slug","teacherMarking","packageResultID","date","align","filters","onFilter","layout"],"mappings":";;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,wBAApB,EAA8CC,YAA9C,EAA4DC,UAA5D,EAAwEC,UAAxE,EAAoFC,eAApF,QAA2G,WAA3G;AACA,OAAOC,UAAP,MAAuB,6CAAvB;AACA,OAAOC,SAAP,MAAsB,2CAAtB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,oBAAP,MAAiC,0DAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,IAAIC,SAAS,GAAG,CAAhB;AAEA,IAAIC,eAAe,GAAG;AACrBD,EAAAA,SAAS,EAAE,CADU;AAErBE,EAAAA,eAAe,EAAE;AAFI,CAAtB;AAKA,IAAIC,eAAe,GAAG;AACrBH,EAAAA,SAAS,EAAE,CADU;AAErBI,EAAAA,QAAQ,EAAE,IAFW;AAEL;AAChBC,EAAAA,iBAAiB,EAAE,IAHE;AAIrBC,EAAAA,MAAM,EAAE,IAJa;AAKrBC,EAAAA,eAAe,EAAE;AALI,CAAtB;AAQA,MAAMC,UAAU,GAAG,CAClB;AACCC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADX;AAKCC,EAAAA,IAAI,EAAE;AALP,CADkB,EAQlB;AACCH,EAAAA,QAAQ,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADX;AAKCC,EAAAA,IAAI,EAAE;AALP,CARkB,EAgBlB;AACCH,EAAAA,QAAQ,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADX;AAKCC,EAAAA,IAAI,EAAE;AALP,CAhBkB,EAuBlB;AACCH,EAAAA,QAAQ,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADX;AAKCC,EAAAA,IAAI,EAAE;AALP,CAvBkB,CAAnB,C,CAgCA;;AAkBA,MAAMC,OAAO,GAAG,CACf;AACCC,EAAAA,GAAG,EAAE5B,SADN;AAEC0B,EAAAA,IAAI,EAAE,WAFP;AAGCG,EAAAA,IAAI,EAAE;AAHP,CADe,EAMf;AACCD,EAAAA,GAAG,EAAEzB,UADN;AAECuB,EAAAA,IAAI,EAAE,UAFP;AAGCG,EAAAA,IAAI,EAAE;AAHP,CANe,EAWf;AACCD,EAAAA,GAAG,EAAExB,UADN;AAECsB,EAAAA,IAAI,EAAE,WAFP;AAGCG,EAAAA,IAAI,EAAE;AAHP,CAXe,CAAhB;AAkBA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACjD,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkClC,QAAQ,CAAe;AAC9DmC,IAAAA,MAAM,EAAE,EADsD;AAE9DC,IAAAA,OAAO,EAAE,EAFqD;AAG9DC,IAAAA,OAAO,EAAE;AAHqD,GAAf,CAAhD;AAKA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BvC,QAAQ,CAAe,EAAf,CAAxC;AACA,QAAM;AAAA,OAACwC,UAAD;AAAA,OAAaC;AAAb,MAA+BzC,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM;AAAA,OAAC0C,UAAD;AAAA,OAAaC;AAAb,MAA8B3C,QAAQ,CAAC,KAAD,CAA5C,CARiD,CAUjD;;AACA,QAAM;AAAA,OAAC4C,UAAD;AAAA,OAAaC;AAAb,MAA8B7C,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAE8C,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAA0ClC,OAAO,EAAvD;AACA,QAAMmC,WAAW,GAAG;AACnBF,IAAAA,QAAQ,EAAEA,QADS;AAEnBhC,IAAAA,SAAS,EAAEA,SAFQ;AAGnBU,IAAAA,IAAI,EAAE,IAHa;AAInBC,IAAAA,QAAQ,EAAE,IAJS;AAKnBwB,IAAAA,SAAS,EAAE;AALQ,GAApB;AAOA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BpD,QAAQ,CAAC;AAC1CqD,IAAAA,IAAI,EAAE,EADoC;AAE1CC,IAAAA,MAAM,EAAE;AAFkC,GAAD,CAA1C;AAIA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BxD,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACyD,QAAD;AAAA,OAAWC;AAAX,MAA0B1D,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAA,OAAC2D,WAAD;AAAA,OAAcC;AAAd,MAAgC5D,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM;AAAA,OAAC6D,OAAD;AAAA,OAAUC;AAAV,MAAwB9D,QAAQ,CAACiD,WAAD,CAAtC,CA3BiD,CA6BjD;;AACA,QAAM;AAAA,OAACc,UAAD;AAAA,OAAaC;AAAb,MAA8BhE,QAAQ,CAAC,CAC5C;AACC8B,IAAAA,IAAI,EAAE,UADP;AAECmC,IAAAA,KAAK,EAAE,WAFR;AAGCC,IAAAA,GAAG,EAAE,kBAHN;AAICb,IAAAA,IAAI,EAAE,QAJP;AAKCc,IAAAA,UAAU,EAAE,IALb;AAKmB;AAClBC,IAAAA,KAAK,EAAE;AANR,GAD4C,EAU5C;AACCtC,IAAAA,IAAI,EAAE,QADP;AAECmC,IAAAA,KAAK,EAAE,YAFR;AAGCC,IAAAA,GAAG,EAAE,kBAHN;AAICb,IAAAA,IAAI,EAAE,QAJP;AAKCc,IAAAA,UAAU,EAAE,CACX;AACCF,MAAAA,KAAK,EAAE,WADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KADW,EAKX;AACCH,MAAAA,KAAK,EAAE,oBADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KALW,EASX;AACCH,MAAAA,KAAK,EAAE,uBADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KATW,EAaX;AACCH,MAAAA,KAAK,EAAE,qBADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KAbW,EAiBX;AACCH,MAAAA,KAAK,EAAE,iBADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KAjBW,CALb;AA2BCA,IAAAA,KAAK,EAAE;AA3BR,GAV4C,EAuC5C;AACCtC,IAAAA,IAAI,EAAE,iBADP;AAECmC,IAAAA,KAAK,EAAE,eAFR;AAGCC,IAAAA,GAAG,EAAE,kBAHN;AAICb,IAAAA,IAAI,EAAE,aAJP;AAKCe,IAAAA,KAAK,EAAE;AALR,GAvC4C,EA8C5C;AACCtC,IAAAA,IAAI,EAAE,YADP;AAECmC,IAAAA,KAAK,EAAE,UAFR;AAGCC,IAAAA,GAAG,EAAE,QAHN;AAICb,IAAAA,IAAI,EAAE,YAJP;AAKCe,IAAAA,KAAK,EAAE;AALR,GA9C4C,CAAD,CAA5C;;AAuDA,QAAMC,WAAW,GAAG,CAACC,IAAD,EAAOxC,IAAP,KAAgB;AACnC,QAAIyC,OAAO,GAAG,IAAd;;AACA,YAAQzC,IAAR;AACC,WAAK,QAAL;AACCyC,QAAAA,OAAO,GAAGD,IAAI,CAACE,GAAL,CAAUC,IAAD,KAAW;AAC7BR,UAAAA,KAAK,EAAEQ,IAAI,CAACC,UADiB;AAE7BN,UAAAA,KAAK,EAAEK,IAAI,CAACE;AAFiB,SAAX,CAAT,CAAV;AAIAC,QAAAA,WAAW,CAAC,UAAD,EAAaL,OAAb,CAAX;AACA;;AAED,WAAK,SAAL;AACCA,QAAAA,OAAO,GAAGD,IAAI,CAACE,GAAL,CAAUC,IAAD,KAAW;AAC7BR,UAAAA,KAAK,EAAEQ,IAAI,CAACxD,eADiB;AAE7BmD,UAAAA,KAAK,EAAEK,IAAI,CAACrD,iBAFiB;AAG7ByD,UAAAA,cAAc,EAAEJ,IAAI,CAACK,cAAL,IAAuB,IAAvB,GAA8B,EAA9B,GAAmCL,IAAI,CAACK;AAH3B,SAAX,CAAT,CAAV;AAMA;;AACD,WAAK,SAAL;AACCP,QAAAA,OAAO,GAAGD,IAAI,CAACE,GAAL,CAAUC,IAAD,KAAW;AAC7BR,UAAAA,KAAK,EAAEQ,IAAI,CAACxD,eADiB;AAE7BmD,UAAAA,KAAK,EAAEK,IAAI,CAACrD;AAFiB,SAAX,CAAT,CAAV;AAKA;;AACD;AACC;AAzBF;;AA4BA,WAAOmD,OAAP;AACA,GA/BD;;AAiCA,QAAMQ,aAAa,GAAG,CAACT,IAAD,EAAYxC,IAAZ,KAA0B;AAC/C,QAAIyC,OAAO,GAAGF,WAAW,CAACC,IAAD,EAAOxC,IAAP,CAAzB;AAEAkD,IAAAA,MAAM,CAACC,IAAP,CAAYhD,YAAZ,EAA0BiD,OAA1B,CAAkC,UAAUC,GAAV,EAAe;AAChD,UAAIA,GAAG,IAAIrD,IAAX,EAAiB;AAChBG,QAAAA,YAAY,CAACkD,GAAD,CAAZ,GAAoBZ,OAApB;AACA;AACD,KAJD;AAKArC,IAAAA,eAAe,mBAAMD,YAAN,EAAf;AACA,GATD,CAtHiD,CAiIjD;;;AACA,QAAMmD,WAAW,GAAG,YAAY;AAC/B,QAAI;AACH,UAAIC,GAAG,GAAG,MAAMlF,YAAY,CAACmF,MAAb,CAAoB;AACnCC,QAAAA,SAAS,EAAE,IADwB;AAEnClC,QAAAA,IAAI,EAAE;AAF6B,OAApB,CAAhB;;AAIA,UAAIgC,GAAG,CAAC/B,MAAJ,KAAe,GAAnB,EAAwB;AACvBf,QAAAA,WAAW,CAAC8C,GAAG,CAACf,IAAJ,CAASA,IAAV,CAAX;AACA;AACD,KARD,CAQE,OAAOkB,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,KAAK,CAACG,OAAlC;AACA;AACD,GAZD,CAlIiD,CAgJjD;;;AACA,QAAMC,UAAU,GAAIC,MAAD,IAAY;AAC9BA,IAAAA,MAAM,CAACX,OAAP,CAAe,CAACT,IAAD,EAAOqB,KAAP,KAAiB;AAC/B;;AAAC,OAAC,YAAY;AACb,YAAIT,GAAG,GAAG,IAAV;;AACA,YAAI;AACH,cAAIZ,IAAI,CAAC3C,IAAL,IAAa,YAAjB,EAA+B;AAC9BuD,YAAAA,GAAG,GAAG,MAAMZ,IAAI,CAAC5C,GAAL,CAASyD,MAAT,CAAgB;AAC3BvE,cAAAA,SAAS,EAAE,CADgB;AAE3BgC,cAAAA,QAAQ,EAAE,KAFiB;AAG3BgD,cAAAA,MAAM,EAAE,CAHmB;AAI3BC,cAAAA,QAAQ,EAAE,CAJiB;AAK3BC,cAAAA,MAAM,EAAE;AALmB,aAAhB,CAAZ;AAOA,WARD,MAQO;AACNZ,YAAAA,GAAG,GAAG,MAAMZ,IAAI,CAAC5C,GAAL,CAASyD,MAAT,CAAgB;AAC3BvE,cAAAA,SAAS,EAAE,CADgB;AAE3BgC,cAAAA,QAAQ,EAAE,KAFiB;AAG3BkD,cAAAA,MAAM,EAAE;AAHmB,aAAhB,CAAZ;AAKA;;AAEDZ,UAAAA,GAAG,CAAC/B,MAAJ,IAAc,GAAd,IAAqByB,aAAa,CAACM,GAAG,CAACf,IAAJ,CAASA,IAAV,EAAgBG,IAAI,CAAC3C,IAArB,CAAlC;AAEAuD,UAAAA,GAAG,CAAC/B,MAAJ,IAAc,GAAd,IAAqBR,QAAQ,CAAC,QAAD,EAAW2B,IAAI,CAAC9C,IAAL,GAAY,mBAAvB,CAA7B;AACA,SApBD,CAoBE,OAAO6D,KAAP,EAAc;AACf1C,UAAAA,QAAQ,CAAC,QAAD,EAAW0C,KAAK,CAACG,OAAjB,CAAR;AACA,SAtBD,SAsBU,CACT;AACD,OA1BA;AA2BD,KA5BD;AA6BA,GA9BD,CAjJiD,CAiLjD;;;AACA,QAAMO,aAAa,GAAG,YAAY;AACjC9C,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,SADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;;AAKA,QAAI;AACH,UAAI+B,GAAG,GAAG,MAAMnF,wBAAwB,CAACoF,MAAzB,CAAgCzB,OAAhC,CAAhB;;AACA,UAAIwB,GAAG,CAAC/B,MAAJ,IAAc,GAAlB,EAAuB;AACtBT,QAAAA,aAAa,CAACwC,GAAG,CAACf,IAAJ,CAASA,IAAV,CAAb;AACAd,QAAAA,YAAY,CAAC6B,GAAG,CAACf,IAAJ,CAAS6B,QAAV,CAAZ,CAFsB,CAGtB;AACA;AACA;;AACDd,MAAAA,GAAG,CAAC/B,MAAJ,IAAc,GAAd,IAAqBT,aAAa,CAAC,EAAD,CAAlC;AACA,KATD,CASE,OAAO2C,KAAP,EAAc;AACf1C,MAAAA,QAAQ,CAAC,QAAD,EAAW0C,KAAK,CAACG,OAAjB,CAAR;AACA,KAXD,SAWU;AACTvC,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,SADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;AACD,GAvBD,CAlLiD,CA2MjD;;;AACA,QAAMsB,WAAW,GAAG,CAAC9C,IAAD,EAAOwC,IAAP,KAAgB;AACnCP,IAAAA,UAAU,CAACqC,KAAX,CAAiB,CAAC3B,IAAD,EAAOqB,KAAP,KAAiB;AACjC,UAAIrB,IAAI,CAAC3C,IAAL,IAAaA,IAAjB,EAAuB;AACtB2C,QAAAA,IAAI,CAACN,UAAL,GAAkBG,IAAlB;AACA,eAAO,KAAP;AACA;;AACD,aAAO,IAAP;AACA,KAND;AAOAN,IAAAA,aAAa,CAAC,CAAC,GAAGD,UAAJ,CAAD,CAAb;AACA,GATD,CA5MiD,CAuNjD;;;AACA,QAAMsC,SAAS,GAAIC,GAAD,IAAS;AAC1B;AACAxC,IAAAA,UAAU,iCACNb,WADM;AAETlC,MAAAA,SAAS,EAAE;AAFF,OAAV;AAIA6C,IAAAA,cAAc,CAAC,CAAD,CAAd;AACA,GAPD,CAxNiD,CAiOjD;;;AACA,QAAM2C,SAAS,GAAG,MAAOC,UAAP,IAA2B;AAC5C;AACA;AACApD,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,UADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;AAKA,QAAI+B,GAAG,GAAG,IAAV;;AAEA,QAAI;AACH,UAAImB,UAAU,CAAC7B,EAAf,EAAmB;AAClBU,QAAAA,GAAG,GAAG,MAAM/E,eAAe,CAACmG,MAAhB,CAAuBD,UAAvB,CAAZ;;AAEA,YAAInB,GAAG,CAAC/B,MAAJ,IAAc,GAAlB,EAAuB;AACtB,cAAIoD,aAAa,GAAG,CAAC,GAAG9D,UAAJ,CAApB;AACA8D,UAAAA,aAAa,CAACC,MAAd,CAAqBlD,QAArB,EAA+B,CAA/B,kCACI+C,UADJ;AAECvF,YAAAA,eAAe,EAAEgB,YAAY,CAACG,OAAb,CAAqBwE,IAArB,CAA2BnC,IAAD,IAAUA,IAAI,CAACL,KAAL,IAAcoC,UAAU,CAACpF,iBAA7D,EAAgF6C,KAFlG;AAGCS,YAAAA,UAAU,EAAEzC,YAAY,CAACE,MAAb,CAAoByE,IAApB,CAA0BnC,IAAD,IAAUA,IAAI,CAACL,KAAL,IAAcoC,UAAU,CAACrF,QAA5D,EAAsE8C,KAHnF;AAIC4C,YAAAA,WAAW,EAAE5E,YAAY,CAACI,OAAb,CAAqBuE,IAArB,CAA2BnC,IAAD,IAAUA,IAAI,CAACL,KAAL,IAAcoC,UAAU,CAACtD,SAA7D,EAAwEe;AAJtF;AAMApB,UAAAA,aAAa,CAAC6D,aAAD,CAAb;AACA5D,UAAAA,QAAQ,CAAC,SAAD,EAAYuC,GAAG,CAACf,IAAJ,CAASqB,OAArB,CAAR;AACA;AACD,OAdD,MAcO;AAAA;;AACNN,QAAAA,GAAG,GAAG,MAAM/E,eAAe,CAACwG,GAAhB,CAAoBN,UAApB,CAAZ;AACA,iBAAAnB,GAAG,UAAH,oCAAK/B,MAAL,KAAe,GAAf,IAAsB+C,SAAS,CAAChB,GAAG,CAACf,IAAJ,CAASqB,OAAV,CAA/B;AACA;AACD,KAnBD,CAmBE,OAAOH,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;AACA1C,MAAAA,QAAQ,CAAC,QAAD,EAAW0C,KAAK,CAACG,OAAjB,CAAR;AACA,KAtBD,SAsBU;AACTvC,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,UADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;;AAED,WAAO+B,GAAP;AACA,GAxCD,CAlOiD,CA4QjD;;;AACA,QAAM0B,YAAY,GAAIC,UAAD,IAAgB;AACpC,QAAIC,aAAa,qBAAQ/F,eAAR,CAAjB;;AACA8F,IAAAA,UAAU,CAAC9B,OAAX,CAAmB,CAACT,IAAD,EAAOqB,KAAP,KAAiB;AACnC,UAAIX,GAAG,GAAGV,IAAI,CAAC3C,IAAf;AACAkD,MAAAA,MAAM,CAACC,IAAP,CAAYgC,aAAZ,EAA2B/B,OAA3B,CAAoCgC,SAAD,IAAe;AACjD,YAAIA,SAAS,IAAI/B,GAAjB,EAAsB;AACrB8B,UAAAA,aAAa,CAAC9B,GAAD,CAAb,GAAqBV,IAAI,CAACL,KAA1B;AACA;AACD,OAJD;AAKA,KAPD;AAQAN,IAAAA,UAAU,+CAAMb,WAAN,GAAsBgE,aAAtB;AAAqClG,MAAAA,SAAS,EAAE;AAAhD,OAAV;AACA,GAXD,CA7QiD,CA0RjD;;;AACA,QAAMoG,UAAU,GAAG,MAAOC,MAAP,IAAkB;AACpC,QAAIC,UAAU,mCACVpE,WADU;AAEblC,MAAAA,SAAS,EAAE,CAFE;AAGbU,MAAAA,IAAI,EAAE2F,MAAM,CAACnD,KAAP,CAAaxC,IAHN;AAIbC,MAAAA,QAAQ,EAAE0F,MAAM,CAACnD,KAAP,CAAavC;AAJV,MAAd;;AAMAkC,IAAAA,cAAc,CAAC,CAAD,CAAd,EAAmBE,UAAU,CAACuD,UAAD,CAA7B;AACA,GARD,CA3RiD,CAqSjD;;;AAEA,QAAMC,UAAU,GAAG,CAACC,WAAD,EAAcC,SAAd,KAA4B;AAC9C,QAAIC,OAAO,qBAAQzG,eAAR,CAAX;;AACAgE,IAAAA,MAAM,CAACC,IAAP,CAAYwC,OAAZ,EAAqBvC,OAArB,CAA6B,UAAUC,GAAV,EAAe;AAC3C,UAAIA,GAAG,IAAIqC,SAAX,EAAsB;AACrB,YAAIrC,GAAG,IAAI,WAAX,EAAwB;AACvBsC,UAAAA,OAAO,CAACtC,GAAD,CAAP,GAAe,IAAf;AACA;AACD,OAJD,MAIO;AACNsC,QAAAA,OAAO,CAACtC,GAAD,CAAP,GAAeoC,WAAf;AACA;AACD,KARD;AAUA,WAAOE,OAAP;AACA,GAbD;;AAeA,QAAMC,QAAQ,GAAG,CAACH,WAAD,EAAcC,SAAd,KAA4B;AAC5C,QAAIG,QAAQ,GAAGL,UAAU,CAACC,WAAD,EAAcC,SAAd,CAAzB;AAEA1D,IAAAA,UAAU,iCACND,OADM,GAEN8D,QAFM,EAAV;AAIA,GAPD,CAtTiD,CA+TjD;;;AACA,QAAMC,oBAAoB,GAAG,MAAM;AAClC5C,IAAAA,MAAM,CAACC,IAAP,CAAYjE,eAAZ,EAA6BkE,OAA7B,CAAqC,UAAUC,GAAV,EAAe;AACnD,UAAIA,GAAG,IAAI,WAAX,EAAwB;AACvBnE,QAAAA,eAAe,CAACmE,GAAD,CAAf,GAAuB,IAAvB;AACA;AACD,KAJD;AAKA,GAND;;AAQA,QAAM0C,WAAW,GAAG,MAAM;AACzB/D,IAAAA,UAAU,iCACNb,WADM;AAETlC,MAAAA,SAAS,EAAE;AAFF,OAAV;AAIA6C,IAAAA,cAAc,CAAC,CAAD,CAAd,EAAmBgE,oBAAoB,EAAvC;AACA,GAND,CAxUiD,CAgVjD;;;AACA,QAAME,aAAa,GAAIC,UAAD,IAAwB;AAC7ChH,IAAAA,SAAS,GAAGgH,UAAZ;AACAnE,IAAAA,cAAc,CAACmE,UAAD,CAAd;AACAtC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB7B,OAAzB;AACAC,IAAAA,UAAU,iCACND,OADM;AAET;AACA9C,MAAAA,SAAS,EAAEA;AAHF,OAAV;AAKA,GATD,CAjViD,CA4VjD;;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIiD,eAAJ,EAAqB;AACpBkD,MAAAA,aAAa;AACb;AACD,GAJQ,EAIN,CAACrC,OAAD,CAJM,CAAT;AAMA9D,EAAAA,SAAS,CAAC,MAAM;AACf;AACAqF,IAAAA,WAAW,GAFI,CAIf;;AACA,QAAI4C,WAAW,GAAG,IAAIC,IAAJ,EAAlB;AACA,QAAIC,QAAQ,GACXF,WAAW,CAACG,OAAZ,KACA,GADA,IAECH,WAAW,CAACI,QAAZ,KAAyB,CAF1B,IAGA,GAHA,GAIAJ,WAAW,CAACK,WAAZ,EAJA,GAKA,GALA,GAMAL,WAAW,CAACM,QAAZ,EANA,GAOA,GAPA,GAQAN,WAAW,CAACO,UAAZ,EATD;AAWA9F,IAAAA,cAAc,CAACyF,QAAD,CAAd;AACA,GAlBQ,EAkBN,EAlBM,CAAT;AAoBAnI,EAAAA,SAAS,CAAC,MAAM;AACfqD,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,UADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;;AAKA,QAAIN,eAAJ,EAAqB;AACpBc,MAAAA,UAAU,iCACND,OADM;AAETX,QAAAA,SAAS,EAAEF,eAAe,CAAC5B;AAFlB,SAAV;AAIA;AACD,GAZQ,EAYN,CAAC4B,eAAD,CAZM,CAAT;;AAcA,QAAMwF,UAAU,GAAG,CAACC,CAAD,EAAInE,IAAJ,KAAa;AAC/BmE,IAAAA,CAAC,CAACC,cAAF;AAEA,QAAIC,QAAQ,GAAGhJ,MAAM,CAAC2E,IAAI,CAAChD,eAAN,CAAN,CAA6BsH,MAA7B,CAAoC,YAApC,IAAoD,GAApD,GAA0DtE,IAAI,CAACuE,IAA9E;AACApD,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BiD,QAA3B;;AACA,QAAInG,UAAU,GAAGmG,QAAjB,EAA2B;AAC1BhG,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,KAFD,MAEO;AACN9C,MAAAA,MAAM,CAACiJ,IAAP,CAAY,EAAZ;AACA;AACD,GAVD;;AAYA,QAAMC,iBAAiB,GAAIC,MAAD,IAAY;AACrC,wBACC;AAAA,6BACC,QAAC,oBAAD;AAAsB,QAAA,MAAM,EAAEA,MAAM,CAACC,iBAArC;AAAwD,QAAA,MAAM,EAAED,MAAM,CAAC5H;AAAvE;AAAA;AAAA;AAAA;AAAA;AADD,qBADD;AAKA,GAND;;AAQA,QAAM8H,OAAO,GAAG;AAEdjF,IAAAA,KAAK,EAAE,UAFO;AAGduD,IAAAA,SAAS,EAAE,iBAHG;AAKd2B,IAAAA,MAAM,EAAGC,CAAD,iBAAO;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA,gBAAoCA;AAApC;AAAA;AAAA;AAAA;AAAA;AALD,KAMXvI,YAAY,CAAC,iBAAD,EAAoB6G,QAApB,EAA8BG,WAA9B,EAA2C,MAA3C,CAND,GAQf;AACCwB,IAAAA,KAAK,EAAE,GADR;AAECpF,IAAAA,KAAK,EAAE,SAFR;AAGCuD,IAAAA,SAAS,EAAE,eAHZ;AAKC2B,IAAAA,MAAM,EAAE,CAACxH,IAAD,EAAO2C,IAAP,KACPA,IAAI,CAACpB,SAAL,KAAmBF,eAAe,CAAC5B,iBAAnC,IACA,CAACkD,IAAI,CAACgF,MADN,iBAEC,QAAC,IAAD;AACC,MAAA,IAAI,EAAE;AACLC,QAAAA,QAAQ,EAAE,sDADL;AAELC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAG,GAAEnF,IAAI,CAACK,EAAG,EAAnB;AAAsB+E,UAAAA,cAAc,EAAEpF,IAAI,CAACpB,SAA3C;AAAsDyG,UAAAA,eAAe,EAAErF,IAAI,CAACK,EAA5E;AAAgFtB,UAAAA,IAAI,EAAE;AAAtF;AAFF,OADP;AAAA,6BAMC,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,uBAAf;AAAA,+BACC;AAAG,UAAA,IAAI,EAAC,EAAR;AAAW,UAAA,SAAS,EAAC,kBAArB;AAAA,oBACE1B;AADF;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAND;AAAA;AAAA;AAAA;AAAA;AARH,GARe,EA8Bf;AACCsC,IAAAA,KAAK,EAAE,UADR;AAECuD,IAAAA,SAAS,EAAE,iBAFZ;AAGC2B,IAAAA,MAAM,EAAGS,IAAD,IAAejK,MAAM,CAACiK,IAAD,CAAN,CAAahB,MAAb,CAAoB,YAApB;AAHxB,GA9Be,EAmCf;AACCS,IAAAA,KAAK,EAAE,GADR;AAECpF,IAAAA,KAAK,EAAE,SAFR;AAGCuD,IAAAA,SAAS,EAAE;AAHZ,GAnCe,EAwCf;AACCvD,IAAAA,KAAK,EAAE,aADR;AAECuD,IAAAA,SAAS,EAAE;AAFZ,GAxCe,EA4Cf;AACCvD,IAAAA,KAAK,EAAE,YADR;AAECuD,IAAAA,SAAS,EAAE,QAFZ;AAGCqC,IAAAA,KAAK,EAAE,QAHR;AAKCC,IAAAA,OAAO,EAAE,CACR;AACCnI,MAAAA,IAAI,EAAE,WADP;AAECyC,MAAAA,KAAK,EAAE;AAFR,KADQ,EAKR;AACCzC,MAAAA,IAAI,EAAE,SADP;AAECyC,MAAAA,KAAK,EAAE;AAFR,KALQ,CALV;AAeC2F,IAAAA,QAAQ,EAAE,CAAC3F,KAAD,EAAQ4E,MAAR,KAAmBA,MAAM,CAACM,MAAP,KAAkBlF,KAfhD;AAgBC+E,IAAAA,MAAM,EAAG9F,IAAD,iBACP;AAAA,iBACEA,IAAI,IAAI,IAAR,iBAAgB;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADlB,EAEEA,IAAI,IAAI,KAAR,iBAAiB;AAAM,QAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFnB;AAAA;AAjBF,GA5Ce,EAmEf;AACC8F,IAAAA,MAAM,EAAG7E,IAAD,iBACP;AAAA,gBACEA,IAAI,CAACpB,SAAL,KAAmBF,eAAe,CAAC5B,iBAAnC,iBACA,QAAC,IAAD;AACC,QAAA,IAAI,EAAE;AACLmI,UAAAA,QAAQ,EAAE,sDADL;AAELC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAG,GAAEnF,IAAI,CAACK,EAAG,EAAnB;AAAsB+E,YAAAA,cAAc,EAAEpF,IAAI,CAACpB,SAA3C;AAAsDyG,YAAAA,eAAe,EAAErF,IAAI,CAACK,EAA5E;AAAgFtB,YAAAA,IAAI,EAAE;AAAtF;AAFF,SADP;AAAA,+BAMC,QAAC,OAAD;AAAS,UAAA,KAAK,EAAE,CAACiB,IAAI,CAACgF,MAAN,GAAe,eAAf,GAAiC,cAAjD;AAAA,iCACC;AAAQ,YAAA,SAAS,EAAC,mBAAlB;AAAA,mCACC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAND;AAAA;AAAA;AAAA;AAAA;AAFF;AAFF,GAnEe,CAAhB;AAyFA,sBACC;AAAA,cACEtG,eAAe,iBACf;AAAA,8BACC,QAAC,SAAD;AACC,QAAA,MAAM,EAAEN,UADT;AAEC,QAAA,QAAQ,EAAE,MAAMC,aAAa,CAAC,KAAD,CAF9B;AAGC,QAAA,IAAI,EAAE,MAAMA,aAAa,CAAC,KAAD,CAH1B;AAIC,QAAA,OAAO,EAAC;AAJT;AAAA;AAAA;AAAA;AAAA,cADD,eAOC,QAAC,WAAD;AACC,QAAA,WAAW,EAAEgB,WADd;AAEC,QAAA,SAAS,EAAEJ,SAAS,IAAIA,SAFzB;AAGC,QAAA,aAAa,EAAGwE,UAAD,IAAwBD,aAAa,CAACC,UAAD,CAHrD;AAIC,QAAA,OAAO,EAAE5E,SAJV;AAKC,QAAA,QAAQ,EAAC,cALV;AAMC,QAAA,SAAS,EAAC,gCANX,CAOC;AACA;AACA;AACA;AACA;AACA;AACA;AAbD;AAcC,QAAA,UAAU,EAAEP,UAdb;AAeC,QAAA,OAAO,EAAEsG,OAfV;AAgBC,QAAA,KAAK,eACJ;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACC,QAAC,UAAD;AACC,YAAA,UAAU,EAAEnF,UADb;AAEC,YAAA,YAAY,EAAGiD,UAAD,IAAqBD,YAAY,CAACC,UAAD,CAFhD;AAGC,YAAA,WAAW,EAAEa;AAHd;AAAA;AAAA;AAAA;AAAA,kBADD,eAMC,QAAC,OAAD;AAAS,YAAA,UAAU,EAAGzD,KAAD,IAAW+C,UAAU,CAAC/C,KAAD,CAA1C;AAAmD,YAAA,UAAU,EAAE7C;AAA/D;AAAA;AAAA;AAAA;AAAA,kBAND;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF;AA0BC,QAAA,UAAU,EAAE;AAAEwH,UAAAA;AAAF;AA1Bb;AAAA;AAAA;AAAA;AAAA,cAPD;AAAA;AAFF,mBADD;AA0CA;AACDhH,kBAAkB,CAACiI,MAAnB,GAA4BpJ,UAA5B","sourcesContent":["import { FormOutlined } from '@ant-design/icons'\r\nimport { Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport Link from 'next/link'\r\nimport router from 'next/router'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { branchApi, examAppointmentResultApi, examTopicApi, studentApi, teacherApi, testCustomerApi } from '~/apiBase'\r\nimport FilterBase from '~/components/Elements/FilterBase/FilterBase'\r\nimport NotiModal from '~/components/Elements/NotiModal/NotiModal'\r\nimport SortBox from '~/components/Elements/SortBox'\r\nimport ExpandTable from '~/components/ExpandTable'\r\nimport ExamAppointmentPoint from '~/components/Global/ExamAppointment/ExamAppointmentPoint'\r\nimport LayoutBase from '~/components/LayoutBase'\r\nimport FilterColumn from '~/components/Tables/FilterColumn'\r\nimport { useWrap } from '~/context/wrap'\r\n\r\nlet pageIndex = 1\r\n\r\nlet listFieldSearch = {\r\n\tpageIndex: 1,\r\n\tFullNameUnicode: null\r\n}\r\n\r\nlet listFieldFilter = {\r\n\tpageIndex: 1,\r\n\tBranchID: null, // lọc\r\n\tUserInformationID: null,\r\n\tStatus: null,\r\n\tAppointmentDate: null\r\n}\r\n\r\nconst dataOption = [\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 2,\r\n\t\t\tsortType: true\r\n\t\t},\r\n\t\ttext: 'Tên A - Z '\r\n\t},\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 2,\r\n\t\t\tsortType: false\r\n\t\t},\r\n\t\ttext: 'Tên Z - A'\r\n\t},\r\n\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 0,\r\n\t\t\tsortType: true\r\n\t\t},\r\n\t\ttext: 'Ngày hẹn A - Z'\r\n\t},\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 0,\r\n\t\t\tsortType: false\r\n\t\t},\r\n\t\ttext: 'Ngày hẹn Z - A'\r\n\t}\r\n]\r\n\r\n// -- FOR DIFFERENT VIEW --\r\ninterface optionObj {\r\n\ttitle: string\r\n\tvalue: number\r\n}\r\n\r\ninterface studentObj {\r\n\ttitle: string\r\n\tvalue: number\r\n\tcounselorsName: string\r\n}\r\n\r\ninterface listDataForm {\r\n\tBranch: Array<optionObj>\r\n\tStudent: Array<studentObj>\r\n\tTeacher: Array<optionObj>\r\n}\r\n\r\nconst listApi = [\r\n\t{\r\n\t\tapi: branchApi,\r\n\t\ttext: 'Trung tâm',\r\n\t\tname: 'Branch'\r\n\t},\r\n\t{\r\n\t\tapi: studentApi,\r\n\t\ttext: 'Học viên',\r\n\t\tname: 'Student'\r\n\t},\r\n\t{\r\n\t\tapi: teacherApi,\r\n\t\ttext: 'Giáo viên',\r\n\t\tname: 'Teacher'\r\n\t}\r\n]\r\n\r\nexport default function ServiceTestTeacher(props) {\r\n\tconst [listDataForm, setListDataForm] = useState<listDataForm>({\r\n\t\tBranch: [],\r\n\t\tStudent: [],\r\n\t\tTeacher: []\r\n\t})\r\n\tconst [dataExam, setDataExam] = useState<IExamTopic[]>([])\r\n\tconst [currentDay, setCurrentDate] = useState(null)\r\n\tconst [isOpenNoti, setisOpenNoti] = useState(false)\r\n\r\n\t// ------ BASE USESTATE TABLE -------\r\n\tconst [dataSource, setDataSource] = useState([])\r\n\tconst { showNoti, pageSize, userInformation } = useWrap()\r\n\tconst listTodoApi = {\r\n\t\tpageSize: pageSize,\r\n\t\tpageIndex: pageIndex,\r\n\t\tsort: null,\r\n\t\tsortType: null,\r\n\t\tTeacherID: null\r\n\t}\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t})\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\tconst [indexRow, setIndexRow] = useState(null)\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\tconst [todoApi, setTodoApi] = useState(listTodoApi)\r\n\r\n\t// ------ LIST FILTER -------\r\n\tconst [dataFilter, setDataFilter] = useState([\r\n\t\t{\r\n\t\t\tname: 'BranchID',\r\n\t\t\ttitle: 'Trung tâm',\r\n\t\t\tcol: 'col-md-12 col-12',\r\n\t\t\ttype: 'select',\r\n\t\t\toptionList: null, // Gọi api xong trả data vào đây\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\tname: 'Status',\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\tcol: 'col-md-12 col-12',\r\n\t\t\ttype: 'select',\r\n\t\t\toptionList: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Chưa test',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Đang chấm bài test',\r\n\t\t\t\t\tvalue: 1\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Chưa đăng kí khóa học',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Đã đăng kí khóa học',\r\n\t\t\t\t\tvalue: 3\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Đã hủy hẹn test',\r\n\t\t\t\t\tvalue: 4\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'AppointmentDate',\r\n\t\t\ttitle: 'Ngày hẹn test',\r\n\t\t\tcol: 'col-md-12 col-12',\r\n\t\t\ttype: 'date-single',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'date-range',\r\n\t\t\ttitle: 'Từ - đến',\r\n\t\t\tcol: 'col-12',\r\n\t\t\ttype: 'date-range',\r\n\t\t\tvalue: null\r\n\t\t}\r\n\t])\r\n\r\n\tconst makeNewData = (data, name) => {\r\n\t\tlet newData = null\r\n\t\tswitch (name) {\r\n\t\t\tcase 'Branch':\r\n\t\t\t\tnewData = data.map((item) => ({\r\n\t\t\t\t\ttitle: item.BranchName,\r\n\t\t\t\t\tvalue: item.ID\r\n\t\t\t\t}))\r\n\t\t\t\tsetDataFunc('BranchID', newData)\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'Student':\r\n\t\t\t\tnewData = data.map((item) => ({\r\n\t\t\t\t\ttitle: item.FullNameUnicode,\r\n\t\t\t\t\tvalue: item.UserInformationID,\r\n\t\t\t\t\tcounselorsName: item.CounselorsName == null ? '' : item.CounselorsName\r\n\t\t\t\t}))\r\n\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Teacher':\r\n\t\t\t\tnewData = data.map((item) => ({\r\n\t\t\t\t\ttitle: item.FullNameUnicode,\r\n\t\t\t\t\tvalue: item.UserInformationID\r\n\t\t\t\t}))\r\n\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\r\n\t\treturn newData\r\n\t}\r\n\r\n\tconst getDataTolist = (data: any, name: any) => {\r\n\t\tlet newData = makeNewData(data, name)\r\n\r\n\t\tObject.keys(listDataForm).forEach(function (key) {\r\n\t\t\tif (key == name) {\r\n\t\t\t\tlistDataForm[key] = newData\r\n\t\t\t}\r\n\t\t})\r\n\t\tsetListDataForm({ ...listDataForm })\r\n\t}\r\n\r\n\t// ----------- GET DATA EXAM ------------\r\n\tconst getDataExam = async () => {\r\n\t\ttry {\r\n\t\t\tlet res = await examTopicApi.getAll({\r\n\t\t\t\tselectAll: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetDataExam(res.data.data)\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Error Exam: ', error.message)\r\n\t\t}\r\n\t}\r\n\r\n\t// ----------- GET DATA SOURCE ---------------\r\n\tconst getDataAll = (arrApi) => {\r\n\t\tarrApi.forEach((item, index) => {\r\n\t\t\t;(async () => {\r\n\t\t\t\tlet res = null\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (item.name == 'Counselors') {\r\n\t\t\t\t\t\tres = await item.api.getAll({\r\n\t\t\t\t\t\t\tpageIndex: 1,\r\n\t\t\t\t\t\t\tpageSize: 99999,\r\n\t\t\t\t\t\t\tRoleID: 6,\r\n\t\t\t\t\t\t\tStatusID: 0,\r\n\t\t\t\t\t\t\tEnable: true\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres = await item.api.getAll({\r\n\t\t\t\t\t\t\tpageIndex: 1,\r\n\t\t\t\t\t\t\tpageSize: 99999,\r\n\t\t\t\t\t\t\tEnable: true\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tres.status == 200 && getDataTolist(res.data.data, item.name)\r\n\r\n\t\t\t\t\tres.status == 204 && showNoti('danger', item.text + ' Không có dữ liệu')\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t\t} finally {\r\n\t\t\t\t}\r\n\t\t\t})()\r\n\t\t})\r\n\t}\r\n\r\n\t// GET DATA SOURCE\r\n\tconst getDataSource = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await examAppointmentResultApi.getAll(todoApi)\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tsetDataSource(res.data.data)\r\n\t\t\t\tsetTotalPage(res.data.totalRow)\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\t// setTestDate(moment(res.data.data.AppointmentDate).format('DD/MM/YYYY HH:mm'));\r\n\t\t\t}\r\n\t\t\tres.status == 204 && setDataSource([])\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// ------ SET DATA FUN ------\r\n\tconst setDataFunc = (name, data) => {\r\n\t\tdataFilter.every((item, index) => {\r\n\t\t\tif (item.name == name) {\r\n\t\t\t\titem.optionList = data\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t})\r\n\t\tsetDataFilter([...dataFilter])\r\n\t}\r\n\r\n\t// ---------------- AFTER SUBMIT -----------------\r\n\tconst afterPost = (mes) => {\r\n\t\t// showNoti(\"success\", mes);\r\n\t\tsetTodoApi({\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1\r\n\t\t})\r\n\t\tsetCurrentPage(1)\r\n\t}\r\n\r\n\t// ----------------- ON SUBMIT --------------------\r\n\tconst _onSubmit = async (dataSubmit: any) => {\r\n\t\t// console.log('Data submit: ', dataSubmit);\r\n\t\t// console.log('List data form: ', listDataForm);\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\tlet res = null\r\n\r\n\t\ttry {\r\n\t\t\tif (dataSubmit.ID) {\r\n\t\t\t\tres = await testCustomerApi.update(dataSubmit)\r\n\r\n\t\t\t\tif (res.status == 200) {\r\n\t\t\t\t\tlet newDataSource = [...dataSource]\r\n\t\t\t\t\tnewDataSource.splice(indexRow, 1, {\r\n\t\t\t\t\t\t...dataSubmit,\r\n\t\t\t\t\t\tFullNameUnicode: listDataForm.Student.find((item) => item.value == dataSubmit.UserInformationID).title,\r\n\t\t\t\t\t\tBranchName: listDataForm.Branch.find((item) => item.value == dataSubmit.BranchID).title,\r\n\t\t\t\t\t\tTeacherName: listDataForm.Teacher.find((item) => item.value == dataSubmit.TeacherID).title\r\n\t\t\t\t\t})\r\n\t\t\t\t\tsetDataSource(newDataSource)\r\n\t\t\t\t\tshowNoti('success', res.data.message)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tres = await testCustomerApi.add(dataSubmit)\r\n\t\t\t\tres?.status == 200 && afterPost(res.data.message)\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('error: ', error)\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn res\r\n\t}\r\n\r\n\t// -------------- HANDLE FILTER ------------------\r\n\tconst handleFilter = (listFilter) => {\r\n\t\tlet newListFilter = { ...listFieldFilter }\r\n\t\tlistFilter.forEach((item, index) => {\r\n\t\t\tlet key = item.name\r\n\t\t\tObject.keys(newListFilter).forEach((keyFilter) => {\r\n\t\t\t\tif (keyFilter == key) {\r\n\t\t\t\t\tnewListFilter[key] = item.value\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t\tsetTodoApi({ ...listTodoApi, ...newListFilter, pageIndex: 1 })\r\n\t}\r\n\r\n\t// --------------- HANDLE SORT ----------------------\r\n\tconst handleSort = async (option) => {\r\n\t\tlet newTodoApi = {\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1,\r\n\t\t\tsort: option.title.sort,\r\n\t\t\tsortType: option.title.sortType\r\n\t\t}\r\n\t\tsetCurrentPage(1), setTodoApi(newTodoApi)\r\n\t}\r\n\r\n\t// ------------ ON SEARCH -----------------------\r\n\r\n\tconst checkField = (valueSearch, dataIndex) => {\r\n\t\tlet newList = { ...listFieldSearch }\r\n\t\tObject.keys(newList).forEach(function (key) {\r\n\t\t\tif (key != dataIndex) {\r\n\t\t\t\tif (key != 'pageIndex') {\r\n\t\t\t\t\tnewList[key] = null\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnewList[key] = valueSearch\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn newList\r\n\t}\r\n\r\n\tconst onSearch = (valueSearch, dataIndex) => {\r\n\t\tlet clearKey = checkField(valueSearch, dataIndex)\r\n\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t...clearKey\r\n\t\t})\r\n\t}\r\n\r\n\t// HANDLE RESET\r\n\tconst resetListFieldSearch = () => {\r\n\t\tObject.keys(listFieldSearch).forEach(function (key) {\r\n\t\t\tif (key != 'pageIndex') {\r\n\t\t\t\tlistFieldSearch[key] = null\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetTodoApi({\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1\r\n\t\t})\r\n\t\tsetCurrentPage(1), resetListFieldSearch()\r\n\t}\r\n\r\n\t// -------------- GET PAGE_NUMBER -----------------\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tpageIndex = pageNumber\r\n\t\tsetCurrentPage(pageNumber)\r\n\t\tconsole.log('Todoapi: ', todoApi)\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t// ...listFieldSearch,\r\n\t\t\tpageIndex: pageIndex\r\n\t\t})\r\n\t}\r\n\r\n\t// ============== USE EFFECT - FETCH DATA ===================\r\n\tuseEffect(() => {\r\n\t\tif (userInformation) {\r\n\t\t\tgetDataSource()\r\n\t\t}\r\n\t}, [todoApi])\r\n\r\n\tuseEffect(() => {\r\n\t\t// getDataAll(listApi);\r\n\t\tgetDataExam()\r\n\r\n\t\t// Get current date\r\n\t\tlet currentdate = new Date()\r\n\t\tlet datetime =\r\n\t\t\tcurrentdate.getDate() +\r\n\t\t\t'/' +\r\n\t\t\t(currentdate.getMonth() + 1) +\r\n\t\t\t'/' +\r\n\t\t\tcurrentdate.getFullYear() +\r\n\t\t\t' ' +\r\n\t\t\tcurrentdate.getHours() +\r\n\t\t\t':' +\r\n\t\t\tcurrentdate.getMinutes()\r\n\r\n\t\tsetCurrentDate(datetime)\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\tif (userInformation) {\r\n\t\t\tsetTodoApi({\r\n\t\t\t\t...todoApi,\r\n\t\t\t\tTeacherID: userInformation.UserInformationID\r\n\t\t\t})\r\n\t\t}\r\n\t}, [userInformation])\r\n\r\n\tconst moveToTest = (e, data) => {\r\n\t\te.preventDefault()\r\n\r\n\t\tlet testDate = moment(data.AppointmentDate).format('DD/MM/YYYY') + ' ' + data.Time\r\n\t\tconsole.log('Test DAte: ', testDate)\r\n\t\tif (currentDay < testDate) {\r\n\t\t\tsetisOpenNoti(true)\r\n\t\t} else {\r\n\t\t\trouter.push('')\r\n\t\t}\r\n\t}\r\n\r\n\tconst expandedRowRender = (record) => {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<ExamAppointmentPoint infoID={record.ExamAppointmentID} userID={record.UserInformationID} />\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Học viên',\r\n\t\t\tdataIndex: 'FullNameUnicode',\r\n\r\n\t\t\trender: (a) => <p className=\"font-weight-primary\">{a}</p>,\r\n\t\t\t...FilterColumn('FullNameUnicode', onSearch, handleReset, 'text')\r\n\t\t},\r\n\t\t{\r\n\t\t\twidth: 150,\r\n\t\t\ttitle: 'Đề test',\r\n\t\t\tdataIndex: 'ExamTopicName',\r\n\r\n\t\t\trender: (text, data: any) =>\r\n\t\t\t\tdata.TeacherID === userInformation.UserInformationID &&\r\n\t\t\t\t!data.isDone && (\r\n\t\t\t\t\t<Link\r\n\t\t\t\t\t\thref={{\r\n\t\t\t\t\t\t\tpathname: '/customer/service/service-test-teacher/detail/[slug]',\r\n\t\t\t\t\t\t\tquery: { slug: `${data.ID}`, teacherMarking: data.TeacherID, packageResultID: data.ID, type: 'test' }\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Tooltip title=\"Chấm bài ngay\">\r\n\t\t\t\t\t\t\t<a href=\"\" className=\"font-weight-link\">\r\n\t\t\t\t\t\t\t\t{text}\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Ngày hẹn',\r\n\t\t\tdataIndex: 'AppointmentDate',\r\n\t\t\trender: (date: any) => moment(date).format('DD/MM/YYYY')\r\n\t\t},\r\n\t\t{\r\n\t\t\twidth: 150,\r\n\t\t\ttitle: 'Giờ hẹn',\r\n\t\t\tdataIndex: 'Time'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Tư vấn viên',\r\n\t\t\tdataIndex: 'CounselorsName'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\tdataIndex: 'isDone',\r\n\t\t\talign: 'center',\r\n\r\n\t\t\tfilters: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Chưa chấm',\r\n\t\t\t\t\tvalue: false\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Đã chấm',\r\n\t\t\t\t\tvalue: true\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tonFilter: (value, record) => record.isDone === value,\r\n\t\t\trender: (type) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{type == true && <span className=\"tag green\">Đã chấm xong</span>}\r\n\t\t\t\t\t{type == false && <span className=\"tag gray\">Chưa chấm xong</span>}\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\trender: (data) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{data.TeacherID === userInformation.UserInformationID && (\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\thref={{\r\n\t\t\t\t\t\t\t\tpathname: '/customer/service/service-test-teacher/detail/[slug]',\r\n\t\t\t\t\t\t\t\tquery: { slug: `${data.ID}`, teacherMarking: data.TeacherID, packageResultID: data.ID, type: 'test' }\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Tooltip title={!data.isDone ? 'Chấm bài ngay' : 'Xem chi tiết'}>\r\n\t\t\t\t\t\t\t\t<button className=\"btn btn-icon edit\">\r\n\t\t\t\t\t\t\t\t\t<FormOutlined />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t}\r\n\t]\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{userInformation && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<NotiModal\r\n\t\t\t\t\t\tisOpen={isOpenNoti}\r\n\t\t\t\t\t\tisCancel={() => setisOpenNoti(false)}\r\n\t\t\t\t\t\tisOk={() => setisOpenNoti(false)}\r\n\t\t\t\t\t\tcontent=\"Chưa đến giờ làm đề test\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<ExpandTable\r\n\t\t\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\t\t\ttotalPage={totalPage && totalPage}\r\n\t\t\t\t\t\tgetPagination={(pageNumber: number) => getPagination(pageNumber)}\r\n\t\t\t\t\t\tloading={isLoading}\r\n\t\t\t\t\t\taddClass=\"basic-header\"\r\n\t\t\t\t\t\tTitlePage=\"Chấm bài hẹn test\"\r\n\t\t\t\t\t\t// TitleCard={\r\n\t\t\t\t\t\t//   <StudentAdviseForm\r\n\t\t\t\t\t\t//     listData={listDataForm}\r\n\t\t\t\t\t\t//     isLoading={isLoading}\r\n\t\t\t\t\t\t//     _onSubmit={(data: any) => _onSubmit(data)}\r\n\t\t\t\t\t\t//   />\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\tdataSource={dataSource}\r\n\t\t\t\t\t\tcolumns={columns}\r\n\t\t\t\t\t\tExtra={\r\n\t\t\t\t\t\t\t<div className=\"extra-table\">\r\n\t\t\t\t\t\t\t\t<FilterBase\r\n\t\t\t\t\t\t\t\t\tdataFilter={dataFilter}\r\n\t\t\t\t\t\t\t\t\thandleFilter={(listFilter: any) => handleFilter(listFilter)}\r\n\t\t\t\t\t\t\t\t\thandleReset={handleReset}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<SortBox handleSort={(value) => handleSort(value)} dataOption={dataOption} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\texpandable={{ expandedRowRender }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\nServiceTestTeacher.layout = LayoutBase\r\n"]},"metadata":{},"sourceType":"module"}