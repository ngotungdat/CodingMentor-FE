{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\CodingMentor\\\\CodingMentor-FE\\\\src\\\\components\\\\Global\\\\CourseExam\\\\CourseExamAdmin.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { studentApi } from '~/apiBase';\nimport { packageDetailApi } from '~/apiBase/package/package-detail';\nimport { courseExamApi } from '~/apiBase/package/course-exam';\nimport SortBox from '~/components/Elements/SortBox';\nimport ExpandTable from '~/components/ExpandTable';\nimport LayoutBase from '~/components/LayoutBase';\nimport FilterColumn from '~/components/Tables/FilterColumn';\nimport { useWrap } from '~/context/wrap';\nimport CourseExamDetail from '~/components/Global/CourseExam/CourseExamDetail';\n\nconst CourseExamAdmin = () => {\n  const onSearch = data => {\n    setCurrentPage(1);\n    setParams(_objectSpread(_objectSpread({}, listParamsDefault), {}, {\n      StudentName: data\n    }));\n  };\n\n  const handleReset = () => {\n    setCurrentPage(1);\n    setParams(listParamsDefault);\n  };\n\n  const columns = [_objectSpread(_objectSpread({\n    title: 'Học viên',\n    dataIndex: 'FullNameUnicode'\n  }, FilterColumn('FullNameUnicode', onSearch, handleReset, 'text')), {}, {\n    render: text => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-primary\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 22\n    }, this)\n  }), {\n    title: 'Email',\n    dataIndex: 'Email',\n    render: text => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-black\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 22\n    }, this)\n  }, {\n    title: 'Số điện thoại',\n    dataIndex: 'Mobile',\n    render: text => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-black\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 22\n    }, this)\n  }, {\n    title: 'Trạng thái',\n    dataIndex: 'isDone',\n    render: type => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [type == true && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tag green\",\n        children: \"\\u0110\\xE3 ch\\u1EA5m t\\u1EA5t c\\u1EA3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }, this), type == false && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tag gray\",\n        children: \"C\\xF3 b\\xE0i ch\\u01B0a ch\\u1EA5m\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }];\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: itemDetail,\n    1: setItemDetail\n  } = useState();\n  const sortOption = [{\n    dataSort: {\n      sortType: null\n    },\n    value: 1,\n    text: 'Mới cập nhật'\n  }, {\n    dataSort: {\n      sortType: true\n    },\n    value: 2,\n    text: 'Từ dưới lên'\n  }];\n  const {\n    0: dataFilter,\n    1: setDataFilter\n  } = useState([{\n    name: 'StudentID',\n    title: 'Học viên',\n    col: 'col-12',\n    type: 'select',\n    optionList: null,\n    value: null\n  }, {\n    name: 'SetPackageDetailID',\n    title: 'Bộ đề',\n    col: 'col-12',\n    type: 'select',\n    optionList: null,\n    value: null\n  }, {\n    name: 'isDone',\n    title: 'Trạng thái chấm bài',\n    col: 'col-12',\n    type: 'select',\n    optionList: [{\n      value: true,\n      title: 'Đã chấm xong'\n    }, {\n      value: false,\n      title: 'Chưa chấm xong'\n    }],\n    value: null\n  }, {\n    name: 'date-range',\n    title: 'Ngày tạo',\n    col: 'col-12',\n    type: 'date-range',\n    value: null\n  }]);\n\n  const handleFilter = listFilter => {\n    console.log('List Filter when submit: ', listFilter);\n    let newListFilter = {\n      pageIndex: 1,\n      fromDate: null,\n      toDate: null,\n      StudentID: null,\n      SetPackageDetailID: null,\n      isDone: null,\n      StudentName: null,\n      ExamTopicType: null\n    };\n    listFilter.forEach((item, index) => {\n      let key = item.name;\n      Object.keys(newListFilter).forEach(keyFilter => {\n        if (keyFilter == key) {\n          newListFilter[key] = item.value;\n        }\n      });\n    });\n    setParams(_objectSpread(_objectSpread(_objectSpread({}, listParamsDefault), newListFilter), {}, {\n      pageIndex: 1\n    }));\n  };\n\n  const handleSort = async option => {\n    setParams(_objectSpread(_objectSpread({}, listParamsDefault), {}, {\n      sortType: option.title.sortType\n    }));\n  };\n\n  const {\n    showNoti,\n    pageSize\n  } = useWrap();\n  const listParamsDefault = {\n    pageSize: pageSize,\n    pageIndex: currentPage,\n    sort: null,\n    sortType: null,\n    fromDate: null,\n    toDate: null,\n    StudentID: null,\n    SetPackageDetailID: null,\n    isDone: null,\n    StudentName: null,\n    ExamTopicType: null\n  };\n  const {\n    0: params,\n    1: setParams\n  } = useState(listParamsDefault);\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    0: packageSetResult,\n    1: setPackageSetResult\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: 'GET_ALL',\n    status: false\n  });\n\n  const setDataFunc = (name, data) => {\n    dataFilter.every((item, index) => {\n      if (item.name == name) {\n        item.optionList = data;\n        return false;\n      }\n\n      return true;\n    });\n    setDataFilter([...dataFilter]);\n  };\n\n  const getDataStudent = async () => {\n    try {\n      let res = await studentApi.getAll({\n        pageSize: pageSize,\n        pageIndex: 1\n      });\n\n      if (res.status == 200) {\n        const newData = res.data.data.map(item => ({\n          title: item.FullNameUnicode,\n          value: item.UserInformationID\n        }));\n        setDataFunc('StudentID', newData);\n      } // res.status == 204 && showNoti('danger', 'Không có dữ liệu học sinh này!');\n\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {}\n  };\n\n  const getDataPackageDetail = async () => {\n    try {\n      let res = await packageDetailApi.getAll({\n        pageSize: 99999,\n        pageIndex: 1\n      });\n\n      if (res.status == 200) {\n        const newData = res.data.data.map(item => ({\n          title: item.SetPackageName,\n          value: item.ID\n        }));\n        setDataFunc('SetPackageDetailID', newData);\n      }\n\n      res.status == 204 && showNoti('danger', 'Không có dữ liệu bộ đề này!');\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {}\n  };\n\n  const getPagination = pageNumber => {\n    setCurrentPage(pageNumber);\n    setParams(_objectSpread(_objectSpread({}, params), {}, {\n      pageIndex: currentPage\n    }));\n  };\n\n  const onFetchData = () => {\n    setParams(_objectSpread({}, params));\n  };\n\n  const getDataSetCourseExam = page => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    (async () => {\n      try {\n        let res = await courseExamApi.getAllStudent(_objectSpread(_objectSpread({}, params), {}, {\n          pageIndex: page\n        })); //@ts-ignore\n\n        res.status == 200 && setPackageSetResult(res.data.data);\n\n        if (res.status == 204) {\n          setCurrentPage(1);\n          setPackageSetResult([]);\n        } else setTotalPage(res.data.totalRow);\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'GET_ALL',\n          status: false\n        });\n      }\n    })();\n  };\n\n  useEffect(() => {\n    getDataStudent();\n    getDataPackageDetail();\n  }, []);\n  useEffect(() => {\n    getDataSetCourseExam(currentPage);\n  }, [params]);\n\n  const expandedRowRender = (data, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(CourseExamDetail, {\n        studentID: data.UserInformationID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 5\n      }, this)\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ExpandTable, {\n    currentPage: currentPage,\n    loading: isLoading,\n    totalPage: totalPage && totalPage,\n    getPagination: pageNumber => getPagination(pageNumber),\n    addClass: \"basic-header\",\n    TitlePage: \"\",\n    dataSource: packageSetResult,\n    columns: columns,\n    TitleCard: null,\n    Extra: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"extra-table\",\n      children: /*#__PURE__*/_jsxDEV(SortBox, {\n        dataOption: sortOption,\n        handleSort: value => handleSort(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 5\n    }, this),\n    handleExpand: data => setItemDetail(data),\n    expandable: {\n      expandedRowRender\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 3\n  }, this);\n};\n\nCourseExamAdmin.layout = LayoutBase;\nexport default CourseExamAdmin;","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/components/Global/CourseExam/CourseExamAdmin.tsx"],"names":["React","useEffect","useState","studentApi","packageDetailApi","courseExamApi","SortBox","ExpandTable","LayoutBase","FilterColumn","useWrap","CourseExamDetail","CourseExamAdmin","onSearch","data","setCurrentPage","setParams","listParamsDefault","StudentName","handleReset","columns","title","dataIndex","render","text","type","currentPage","itemDetail","setItemDetail","sortOption","dataSort","sortType","value","dataFilter","setDataFilter","name","col","optionList","handleFilter","listFilter","console","log","newListFilter","pageIndex","fromDate","toDate","StudentID","SetPackageDetailID","isDone","ExamTopicType","forEach","item","index","key","Object","keys","keyFilter","handleSort","option","showNoti","pageSize","sort","params","totalPage","setTotalPage","packageSetResult","setPackageSetResult","isLoading","setIsLoading","status","setDataFunc","every","getDataStudent","res","getAll","newData","map","FullNameUnicode","UserInformationID","error","message","getDataPackageDetail","SetPackageName","ID","getPagination","pageNumber","onFetchData","getDataSetCourseExam","page","getAllStudent","totalRow","expandedRowRender","layout"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react'\r\n\r\nimport { studentApi } from '~/apiBase'\r\nimport { packageDetailApi } from '~/apiBase/package/package-detail'\r\nimport { courseExamApi } from '~/apiBase/package/course-exam'\r\nimport SortBox from '~/components/Elements/SortBox'\r\nimport ExpandTable from '~/components/ExpandTable'\r\n\r\nimport LayoutBase from '~/components/LayoutBase'\r\nimport FilterColumn from '~/components/Tables/FilterColumn'\r\nimport { useWrap } from '~/context/wrap'\r\nimport CourseExamDetail from '~/components/Global/CourseExam/CourseExamDetail'\r\n\r\nconst CourseExamAdmin = () => {\r\n\tconst onSearch = (data) => {\r\n\t\tsetCurrentPage(1)\r\n\t\tsetParams({\r\n\t\t\t...listParamsDefault,\r\n\t\t\tStudentName: data\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetCurrentPage(1)\r\n\t\tsetParams(listParamsDefault)\r\n\t}\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Học viên',\r\n\t\t\tdataIndex: 'FullNameUnicode',\r\n\t\t\t...FilterColumn('FullNameUnicode', onSearch, handleReset, 'text'),\r\n\t\t\trender: (text) => <p className=\"font-weight-primary\">{text}</p>\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Email',\r\n\t\t\tdataIndex: 'Email',\r\n\t\t\trender: (text) => <p className=\"font-weight-black\">{text}</p>\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Số điện thoại',\r\n\t\t\tdataIndex: 'Mobile',\r\n\t\t\trender: (text) => <p className=\"font-weight-black\">{text}</p>\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\tdataIndex: 'isDone',\r\n\t\t\trender: (type) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{type == true && <span className=\"tag green\">Đã chấm tất cả</span>}\r\n\t\t\t\t\t{type == false && <span className=\"tag gray\">Có bài chưa chấm</span>}\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t}\r\n\t]\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\tconst [itemDetail, setItemDetail] = useState()\r\n\r\n\tconst sortOption = [\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsortType: null\r\n\t\t\t},\r\n\t\t\tvalue: 1,\r\n\t\t\ttext: 'Mới cập nhật'\r\n\t\t},\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsortType: true\r\n\t\t\t},\r\n\t\t\tvalue: 2,\r\n\t\t\ttext: 'Từ dưới lên'\r\n\t\t}\r\n\t]\r\n\r\n\tconst [dataFilter, setDataFilter] = useState([\r\n\t\t{\r\n\t\t\tname: 'StudentID',\r\n\t\t\ttitle: 'Học viên',\r\n\t\t\tcol: 'col-12',\r\n\t\t\ttype: 'select',\r\n\t\t\toptionList: null,\r\n\t\t\tvalue: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'SetPackageDetailID',\r\n\t\t\ttitle: 'Bộ đề',\r\n\t\t\tcol: 'col-12',\r\n\t\t\ttype: 'select',\r\n\t\t\toptionList: null,\r\n\t\t\tvalue: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'isDone',\r\n\t\t\ttitle: 'Trạng thái chấm bài',\r\n\t\t\tcol: 'col-12',\r\n\t\t\ttype: 'select',\r\n\t\t\toptionList: [\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue: true,\r\n\t\t\t\t\ttitle: 'Đã chấm xong'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue: false,\r\n\t\t\t\t\ttitle: 'Chưa chấm xong'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'date-range',\r\n\t\t\ttitle: 'Ngày tạo',\r\n\t\t\tcol: 'col-12',\r\n\t\t\ttype: 'date-range',\r\n\t\t\tvalue: null\r\n\t\t}\r\n\t])\r\n\r\n\tconst handleFilter = (listFilter) => {\r\n\t\tconsole.log('List Filter when submit: ', listFilter)\r\n\r\n\t\tlet newListFilter = {\r\n\t\t\tpageIndex: 1,\r\n\t\t\tfromDate: null,\r\n\t\t\ttoDate: null,\r\n\t\t\tStudentID: null,\r\n\t\t\tSetPackageDetailID: null,\r\n\t\t\tisDone: null,\r\n\t\t\tStudentName: null,\r\n\t\t\tExamTopicType: null\r\n\t\t}\r\n\t\tlistFilter.forEach((item, index) => {\r\n\t\t\tlet key = item.name\r\n\t\t\tObject.keys(newListFilter).forEach((keyFilter) => {\r\n\t\t\t\tif (keyFilter == key) {\r\n\t\t\t\t\tnewListFilter[key] = item.value\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t\tsetParams({ ...listParamsDefault, ...newListFilter, pageIndex: 1 })\r\n\t}\r\n\r\n\tconst handleSort = async (option) => {\r\n\t\tsetParams({\r\n\t\t\t...listParamsDefault,\r\n\t\t\tsortType: option.title.sortType\r\n\t\t})\r\n\t}\r\n\r\n\tconst { showNoti, pageSize } = useWrap()\r\n\tconst listParamsDefault = {\r\n\t\tpageSize: pageSize,\r\n\t\tpageIndex: currentPage,\r\n\t\tsort: null,\r\n\t\tsortType: null,\r\n\t\tfromDate: null,\r\n\t\ttoDate: null,\r\n\t\tStudentID: null,\r\n\t\tSetPackageDetailID: null,\r\n\t\tisDone: null,\r\n\t\tStudentName: null,\r\n\t\tExamTopicType: null\r\n\t}\r\n\tconst [params, setParams] = useState(listParamsDefault)\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\tconst [packageSetResult, setPackageSetResult] = useState<ISetPackageResult[]>([])\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: 'GET_ALL',\r\n\t\tstatus: false\r\n\t})\r\n\r\n\tconst setDataFunc = (name, data) => {\r\n\t\tdataFilter.every((item, index) => {\r\n\t\t\tif (item.name == name) {\r\n\t\t\t\titem.optionList = data\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t})\r\n\t\tsetDataFilter([...dataFilter])\r\n\t}\r\n\r\n\tconst getDataStudent = async () => {\r\n\t\ttry {\r\n\t\t\tlet res = await studentApi.getAll({ pageSize: pageSize, pageIndex: 1 })\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tconst newData = res.data.data.map((item) => ({\r\n\t\t\t\t\ttitle: item.FullNameUnicode,\r\n\t\t\t\t\tvalue: item.UserInformationID\r\n\t\t\t\t}))\r\n\t\t\t\tsetDataFunc('StudentID', newData)\r\n\t\t\t}\r\n\r\n\t\t\t// res.status == 204 && showNoti('danger', 'Không có dữ liệu học sinh này!');\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t}\r\n\t}\r\n\r\n\tconst getDataPackageDetail = async () => {\r\n\t\ttry {\r\n\t\t\tlet res = await packageDetailApi.getAll({\r\n\t\t\t\tpageSize: 99999,\r\n\t\t\t\tpageIndex: 1\r\n\t\t\t})\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tconst newData = res.data.data.map((item) => ({\r\n\t\t\t\t\ttitle: item.SetPackageName,\r\n\t\t\t\t\tvalue: item.ID\r\n\t\t\t\t}))\r\n\t\t\t\tsetDataFunc('SetPackageDetailID', newData)\r\n\t\t\t}\r\n\r\n\t\t\tres.status == 204 && showNoti('danger', 'Không có dữ liệu bộ đề này!')\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t}\r\n\t}\r\n\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tsetCurrentPage(pageNumber)\r\n\t\tsetParams({\r\n\t\t\t...params,\r\n\t\t\tpageIndex: currentPage\r\n\t\t})\r\n\t}\r\n\r\n\tconst onFetchData = () => {\r\n\t\tsetParams({\r\n\t\t\t...params\r\n\t\t})\r\n\t}\r\n\r\n\tconst getDataSetCourseExam = (page: any) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\t;(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tlet res = await courseExamApi.getAllStudent({ ...params, pageIndex: page })\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tres.status == 200 && setPackageSetResult(res.data.data)\r\n\t\t\t\tif (res.status == 204) {\r\n\t\t\t\t\tsetCurrentPage(1)\r\n\t\t\t\t\tsetPackageSetResult([])\r\n\t\t\t\t} else setTotalPage(res.data.totalRow)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})()\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tgetDataStudent()\r\n\t\tgetDataPackageDetail()\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tgetDataSetCourseExam(currentPage)\r\n\t}, [params])\r\n\r\n\tconst expandedRowRender = (data, index) => {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<CourseExamDetail studentID={data.UserInformationID} />\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ExpandTable\r\n\t\t\tcurrentPage={currentPage}\r\n\t\t\tloading={isLoading}\r\n\t\t\ttotalPage={totalPage && totalPage}\r\n\t\t\tgetPagination={(pageNumber: number) => getPagination(pageNumber)}\r\n\t\t\taddClass=\"basic-header\"\r\n\t\t\tTitlePage=\"\"\r\n\t\t\tdataSource={packageSetResult}\r\n\t\t\tcolumns={columns}\r\n\t\t\tTitleCard={null}\r\n\t\t\tExtra={\r\n\t\t\t\t<div className=\"extra-table\">\r\n\t\t\t\t\t{/* <FilterBase\r\n\t\t\t\t\t\tdataFilter={dataFilter}\r\n\t\t\t\t\t\thandleFilter={(listFilter: any) => handleFilter(listFilter)}\r\n\t\t\t\t\t\thandleReset={handleReset}\r\n\t\t\t\t\t/> */}\r\n\r\n\t\t\t\t\t<SortBox dataOption={sortOption} handleSort={(value) => handleSort(value)} />\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\thandleExpand={(data) => setItemDetail(data)}\r\n\t\t\texpandable={{ expandedRowRender }}\r\n\t\t/>\r\n\t)\r\n}\r\nCourseExamAdmin.layout = LayoutBase\r\nexport default CourseExamAdmin\r\n"]},"metadata":{},"sourceType":"module"}