{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Dashboard\\\\RevenueChart.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Bar, CartesianGrid, ComposedChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis, LineChart } from 'recharts';\nimport { Card, Radio, Select, Skeleton } from 'antd';\nimport { statisticalApi } from './../../apiBase/statistical/statistical-total';\n\nconst RevenueChart = () => {\n  const {\n    0: typeView,\n    1: setTypeView\n  } = useState(3);\n  const {\n    0: statisticalRevenueYear,\n    1: setStatisticalRevenueYear\n  } = useState([]);\n  const {\n    0: statisticalRevenueMonth,\n    1: setStatisticalRevenueMonth\n  } = useState([]);\n  const {\n    0: statisticalRevenueDay,\n    1: setStatisticalRevenueDay\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    status: '',\n    loading: false\n  });\n  const {\n    0: todoApi,\n    1: setTodoApi\n  } = useState({\n    branch: 0,\n    StartYear: 2017,\n    EndYear: 2022,\n    Year: new Date().getFullYear(),\n    Month: new Date().getMonth() + 1\n  });\n\n  const onChange = e => {\n    setTypeView(e.target.value);\n  };\n\n  const {\n    Option\n  } = Select;\n\n  const handleChangeYear = value => {\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), {}, {\n      Year: value\n    }));\n  };\n\n  const handleChangeMonth = value => {\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), {}, {\n      Month: value\n    }));\n  };\n\n  const formatYAxis = tickItem => {\n    return new Intl.NumberFormat('de-DE').format(tickItem);\n  };\n\n  const formatTooltip = (value, name, props) => {\n    return new Intl.NumberFormat('de-DE').format(value);\n  };\n\n  const getStatisticalRevenueYear = async () => {\n    setIsLoading({\n      status: 'GET_STAT_REVENUE',\n      loading: true\n    });\n\n    try {\n      let res = await statisticalApi.getStatisticalRevenueYear(todoApi);\n\n      if (res.status == 200) {\n        setStatisticalRevenueYear(res.data.data);\n      }\n\n      if (res.status == 204) {\n        setStatisticalRevenueYear([]);\n      }\n    } catch (error) {// showNoti(\"danger\", \"get data statistical revenue year error\");\n    } finally {\n      setIsLoading({\n        status: 'GET_STAT_REVENUE',\n        loading: false\n      });\n    }\n  };\n\n  const getStatisticalRevenueMonth = async () => {\n    setIsLoading({\n      status: 'GET_STAT_REVENUE',\n      loading: true\n    });\n\n    try {\n      let res = await statisticalApi.getStatisticalRevenueMonth(todoApi);\n\n      if (res.status == 200) {\n        setStatisticalRevenueMonth(res.data.data);\n      }\n\n      if (res.status == 204) {\n        setStatisticalRevenueMonth([]);\n      }\n    } catch (error) {// showNoti(\"danger\", \"get data revenue day faile\");\n    } finally {\n      setIsLoading({\n        status: 'GET_STAT_REVENUE',\n        loading: false\n      });\n    }\n  };\n\n  const getStatisticalRevenueDay = async () => {\n    setIsLoading({\n      status: 'GET_STAT_REVENUE',\n      loading: true\n    });\n\n    try {\n      let res = await statisticalApi.getStatisticalRevenueDay(todoApi);\n\n      if (res.status == 200) {\n        setStatisticalRevenueDay(res.data.data);\n      }\n\n      if (res.status == 204) {\n        setStatisticalRevenueDay([]);\n      }\n    } catch (error) {// showNoti(\"danger\", \"get data revenue day faile\");\n    } finally {\n      setIsLoading({\n        status: 'GET_STAT_REVENUE',\n        loading: false\n      });\n    }\n  };\n\n  const renderView = () => {\n    if (typeView == 1) {\n      return /*#__PURE__*/_jsxDEV(LineChart, {\n        data: statisticalRevenueMonth,\n        syncId: \"anyId\",\n        margin: {\n          top: 10,\n          right: 0,\n          left: 25,\n          bottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"Month\",\n          tickMargin: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          tickFormatter: formatYAxis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: formatTooltip,\n          labelFormatter: value => `Tháng ${value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Revenue\",\n          stroke: \"#003366\",\n          fill: \"#003366\",\n          activeDot: {\n            r: 8\n          },\n          name: \"Doanh thu(\\u0111\\u1ED3ng)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"Revenue\",\n          fill: \"#0080FF\",\n          name: \"Doanh thu(\\u0111\\u1ED3ng)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this);\n    } else if (typeView == 2) {\n      return /*#__PURE__*/_jsxDEV(ComposedChart, {\n        data: statisticalRevenueYear,\n        margin: {\n          top: 10,\n          right: 0,\n          left: 25,\n          bottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: formatYAxis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: formatTooltip,\n          labelFormatter: value => `Năm ${value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#f5f5f5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"Revenue\",\n          fill: \"#0080FF\",\n          barSize: 20,\n          name: \"Doanh thu(\\u0111\\u1ED3ng)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }, this);\n    } else if (typeView == 3) {\n      return /*#__PURE__*/_jsxDEV(LineChart, {\n        data: statisticalRevenueDay,\n        syncId: \"anyId\",\n        margin: {\n          top: 10,\n          right: 10,\n          left: -35,\n          bottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: formatYAxis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: formatTooltip,\n          labelFormatter: value => `Ngày ${value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Revenue\",\n          stroke: \"#003366\",\n          fill: \"#003366\",\n          activeDot: {\n            r: 8\n          },\n          name: \"Doanh thu(\\u0111\\u1ED3ng)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"Revenue\",\n          fill: \"#0080FF\",\n          name: \"Doanh thu(\\u0111\\u1ED3ng)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }, this);\n    }\n  };\n\n  const renderExtra = () => {\n    if (typeView == 1) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          className: \"mr-3\",\n          value: todoApi.Year,\n          style: {\n            width: 120\n          },\n          onChange: handleChangeYear,\n          loading: isLoading.loading && isLoading.status === 'GET_STAT_REVENUE',\n          children: statisticalRevenueYear.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(Option, {\n              value: item.Year,\n              children: [\"N\\u0103m \", item.Year]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 9\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 6\n        }, this)\n      }, void 0, false);\n    } else if (typeView == 3) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          className: \"mr-3\",\n          loading: isLoading.loading && isLoading.status === 'GET_STAT_REVENUE',\n          value: todoApi.Year,\n          style: {\n            width: 120\n          },\n          onChange: handleChangeYear,\n          children: statisticalRevenueYear.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(Option, {\n              value: item.Year,\n              children: [\"N\\u0103m \", item.Year]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 9\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          className: \"mr-3\",\n          loading: isLoading.loading && isLoading.status === 'GET_STAT_REVENUE',\n          value: todoApi.Month,\n          style: {\n            width: 120\n          },\n          onChange: handleChangeMonth,\n          children: statisticalRevenueMonth.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(Option, {\n              value: item.Month,\n              children: [\"Th\\xE1ng \", item.Month]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 9\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true);\n    }\n  };\n\n  useEffect(() => {\n    getStatisticalRevenueYear();\n    getStatisticalRevenueMonth();\n    getStatisticalRevenueDay();\n  }, [todoApi]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading.status === 'GET_STAT_REVENUE' && isLoading.loading == true ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      active: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"BI\\u1EC2U \\u0110\\u1ED2 DOANH THU\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this),\n          style: {\n            borderRadius: 8\n          },\n          extra: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderExtra(), /*#__PURE__*/_jsxDEV(Radio.Group, {\n              onChange: onChange,\n              optionType: \"button\",\n              buttonStyle: \"solid\",\n              value: typeView,\n              children: [/*#__PURE__*/_jsxDEV(Radio.Button, {\n                value: 3,\n                children: \"Ng\\xE0y\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Radio.Button, {\n                value: 1,\n                children: \"Th\\xE1ng\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Radio.Button, {\n                value: 2,\n                children: \"N\\u0103m\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true),\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 280,\n            children: renderView()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\nexport default RevenueChart;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Dashboard/RevenueChart.tsx"],"names":["React","useState","useEffect","Bar","CartesianGrid","ComposedChart","Line","ResponsiveContainer","Tooltip","XAxis","YAxis","LineChart","Card","Radio","Select","Skeleton","statisticalApi","RevenueChart","typeView","setTypeView","statisticalRevenueYear","setStatisticalRevenueYear","statisticalRevenueMonth","setStatisticalRevenueMonth","statisticalRevenueDay","setStatisticalRevenueDay","isLoading","setIsLoading","status","loading","todoApi","setTodoApi","branch","StartYear","EndYear","Year","Date","getFullYear","Month","getMonth","onChange","e","target","value","Option","handleChangeYear","handleChangeMonth","formatYAxis","tickItem","Intl","NumberFormat","format","formatTooltip","name","props","getStatisticalRevenueYear","res","data","error","getStatisticalRevenueMonth","getStatisticalRevenueDay","renderView","top","right","left","bottom","r","renderExtra","width","map","item","index","borderRadius"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,aAAd,EAA6BC,aAA7B,EAA4CC,IAA5C,EAAkDC,mBAAlD,EAAuEC,OAAvE,EAAgFC,KAAhF,EAAuFC,KAAvF,EAA8FC,SAA9F,QAA+G,UAA/G;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,MAA9C;AACA,SAASC,cAAT,QAA+B,+CAA/B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BlB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM;AAAA,OAACmB,sBAAD;AAAA,OAAyBC;AAAzB,MAAsDpB,QAAQ,CAAqB,EAArB,CAApE;AACA,QAAM;AAAA,OAACqB,uBAAD;AAAA,OAA0BC;AAA1B,MAAwDtB,QAAQ,CAAsB,EAAtB,CAAtE;AACA,QAAM;AAAA,OAACuB,qBAAD;AAAA,OAAwBC;AAAxB,MAAoDxB,QAAQ,CAAoB,EAApB,CAAlE;AACA,QAAM;AAAA,OAACyB,SAAD;AAAA,OAAYC;AAAZ,MAA4B1B,QAAQ,CAAC;AAC1C2B,IAAAA,MAAM,EAAE,EADkC;AAE1CC,IAAAA,OAAO,EAAE;AAFiC,GAAD,CAA1C;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwB9B,QAAQ,CAAC;AACtC+B,IAAAA,MAAM,EAAE,CAD8B;AAEtCC,IAAAA,SAAS,EAAE,IAF2B;AAGtCC,IAAAA,OAAO,EAAE,IAH6B;AAItCC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAJgC;AAKtCC,IAAAA,KAAK,EAAE,IAAIF,IAAJ,GAAWG,QAAX,KAAwB;AALO,GAAD,CAAtC;;AAQA,QAAMC,QAAQ,GAAIC,CAAD,IAAO;AACvBtB,IAAAA,WAAW,CAACsB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACA,GAFD;;AAIA,QAAM;AAAEC,IAAAA;AAAF,MAAa9B,MAAnB;;AAEA,QAAM+B,gBAAgB,GAAIF,KAAD,IAAW;AACnCZ,IAAAA,UAAU,iCAAMD,OAAN;AAAeK,MAAAA,IAAI,EAAEQ;AAArB,OAAV;AACA,GAFD;;AAGA,QAAMG,iBAAiB,GAAIH,KAAD,IAAW;AACpCZ,IAAAA,UAAU,iCAAMD,OAAN;AAAeQ,MAAAA,KAAK,EAAEK;AAAtB,OAAV;AACA,GAFD;;AAIA,QAAMI,WAAW,GAAIC,QAAD,IAAc;AACjC,WAAO,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+BC,MAA/B,CAAsCH,QAAtC,CAAP;AACA,GAFD;;AAIA,QAAMI,aAAa,GAAG,CAACT,KAAD,EAAQU,IAAR,EAAcC,KAAd,KAAwB;AAC7C,WAAO,IAAIL,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+BC,MAA/B,CAAsCR,KAAtC,CAAP;AACA,GAFD;;AAIA,QAAMY,yBAAyB,GAAG,YAAY;AAC7C5B,IAAAA,YAAY,CAAC;AAAEC,MAAAA,MAAM,EAAE,kBAAV;AAA8BC,MAAAA,OAAO,EAAE;AAAvC,KAAD,CAAZ;;AACA,QAAI;AACH,UAAI2B,GAAG,GAAG,MAAMxC,cAAc,CAACuC,yBAAf,CAAyCzB,OAAzC,CAAhB;;AACA,UAAI0B,GAAG,CAAC5B,MAAJ,IAAc,GAAlB,EAAuB;AACtBP,QAAAA,yBAAyB,CAACmC,GAAG,CAACC,IAAJ,CAASA,IAAV,CAAzB;AACA;;AACD,UAAID,GAAG,CAAC5B,MAAJ,IAAc,GAAlB,EAAuB;AACtBP,QAAAA,yBAAyB,CAAC,EAAD,CAAzB;AACA;AACD,KARD,CAQE,OAAOqC,KAAP,EAAc,CACf;AACA,KAVD,SAUU;AACT/B,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAE,kBAAV;AAA8BC,QAAAA,OAAO,EAAE;AAAvC,OAAD,CAAZ;AACA;AACD,GAfD;;AAiBA,QAAM8B,0BAA0B,GAAG,YAAY;AAC9ChC,IAAAA,YAAY,CAAC;AAAEC,MAAAA,MAAM,EAAE,kBAAV;AAA8BC,MAAAA,OAAO,EAAE;AAAvC,KAAD,CAAZ;;AACA,QAAI;AACH,UAAI2B,GAAG,GAAG,MAAMxC,cAAc,CAAC2C,0BAAf,CAA0C7B,OAA1C,CAAhB;;AACA,UAAI0B,GAAG,CAAC5B,MAAJ,IAAc,GAAlB,EAAuB;AACtBL,QAAAA,0BAA0B,CAACiC,GAAG,CAACC,IAAJ,CAASA,IAAV,CAA1B;AACA;;AACD,UAAID,GAAG,CAAC5B,MAAJ,IAAc,GAAlB,EAAuB;AACtBL,QAAAA,0BAA0B,CAAC,EAAD,CAA1B;AACA;AACD,KARD,CAQE,OAAOmC,KAAP,EAAc,CACf;AACA,KAVD,SAUU;AACT/B,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAE,kBAAV;AAA8BC,QAAAA,OAAO,EAAE;AAAvC,OAAD,CAAZ;AACA;AACD,GAfD;;AAiBA,QAAM+B,wBAAwB,GAAG,YAAY;AAC5CjC,IAAAA,YAAY,CAAC;AAAEC,MAAAA,MAAM,EAAE,kBAAV;AAA8BC,MAAAA,OAAO,EAAE;AAAvC,KAAD,CAAZ;;AACA,QAAI;AACH,UAAI2B,GAAG,GAAG,MAAMxC,cAAc,CAAC4C,wBAAf,CAAwC9B,OAAxC,CAAhB;;AACA,UAAI0B,GAAG,CAAC5B,MAAJ,IAAc,GAAlB,EAAuB;AACtBH,QAAAA,wBAAwB,CAAC+B,GAAG,CAACC,IAAJ,CAASA,IAAV,CAAxB;AACA;;AACD,UAAID,GAAG,CAAC5B,MAAJ,IAAc,GAAlB,EAAuB;AACtBH,QAAAA,wBAAwB,CAAC,EAAD,CAAxB;AACA;AACD,KARD,CAQE,OAAOiC,KAAP,EAAc,CACf;AACA,KAVD,SAUU;AACT/B,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAE,kBAAV;AAA8BC,QAAAA,OAAO,EAAE;AAAvC,OAAD,CAAZ;AACA;AACD,GAfD;;AAiBA,QAAMgC,UAAU,GAAG,MAAM;AACxB,QAAI3C,QAAQ,IAAI,CAAhB,EAAmB;AAClB,0BACC,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEI,uBAAjB;AAA0C,QAAA,MAAM,EAAC,OAAjD;AAAyD,QAAA,MAAM,EAAE;AAAEwC,UAAAA,GAAG,EAAE,EAAP;AAAWC,UAAAA,KAAK,EAAE,CAAlB;AAAqBC,UAAAA,IAAI,EAAE,EAA3B;AAA+BC,UAAAA,MAAM,EAAE;AAAvC,SAAjE;AAAA,gCACC,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC,OAAf;AAAuB,UAAA,UAAU,EAAE;AAAnC;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,aAAa,EAAElB;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC,QAAC,aAAD;AAAe,UAAA,eAAe,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAHD,eAIC,QAAC,OAAD;AAAS,UAAA,SAAS,EAAEK,aAApB;AAAmC,UAAA,cAAc,EAAGT,KAAD,IAAY,SAAQA,KAAM;AAA7E;AAAA;AAAA;AAAA;AAAA,gBAJD,eAKC,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,UAAX;AAAsB,UAAA,OAAO,EAAC,SAA9B;AAAwC,UAAA,MAAM,EAAC,SAA/C;AAAyD,UAAA,IAAI,EAAC,SAA9D;AAAwE,UAAA,SAAS,EAAE;AAAEuB,YAAAA,CAAC,EAAE;AAAL,WAAnF;AAA6F,UAAA,IAAI,EAAC;AAAlG;AAAA;AAAA;AAAA;AAAA,gBALD,eAMC,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,SAAb;AAAuB,UAAA,IAAI,EAAC,SAA5B;AAAsC,UAAA,IAAI,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAND;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAUA,KAXD,MAWO,IAAIhD,QAAQ,IAAI,CAAhB,EAAmB;AACzB,0BACC,QAAC,aAAD;AAAe,QAAA,IAAI,EAAEE,sBAArB;AAA6C,QAAA,MAAM,EAAE;AAAE0C,UAAAA,GAAG,EAAE,EAAP;AAAWC,UAAAA,KAAK,EAAE,CAAlB;AAAqBC,UAAAA,IAAI,EAAE,EAA3B;AAA+BC,UAAAA,MAAM,EAAE;AAAvC,SAArD;AAAA,gCACC,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,KAAD;AAAO,UAAA,aAAa,EAAElB;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC,QAAC,OAAD;AAAS,UAAA,SAAS,EAAEK,aAApB;AAAmC,UAAA,cAAc,EAAGT,KAAD,IAAY,OAAMA,KAAM;AAA3E;AAAA;AAAA;AAAA;AAAA,gBAHD,eAIC,QAAC,aAAD;AAAe,UAAA,MAAM,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAJD,eAMC,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,SAAb;AAAuB,UAAA,IAAI,EAAC,SAA5B;AAAsC,UAAA,OAAO,EAAE,EAA/C;AAAmD,UAAA,IAAI,EAAC;AAAxD;AAAA;AAAA;AAAA;AAAA,gBAND;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAUA,KAXM,MAWA,IAAIzB,QAAQ,IAAI,CAAhB,EAAmB;AACzB,0BACC,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEM,qBAAjB;AAAwC,QAAA,MAAM,EAAC,OAA/C;AAAuD,QAAA,MAAM,EAAE;AAAEsC,UAAAA,GAAG,EAAE,EAAP;AAAWC,UAAAA,KAAK,EAAE,EAAlB;AAAsBC,UAAAA,IAAI,EAAE,CAAC,EAA7B;AAAiCC,UAAAA,MAAM,EAAE;AAAzC,SAA/D;AAAA,gCACC,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,KAAD;AAAO,UAAA,aAAa,EAAElB;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC,QAAC,aAAD;AAAe,UAAA,eAAe,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAHD,eAIC,QAAC,OAAD;AAAS,UAAA,SAAS,EAAEK,aAApB;AAAmC,UAAA,cAAc,EAAGT,KAAD,IAAY,QAAOA,KAAM;AAA5E;AAAA;AAAA;AAAA;AAAA,gBAJD,eAKC,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,UAAX;AAAsB,UAAA,OAAO,EAAC,SAA9B;AAAwC,UAAA,MAAM,EAAC,SAA/C;AAAyD,UAAA,IAAI,EAAC,SAA9D;AAAwE,UAAA,SAAS,EAAE;AAAEuB,YAAAA,CAAC,EAAE;AAAL,WAAnF;AAA6F,UAAA,IAAI,EAAC;AAAlG;AAAA;AAAA;AAAA;AAAA,gBALD,eAMC,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,SAAb;AAAuB,UAAA,IAAI,EAAC,SAA5B;AAAsC,UAAA,IAAI,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAND;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAUA;AACD,GAnCD;;AAqCA,QAAMC,WAAW,GAAG,MAAM;AACzB,QAAIjD,QAAQ,IAAI,CAAhB,EAAmB;AAClB,0BACC;AAAA,+BACC,QAAC,MAAD;AACC,UAAA,SAAS,EAAC,MADX;AAEC,UAAA,KAAK,EAAEY,OAAO,CAACK,IAFhB;AAGC,UAAA,KAAK,EAAE;AAAEiC,YAAAA,KAAK,EAAE;AAAT,WAHR;AAIC,UAAA,QAAQ,EAAEvB,gBAJX;AAKC,UAAA,OAAO,EAAEnB,SAAS,CAACG,OAAV,IAAqBH,SAAS,CAACE,MAAV,KAAqB,kBALpD;AAAA,oBAOER,sBAAsB,CAACiD,GAAvB,CAA2B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5C,gCACC,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAED,IAAI,CAACnC,IAApB;AAAA,sCACMmC,IAAI,CAACnC,IADX;AAAA,eAA+BoC,KAA/B;AAAA;AAAA;AAAA;AAAA,oBADD;AAKA,WANA;AAPF;AAAA;AAAA;AAAA;AAAA;AADD,uBADD;AAmBA,KApBD,MAoBO,IAAIrD,QAAQ,IAAI,CAAhB,EAAmB;AACzB,0BACC;AAAA,gCACC,QAAC,MAAD;AACC,UAAA,SAAS,EAAC,MADX;AAEC,UAAA,OAAO,EAAEQ,SAAS,CAACG,OAAV,IAAqBH,SAAS,CAACE,MAAV,KAAqB,kBAFpD;AAGC,UAAA,KAAK,EAAEE,OAAO,CAACK,IAHhB;AAIC,UAAA,KAAK,EAAE;AAAEiC,YAAAA,KAAK,EAAE;AAAT,WAJR;AAKC,UAAA,QAAQ,EAAEvB,gBALX;AAAA,oBAOEzB,sBAAsB,CAACiD,GAAvB,CAA2B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5C,gCACC,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAED,IAAI,CAACnC,IAApB;AAAA,sCACMmC,IAAI,CAACnC,IADX;AAAA,eAA+BoC,KAA/B;AAAA;AAAA;AAAA;AAAA,oBADD;AAKA,WANA;AAPF;AAAA;AAAA;AAAA;AAAA,gBADD,eAgBC,QAAC,MAAD;AACC,UAAA,SAAS,EAAC,MADX;AAEC,UAAA,OAAO,EAAE7C,SAAS,CAACG,OAAV,IAAqBH,SAAS,CAACE,MAAV,KAAqB,kBAFpD;AAGC,UAAA,KAAK,EAAEE,OAAO,CAACQ,KAHhB;AAIC,UAAA,KAAK,EAAE;AAAE8B,YAAAA,KAAK,EAAE;AAAT,WAJR;AAKC,UAAA,QAAQ,EAAEtB,iBALX;AAAA,oBAOExB,uBAAuB,CAAC+C,GAAxB,CAA4B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7C,gCACC,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAED,IAAI,CAAChC,KAApB;AAAA,sCACQgC,IAAI,CAAChC,KADb;AAAA,eAAgCiC,KAAhC;AAAA;AAAA;AAAA;AAAA,oBADD;AAKA,WANA;AAPF;AAAA;AAAA;AAAA;AAAA,gBAhBD;AAAA,sBADD;AAkCA;AACD,GAzDD;;AA2DArE,EAAAA,SAAS,CAAC,MAAM;AACfqD,IAAAA,yBAAyB;AACzBI,IAAAA,0BAA0B;AAC1BC,IAAAA,wBAAwB;AACxB,GAJQ,EAIN,CAAC9B,OAAD,CAJM,CAAT;AAKA,sBACC;AAAA,cACEJ,SAAS,CAACE,MAAV,KAAqB,kBAArB,IAA2CF,SAAS,CAACG,OAAV,IAAqB,IAAhE,gBACA,QAAC,QAAD;AAAU,MAAA,MAAM;AAAhB;AAAA;AAAA;AAAA;AAAA,YADA,gBAGA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACC;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACC,QAAC,IAAD;AACC,UAAA,KAAK,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADR;AAEC,UAAA,KAAK,EAAE;AAAE2C,YAAAA,YAAY,EAAE;AAAhB,WAFR;AAGC,UAAA,KAAK,eACJ;AAAA,uBACEL,WAAW,EADb,eAEC,QAAC,KAAD,CAAO,KAAP;AAAa,cAAA,QAAQ,EAAE3B,QAAvB;AAAiC,cAAA,UAAU,EAAC,QAA5C;AAAqD,cAAA,WAAW,EAAC,OAAjE;AAAyE,cAAA,KAAK,EAAEtB,QAAhF;AAAA,sCACC,QAAC,KAAD,CAAO,MAAP;AAAc,gBAAA,KAAK,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,eAEC,QAAC,KAAD,CAAO,MAAP;AAAc,gBAAA,KAAK,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFD,eAGC,QAAC,KAAD,CAAO,MAAP;AAAc,gBAAA,KAAK,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHD;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA,0BAJF;AAAA,iCAcC,QAAC,mBAAD;AAAqB,YAAA,KAAK,EAAC,MAA3B;AAAkC,YAAA,MAAM,EAAE,GAA1C;AAAA,sBACE2C,UAAU;AADZ;AAAA;AAAA;AAAA;AAAA;AAdD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAJF,mBADD;AA8BA,CA5ND;;AA8NA,eAAe5C,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Bar, CartesianGrid, ComposedChart, Line, ResponsiveContainer, Tooltip, XAxis, YAxis, LineChart } from 'recharts'\r\nimport { Card, Radio, Select, Skeleton } from 'antd'\r\nimport { statisticalApi } from './../../apiBase/statistical/statistical-total'\r\n\r\nconst RevenueChart = () => {\r\n\tconst [typeView, setTypeView] = useState(3)\r\n\tconst [statisticalRevenueYear, setStatisticalRevenueYear] = useState<IStatRevenueYear[]>([])\r\n\tconst [statisticalRevenueMonth, setStatisticalRevenueMonth] = useState<IStatRevenueMonth[]>([])\r\n\tconst [statisticalRevenueDay, setStatisticalRevenueDay] = useState<IStatRevenueDay[]>([])\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\tstatus: '',\r\n\t\tloading: false\r\n\t})\r\n\tconst [todoApi, setTodoApi] = useState({\r\n\t\tbranch: 0,\r\n\t\tStartYear: 2017,\r\n\t\tEndYear: 2022,\r\n\t\tYear: new Date().getFullYear(),\r\n\t\tMonth: new Date().getMonth() + 1\r\n\t})\r\n\r\n\tconst onChange = (e) => {\r\n\t\tsetTypeView(e.target.value)\r\n\t}\r\n\r\n\tconst { Option } = Select\r\n\r\n\tconst handleChangeYear = (value) => {\r\n\t\tsetTodoApi({ ...todoApi, Year: value })\r\n\t}\r\n\tconst handleChangeMonth = (value) => {\r\n\t\tsetTodoApi({ ...todoApi, Month: value })\r\n\t}\r\n\r\n\tconst formatYAxis = (tickItem) => {\r\n\t\treturn new Intl.NumberFormat('de-DE').format(tickItem)\r\n\t}\r\n\r\n\tconst formatTooltip = (value, name, props) => {\r\n\t\treturn new Intl.NumberFormat('de-DE').format(value)\r\n\t}\r\n\r\n\tconst getStatisticalRevenueYear = async () => {\r\n\t\tsetIsLoading({ status: 'GET_STAT_REVENUE', loading: true })\r\n\t\ttry {\r\n\t\t\tlet res = await statisticalApi.getStatisticalRevenueYear(todoApi)\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tsetStatisticalRevenueYear(res.data.data)\r\n\t\t\t}\r\n\t\t\tif (res.status == 204) {\r\n\t\t\t\tsetStatisticalRevenueYear([])\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// showNoti(\"danger\", \"get data statistical revenue year error\");\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({ status: 'GET_STAT_REVENUE', loading: false })\r\n\t\t}\r\n\t}\r\n\r\n\tconst getStatisticalRevenueMonth = async () => {\r\n\t\tsetIsLoading({ status: 'GET_STAT_REVENUE', loading: true })\r\n\t\ttry {\r\n\t\t\tlet res = await statisticalApi.getStatisticalRevenueMonth(todoApi)\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tsetStatisticalRevenueMonth(res.data.data)\r\n\t\t\t}\r\n\t\t\tif (res.status == 204) {\r\n\t\t\t\tsetStatisticalRevenueMonth([])\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// showNoti(\"danger\", \"get data revenue day faile\");\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({ status: 'GET_STAT_REVENUE', loading: false })\r\n\t\t}\r\n\t}\r\n\r\n\tconst getStatisticalRevenueDay = async () => {\r\n\t\tsetIsLoading({ status: 'GET_STAT_REVENUE', loading: true })\r\n\t\ttry {\r\n\t\t\tlet res = await statisticalApi.getStatisticalRevenueDay(todoApi)\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tsetStatisticalRevenueDay(res.data.data)\r\n\t\t\t}\r\n\t\t\tif (res.status == 204) {\r\n\t\t\t\tsetStatisticalRevenueDay([])\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// showNoti(\"danger\", \"get data revenue day faile\");\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({ status: 'GET_STAT_REVENUE', loading: false })\r\n\t\t}\r\n\t}\r\n\r\n\tconst renderView = () => {\r\n\t\tif (typeView == 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<LineChart data={statisticalRevenueMonth} syncId=\"anyId\" margin={{ top: 10, right: 0, left: 25, bottom: 0 }}>\r\n\t\t\t\t\t<XAxis dataKey=\"Month\" tickMargin={3} />\r\n\t\t\t\t\t<YAxis type=\"number\" tickFormatter={formatYAxis} />\r\n\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t<Tooltip formatter={formatTooltip} labelFormatter={(value) => `Tháng ${value}`} />\r\n\t\t\t\t\t<Line type=\"monotone\" dataKey=\"Revenue\" stroke=\"#003366\" fill=\"#003366\" activeDot={{ r: 8 }} name=\"Doanh thu(đồng)\" />\r\n\t\t\t\t\t<Bar dataKey=\"Revenue\" fill=\"#0080FF\" name=\"Doanh thu(đồng)\" />\r\n\t\t\t\t</LineChart>\r\n\t\t\t)\r\n\t\t} else if (typeView == 2) {\r\n\t\t\treturn (\r\n\t\t\t\t<ComposedChart data={statisticalRevenueYear} margin={{ top: 10, right: 0, left: 25, bottom: 0 }}>\r\n\t\t\t\t\t<XAxis dataKey=\"Year\" />\r\n\t\t\t\t\t<YAxis tickFormatter={formatYAxis} />\r\n\t\t\t\t\t<Tooltip formatter={formatTooltip} labelFormatter={(value) => `Năm ${value}`} />\r\n\t\t\t\t\t<CartesianGrid stroke=\"#f5f5f5\" />\r\n\t\t\t\t\t{/* <Line type=\"monotone\" dataKey=\"Revenue\" activeDot={{ r: 8 }} stroke=\"#003366\" name=\"Doanh thu(đồng)\" /> */}\r\n\t\t\t\t\t<Bar dataKey=\"Revenue\" fill=\"#0080FF\" barSize={20} name=\"Doanh thu(đồng)\" />\r\n\t\t\t\t</ComposedChart>\r\n\t\t\t)\r\n\t\t} else if (typeView == 3) {\r\n\t\t\treturn (\r\n\t\t\t\t<LineChart data={statisticalRevenueDay} syncId=\"anyId\" margin={{ top: 10, right: 10, left: -35, bottom: 0 }}>\r\n\t\t\t\t\t<XAxis dataKey=\"Day\" />\r\n\t\t\t\t\t<YAxis tickFormatter={formatYAxis} />\r\n\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t<Tooltip formatter={formatTooltip} labelFormatter={(value) => `Ngày ${value}`} />\r\n\t\t\t\t\t<Line type=\"monotone\" dataKey=\"Revenue\" stroke=\"#003366\" fill=\"#003366\" activeDot={{ r: 8 }} name=\"Doanh thu(đồng)\" />\r\n\t\t\t\t\t<Bar dataKey=\"Revenue\" fill=\"#0080FF\" name=\"Doanh thu(đồng)\" />\r\n\t\t\t\t</LineChart>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tconst renderExtra = () => {\r\n\t\tif (typeView == 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tclassName=\"mr-3\"\r\n\t\t\t\t\t\tvalue={todoApi.Year}\r\n\t\t\t\t\t\tstyle={{ width: 120 }}\r\n\t\t\t\t\t\tonChange={handleChangeYear}\r\n\t\t\t\t\t\tloading={isLoading.loading && isLoading.status === 'GET_STAT_REVENUE'}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{statisticalRevenueYear.map((item, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Option value={item.Year} key={index}>\r\n\t\t\t\t\t\t\t\t\tNăm {item.Year}\r\n\t\t\t\t\t\t\t\t</Option>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t} else if (typeView == 3) {\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tclassName=\"mr-3\"\r\n\t\t\t\t\t\tloading={isLoading.loading && isLoading.status === 'GET_STAT_REVENUE'}\r\n\t\t\t\t\t\tvalue={todoApi.Year}\r\n\t\t\t\t\t\tstyle={{ width: 120 }}\r\n\t\t\t\t\t\tonChange={handleChangeYear}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{statisticalRevenueYear.map((item, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Option value={item.Year} key={index}>\r\n\t\t\t\t\t\t\t\t\tNăm {item.Year}\r\n\t\t\t\t\t\t\t\t</Option>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tclassName=\"mr-3\"\r\n\t\t\t\t\t\tloading={isLoading.loading && isLoading.status === 'GET_STAT_REVENUE'}\r\n\t\t\t\t\t\tvalue={todoApi.Month}\r\n\t\t\t\t\t\tstyle={{ width: 120 }}\r\n\t\t\t\t\t\tonChange={handleChangeMonth}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{statisticalRevenueMonth.map((item, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Option value={item.Month} key={index}>\r\n\t\t\t\t\t\t\t\t\tTháng {item.Month}\r\n\t\t\t\t\t\t\t\t</Option>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tgetStatisticalRevenueYear()\r\n\t\tgetStatisticalRevenueMonth()\r\n\t\tgetStatisticalRevenueDay()\r\n\t}, [todoApi])\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{isLoading.status === 'GET_STAT_REVENUE' && isLoading.loading == true ? (\r\n\t\t\t\t<Skeleton active />\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\ttitle={<h4>BIỂU ĐỒ DOANH THU</h4>}\r\n\t\t\t\t\t\t\tstyle={{ borderRadius: 8 }}\r\n\t\t\t\t\t\t\textra={\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t{renderExtra()}\r\n\t\t\t\t\t\t\t\t\t<Radio.Group onChange={onChange} optionType=\"button\" buttonStyle=\"solid\" value={typeView}>\r\n\t\t\t\t\t\t\t\t\t\t<Radio.Button value={3}>Ngày</Radio.Button>\r\n\t\t\t\t\t\t\t\t\t\t<Radio.Button value={1}>Tháng</Radio.Button>\r\n\t\t\t\t\t\t\t\t\t\t<Radio.Button value={2}>Năm</Radio.Button>\r\n\t\t\t\t\t\t\t\t\t</Radio.Group>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={280}>\r\n\t\t\t\t\t\t\t\t{renderView()}\r\n\t\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default RevenueChart\r\n"]},"metadata":{},"sourceType":"module"}