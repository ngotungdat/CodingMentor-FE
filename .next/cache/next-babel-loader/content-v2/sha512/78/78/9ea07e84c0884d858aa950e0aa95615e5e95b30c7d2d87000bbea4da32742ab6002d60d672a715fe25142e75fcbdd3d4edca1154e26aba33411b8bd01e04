{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\CourseList\\\\CourseList.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { branchApi, courseApi, programApi, teacherApi } from '~/apiBase';\nimport TitlePage from '~/components/Elements/TitlePage';\nimport CourseListFilterForm from '~/components/Global/CourseList/CourseListFilterForm';\nimport PowerList from '~/components/Global/CourseList/PowerList';\nimport { useWrap } from '~/context/wrap';\nimport { fmSelectArr } from '~/utils/functions';\nimport CourseListUpdate from './CourseListUpdate';\nconst statusList = [{\n  title: 'Sắp diễn ra',\n  value: 0\n}, {\n  title: 'Đang diễn ra',\n  value: 1\n}, {\n  title: 'Đã đóng',\n  value: 2\n}];\n\nconst CourseList = () => {\n  const {\n    0: courseList,\n    1: setCourseList\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: isShowUpdate,\n    1: setIsShowUpdate\n  } = useState(false);\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    showNoti,\n    userInformation\n  } = useWrap();\n  const {\n    0: optionListForFilter,\n    1: setOptionListForFilter\n  } = useState({\n    statusList,\n    branchList: [],\n    programList: []\n  });\n  const {\n    0: optionListForUpdate,\n    1: setOptionListForUpdate\n  } = useState({\n    academicList: [],\n    teacherLeadList: []\n  }); // FILTER\n\n  const listFieldInit = {\n    pageIndex: 1,\n    pageSize: 10,\n    CourseName: '',\n    Status: null,\n    BranchID: null,\n    ProgramID: null\n  };\n  let refValue = useRef({\n    pageIndex: 1,\n    pageSize: 10\n  });\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(listFieldInit); // PAGINATION\n\n  const getPagination = (pageIndex, pageSize) => {\n    if (!pageSize) pageSize = 10;\n    refValue.current = _objectSpread(_objectSpread({}, refValue.current), {}, {\n      pageSize,\n      pageIndex\n    });\n    setFilters(_objectSpread(_objectSpread({}, filters), refValue.current));\n  }; // RESET SEARCH\n\n\n  const onResetSearch = () => {\n    setFilters(_objectSpread(_objectSpread({}, listFieldInit), {}, {\n      pageSize: refValue.current.pageSize\n    }));\n  }; // ACTION SEARCH\n\n\n  const onFilter = obj => {\n    setFilters(_objectSpread(_objectSpread(_objectSpread({}, listFieldInit), refValue.current), {}, {\n      pageIndex: 1\n    }, obj));\n  }; // FETCH DATA FOR FILTER FORM\n\n\n  const fetchDataForFilterForm = async () => {\n    try {\n      const res = await Promise.all([branchApi.getAll({\n        pageSize: 99999,\n        pageIndex: 1\n      }), programApi.getAll({\n        selectAll: true\n      })]).then(([branchRes, programRes]) => {\n        const newOptionList = {\n          branchList: [],\n          programList: []\n        };\n        branchRes.status === 200 && (newOptionList.branchList = fmSelectArr(branchRes.data.data, 'BranchName', 'ID'));\n        programRes.status === 200 && (newOptionList.programList = fmSelectArr(programRes.data.data, 'ProgramName', 'ID'));\n        setOptionListForFilter(_objectSpread(_objectSpread({}, optionListForFilter), newOptionList));\n      }).catch(err => console.log('fetchDataForFilterForm - PromiseAll:', err));\n    } catch (error) {\n      showNoti('danger', error.message);\n    }\n  }; // GET DATA IN FIRST TIME\n\n\n  const fetchScheduleList = async () => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      let res = await courseApi.getAll(filters);\n\n      if (res.status === 200) {\n        if (res.data.totalRow && res.data.data.length) {\n          setCourseList(res.data.data);\n          setTotalPage(res.data.totalRow);\n        }\n      } else if (res.status === 204) {\n        showNoti('danger', 'Không tìm thấy');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchScheduleList();\n  }, [filters]); // FETCH DATA FOR UPDATE FORM\n\n  const fetchDataForUpdateForm = async BranchID => {\n    setIsLoading({\n      type: 'FETCH_DATA',\n      status: true\n    });\n\n    try {\n      const res = await teacherApi.getAll({\n        pageSize: 99999\n      });\n\n      if (res.status === 200) {\n        const newTeacherList = [{\n          title: '---Trống---',\n          value: 0\n        }, ...fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID')];\n        setOptionListForUpdate(_objectSpread(_objectSpread({}, optionListForUpdate), {}, {\n          teacherLeadList: newTeacherList\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_DATA',\n        status: false\n      });\n    }\n  }; // UPATE COURSE\n\n\n  const onUpdateCourse = async obj => {\n    setIsLoading({\n      type: 'UPDATE_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      const {\n        BranchID,\n        SalaryOfLesson\n      } = obj,\n            newObj = _objectWithoutProperties(obj, [\"BranchID\", \"SalaryOfLesson\"]);\n\n      const newObj2 = Object.assign({}, obj);\n      console.log(newObj2);\n      res = await courseApi.update(_objectSpread(_objectSpread({}, newObj), {}, {\n        SalaryOfLesson: +SalaryOfLesson.replace(/\\D/g, '')\n      }));\n\n      if (res.status === 200) {\n        fetchScheduleList();\n        showNoti('Success', 'Cập nhật dữ liệu thành công');\n      } else if (res.status === 204) {\n        showNoti('danger', 'Không tìm thấy');\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'UPDATE_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  };\n\n  useEffect(() => {\n    if (userInformation) {\n      const role = userInformation === null || userInformation === void 0 ? void 0 : userInformation.RoleID;\n\n      if (role === 1) {\n        setIsShowUpdate(true);\n      }\n\n      if (role === 1 || role === 5) {\n        fetchDataForFilterForm();\n      }\n    }\n  }, [userInformation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"course-list-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: [/*#__PURE__*/_jsxDEV(TitlePage, {\n          title: \"Danh s\\xE1ch kh\\xF3a h\\u1ECDc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrap-table\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            title: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-action-table\",\n              children: /*#__PURE__*/_jsxDEV(CourseListFilterForm, {\n                optionList: optionListForFilter,\n                handleFilter: onFilter,\n                handleResetFilter: onResetSearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 9\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"course-list-content\",\n              children: /*#__PURE__*/_jsxDEV(PowerList, {\n                isLoading: isLoading,\n                dataSource: courseList,\n                totalPage: totalPage,\n                currentPage: filters.pageIndex,\n                getPagination: getPagination,\n                children: isShowUpdate ? /*#__PURE__*/_jsxDEV(CourseListUpdate, {\n                  isLoading: isLoading,\n                  optionList: optionListForUpdate,\n                  handleOnUpdateCourse: onUpdateCourse,\n                  handleFetchDataForUpdateForm: fetchDataForUpdateForm\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 11\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 3\n  }, this);\n};\n\nexport default CourseList;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/CourseList/CourseList.tsx"],"names":["Card","React","useEffect","useRef","useState","branchApi","courseApi","programApi","teacherApi","TitlePage","CourseListFilterForm","PowerList","useWrap","fmSelectArr","CourseListUpdate","statusList","title","value","CourseList","courseList","setCourseList","isLoading","setIsLoading","type","status","isShowUpdate","setIsShowUpdate","totalPage","setTotalPage","showNoti","userInformation","optionListForFilter","setOptionListForFilter","branchList","programList","optionListForUpdate","setOptionListForUpdate","academicList","teacherLeadList","listFieldInit","pageIndex","pageSize","CourseName","Status","BranchID","ProgramID","refValue","filters","setFilters","getPagination","current","onResetSearch","onFilter","obj","fetchDataForFilterForm","res","Promise","all","getAll","selectAll","then","branchRes","programRes","newOptionList","data","catch","err","console","log","error","message","fetchScheduleList","totalRow","length","fetchDataForUpdateForm","newTeacherList","onUpdateCourse","SalaryOfLesson","newObj","newObj2","update","replace","role","RoleID"],"mappings":"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","sourcesContent":["import { Card } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { branchApi, courseApi, programApi, teacherApi } from '~/apiBase'\r\nimport TitlePage from '~/components/Elements/TitlePage'\r\nimport CourseListFilterForm from '~/components/Global/CourseList/CourseListFilterForm'\r\nimport PowerList from '~/components/Global/CourseList/PowerList'\r\nimport { useWrap } from '~/context/wrap'\r\nimport { fmSelectArr } from '~/utils/functions'\r\nimport CourseListUpdate from './CourseListUpdate'\r\n\r\nconst statusList = [\r\n\t{\r\n\t\ttitle: 'Sắp diễn ra',\r\n\t\tvalue: 0\r\n\t},\r\n\t{\r\n\t\ttitle: 'Đang diễn ra',\r\n\t\tvalue: 1\r\n\t},\r\n\t{\r\n\t\ttitle: 'Đã đóng',\r\n\t\tvalue: 2\r\n\t}\r\n]\r\nconst CourseList = () => {\r\n\tconst [courseList, setCourseList] = useState<ICourse[]>([])\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t})\r\n\tconst [isShowUpdate, setIsShowUpdate] = useState(false)\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\tconst { showNoti, userInformation } = useWrap()\r\n\tconst [optionListForFilter, setOptionListForFilter] = useState({\r\n\t\tstatusList,\r\n\t\tbranchList: [],\r\n\t\tprogramList: []\r\n\t})\r\n\tconst [optionListForUpdate, setOptionListForUpdate] = useState({\r\n\t\tacademicList: [],\r\n\t\tteacherLeadList: []\r\n\t})\r\n\t// FILTER\r\n\tconst listFieldInit = {\r\n\t\tpageIndex: 1,\r\n\t\tpageSize: 10,\r\n\r\n\t\tCourseName: '',\r\n\t\tStatus: null,\r\n\t\tBranchID: null,\r\n\t\tProgramID: null\r\n\t}\r\n\tlet refValue = useRef({\r\n\t\tpageIndex: 1,\r\n\t\tpageSize: 10\r\n\t})\r\n\tconst [filters, setFilters] = useState(listFieldInit)\r\n\t// PAGINATION\r\n\tconst getPagination = (pageIndex: number, pageSize: number) => {\r\n\t\tif (!pageSize) pageSize = 10\r\n\t\trefValue.current = {\r\n\t\t\t...refValue.current,\r\n\t\t\tpageSize,\r\n\t\t\tpageIndex\r\n\t\t}\r\n\t\tsetFilters({\r\n\t\t\t...filters,\r\n\t\t\t...refValue.current\r\n\t\t})\r\n\t}\r\n\t// RESET SEARCH\r\n\tconst onResetSearch = () => {\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\tpageSize: refValue.current.pageSize\r\n\t\t})\r\n\t}\r\n\t// ACTION SEARCH\r\n\tconst onFilter = (obj) => {\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\t...refValue.current,\r\n\t\t\tpageIndex: 1,\r\n\t\t\t...obj\r\n\t\t})\r\n\t}\r\n\t// FETCH DATA FOR FILTER FORM\r\n\tconst fetchDataForFilterForm = async () => {\r\n\t\ttry {\r\n\t\t\tconst res = await Promise.all([branchApi.getAll({ pageSize: 99999, pageIndex: 1 }), programApi.getAll({ selectAll: true })])\r\n\t\t\t\t.then(([branchRes, programRes]) => {\r\n\t\t\t\t\tconst newOptionList = {\r\n\t\t\t\t\t\tbranchList: [],\r\n\t\t\t\t\t\tprogramList: []\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbranchRes.status === 200 && (newOptionList.branchList = fmSelectArr(branchRes.data.data, 'BranchName', 'ID'))\r\n\t\t\t\t\tprogramRes.status === 200 && (newOptionList.programList = fmSelectArr(programRes.data.data, 'ProgramName', 'ID'))\r\n\t\t\t\t\tsetOptionListForFilter({\r\n\t\t\t\t\t\t...optionListForFilter,\r\n\t\t\t\t\t\t...newOptionList\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => console.log('fetchDataForFilterForm - PromiseAll:', err))\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t}\r\n\t}\r\n\r\n\t// GET DATA IN FIRST TIME\r\n\tconst fetchScheduleList = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tlet res = await courseApi.getAll(filters)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tif (res.data.totalRow && res.data.data.length) {\r\n\t\t\t\t\tsetCourseList(res.data.data)\r\n\t\t\t\t\tsetTotalPage(res.data.totalRow)\r\n\t\t\t\t}\r\n\t\t\t} else if (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', 'Không tìm thấy')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tfetchScheduleList()\r\n\t}, [filters])\r\n\r\n\t// FETCH DATA FOR UPDATE FORM\r\n\tconst fetchDataForUpdateForm = async (BranchID) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tconst res = await teacherApi.getAll({ pageSize: 99999 })\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newTeacherList = [{ title: '---Trống---', value: 0 }, ...fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID')]\r\n\t\t\t\tsetOptionListForUpdate({\r\n\t\t\t\t\t...optionListForUpdate,\r\n\t\t\t\t\tteacherLeadList: newTeacherList\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t// UPATE COURSE\r\n\tconst onUpdateCourse = async (obj) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'UPDATE_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\tlet res\r\n\t\ttry {\r\n\t\t\tconst { BranchID, SalaryOfLesson, ...newObj } = obj\r\n\t\t\tconst { ...newObj2 } = obj\r\n\t\t\tconsole.log(newObj2)\r\n\t\t\tres = await courseApi.update({\r\n\t\t\t\t...newObj,\r\n\t\t\t\tSalaryOfLesson: +SalaryOfLesson.replace(/\\D/g, '')\r\n\t\t\t})\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tfetchScheduleList()\r\n\t\t\t\tshowNoti('Success', 'Cập nhật dữ liệu thành công')\r\n\t\t\t} else if (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', 'Không tìm thấy')\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'UPDATE_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn res\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (userInformation) {\r\n\t\t\tconst role = userInformation?.RoleID\r\n\t\t\tif (role === 1) {\r\n\t\t\t\tsetIsShowUpdate(true)\r\n\t\t\t}\r\n\t\t\tif (role === 1 || role === 5) {\r\n\t\t\t\tfetchDataForFilterForm()\r\n\t\t\t}\r\n\t\t}\r\n\t}, [userInformation])\r\n\r\n\treturn (\r\n\t\t<div className=\"course-list-page\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t<TitlePage title=\"Danh sách khóa học\" />\r\n\r\n\t\t\t\t\t<div className=\"wrap-table\">\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\ttitle={\r\n\t\t\t\t\t\t\t\t<div className=\"list-action-table\">\r\n\t\t\t\t\t\t\t\t\t<CourseListFilterForm optionList={optionListForFilter} handleFilter={onFilter} handleResetFilter={onResetSearch} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div className=\"course-list-content\">\r\n\t\t\t\t\t\t\t\t<PowerList\r\n\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\tdataSource={courseList}\r\n\t\t\t\t\t\t\t\t\ttotalPage={totalPage}\r\n\t\t\t\t\t\t\t\t\tcurrentPage={filters.pageIndex}\r\n\t\t\t\t\t\t\t\t\tgetPagination={getPagination}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{isShowUpdate ? (\r\n\t\t\t\t\t\t\t\t\t\t<CourseListUpdate\r\n\t\t\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\t\t\toptionList={optionListForUpdate}\r\n\t\t\t\t\t\t\t\t\t\t\thandleOnUpdateCourse={onUpdateCourse}\r\n\t\t\t\t\t\t\t\t\t\t\thandleFetchDataForUpdateForm={fetchDataForUpdateForm}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</PowerList>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CourseList\r\n"]},"metadata":{},"sourceType":"module"}