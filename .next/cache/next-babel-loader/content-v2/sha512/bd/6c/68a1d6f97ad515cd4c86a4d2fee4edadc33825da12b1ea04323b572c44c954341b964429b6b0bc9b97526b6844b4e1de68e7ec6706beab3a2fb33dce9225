{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\QuestionBank\\\\QuestionFormType\\\\ChoiceForm.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useWrap } from '~/context/wrap';\nimport { Form, Input, Checkbox } from 'antd';\nimport { exerciseApi } from '~/apiBase/';\nimport EditorSimple from '~/components/Elements/EditorSimple';\nimport UploadAudio from '~/components/Elements/UploadAudio';\nconst listAlphabet = ['A', 'B', 'C', 'D', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V'];\n\nconst ChoiceForm = props => {\n  const {\n    isSubmit,\n    questionData,\n    changeIsSubmit,\n    visible,\n    isGroup,\n    changeData\n  } = props;\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    formState: {\n      isSubmitting,\n      errors,\n      isSubmitted\n    }\n  } = useForm();\n  const [form] = Form.useForm();\n  const {\n    0: questionDataForm,\n    1: setQuestionDataForm\n  } = useState(null);\n  const {\n    0: isResetEditor,\n    1: setIsResetEditor\n  } = useState(false);\n  const {\n    0: loadAtFirst,\n    1: setLoadAtFirst\n  } = useState(true); // GET VALUE IN EDITOR\n\n  const getDataEditor = dataEditor => {\n    if (questionDataForm) {\n      questionDataForm.Content = dataEditor;\n    }\n\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // Reset value in form\n\n\n  const resetForm = () => {\n    questionDataForm.Content = '';\n    questionDataForm.ExerciseAnswer.forEach(item => {\n      item.AnswerContent = '';\n      item.isTrue = false;\n    });\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // ON CHANGE IS CORRECT\n\n\n  const onChange_isCorrect = (e, AnswerID) => {\n    let checked = e.target.checked; // Xóa các isTrue còn lại (vì là câu hỏi chọn 1 đáp án)\n\n    questionDataForm.ExerciseAnswer.forEach(item => {\n      item.isTrue = false;\n    }); // Tìm vị trí sau đó gán correct vào\n\n    let AnswerIndex = questionDataForm.ExerciseAnswer.findIndex(item => item.ID == AnswerID);\n    questionDataForm.ExerciseAnswer[AnswerIndex].isTrue = checked;\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // ON CHANGE TEXT\n\n\n  const onChange_text = (e, AnswerID) => {\n    let text = e.target.value;\n    let AnswerIndex = questionDataForm.ExerciseAnswer.findIndex(item => item.ID == AnswerID);\n    questionDataForm.ExerciseAnswer[AnswerIndex].AnswerContent = text;\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // SUBMIT FORM\n\n\n  const handleSubmitQuestion = async () => {\n    console.log('Question SUBMIT in form: ', questionDataForm);\n    let res = null;\n\n    try {\n      if (questionDataForm.ID) {\n        res = await exerciseApi.update(questionDataForm);\n      } else {\n        res = await exerciseApi.add(questionDataForm);\n      }\n\n      if (res.status == 200) {\n        changeIsSubmit(questionDataForm.ID ? questionDataForm : res.data.data);\n        showNoti('success', `${questionDataForm.ID ? 'Cập nhật' : 'Thêm'} Thành công`);\n\n        if (!questionDataForm.ID) {\n          resetForm();\n        }\n\n        setIsResetEditor(true);\n        setTimeout(() => {\n          setIsResetEditor(false);\n        }, 500);\n      }\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    isSubmit && handleSubmitQuestion();\n  }, [isSubmit]);\n  useEffect(() => {\n    if (visible) {\n      if (!questionData.ID) {\n        questionData.Content = '';\n        questionData.ExerciseAnswer.forEach(item => {\n          item.AnswerContent = '';\n          item.isTrue = false;\n        });\n      }\n\n      setQuestionDataForm(questionData);\n    } else {\n      setQuestionDataForm(null);\n      setLoadAtFirst(true);\n    }\n  }, [visible]);\n  useEffect(() => {\n    if (questionDataForm) {\n      if (!loadAtFirst) {\n        changeData && changeData();\n      }\n\n      setLoadAtFirst(false);\n    }\n  }, [questionDataForm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-create-question\",\n    children: visible && questionDataForm && /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      layout: \"vertical\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"Question\",\n              label: \"C\\xE2u h\\u1ECFi\",\n              children: /*#__PURE__*/_jsxDEV(EditorSimple, {\n                isTranslate: true,\n                visible: visible,\n                handleChange: value => getDataEditor(value),\n                isReset: isResetEditor,\n                questionContent: questionDataForm === null || questionDataForm === void 0 ? void 0 : questionDataForm.Content,\n                questionData: questionData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              label: \"File nghe\",\n              children: /*#__PURE__*/_jsxDEV(UploadAudio, {\n                getFile: file => {\n                  questionDataForm.LinkAudio = file;\n                  setQuestionDataForm(_objectSpread({}, questionDataForm));\n                },\n                valueFile: questionDataForm === null || questionDataForm === void 0 ? void 0 : questionDataForm.LinkAudio\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"style-label\",\n              children: \"\\u0110\\xE1p \\xE1n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 8\n          }, this), questionDataForm === null || questionDataForm === void 0 ? void 0 : questionDataForm.ExerciseAnswer.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6 col-12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row-ans\",\n              children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: item.isTrue,\n                onChange: e => onChange_isCorrect(e, item.ID)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  placeholder: listAlphabet[index],\n                  value: item.AnswerContent,\n                  className: \"style-input\",\n                  onChange: e => onChange_text(e, item.ID)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 12\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 10\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 3\n  }, this);\n};\n\nexport default ChoiceForm;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/QuestionBank/QuestionFormType/ChoiceForm.tsx"],"names":["React","useEffect","useState","useForm","useWrap","Form","Input","Checkbox","exerciseApi","EditorSimple","UploadAudio","listAlphabet","ChoiceForm","props","isSubmit","questionData","changeIsSubmit","visible","isGroup","changeData","showNoti","formState","isSubmitting","errors","isSubmitted","form","questionDataForm","setQuestionDataForm","isResetEditor","setIsResetEditor","loadAtFirst","setLoadAtFirst","getDataEditor","dataEditor","Content","resetForm","ExerciseAnswer","forEach","item","AnswerContent","isTrue","onChange_isCorrect","e","AnswerID","checked","target","AnswerIndex","findIndex","ID","onChange_text","text","value","handleSubmitQuestion","console","log","res","update","add","status","data","setTimeout","error","file","LinkAudio","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useWrap } from '~/context/wrap';\r\nimport { Form, Input, Checkbox } from 'antd';\r\nimport Editor from '~/components/Elements/Editor';\r\nimport { exerciseApi } from '~/apiBase/';\r\nimport { dataQuestion } from '~/lib/question-bank/dataBoxType';\r\nimport EditorSimple from '~/components/Elements/EditorSimple';\r\nimport UploadAudio from '~/components/Elements/UploadAudio';\r\n\r\nconst listAlphabet = ['A', 'B', 'C', 'D', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V'];\r\n\r\nconst ChoiceForm = (props) => {\r\n\tconst { isSubmit, questionData, changeIsSubmit, visible, isGroup, changeData } = props;\r\n\tconst { showNoti } = useWrap();\r\n\tconst {\r\n\t\tformState: { isSubmitting, errors, isSubmitted }\r\n\t} = useForm();\r\n\tconst [form] = Form.useForm();\r\n\tconst [questionDataForm, setQuestionDataForm] = useState(null);\r\n\tconst [isResetEditor, setIsResetEditor] = useState(false);\r\n\tconst [loadAtFirst, setLoadAtFirst] = useState(true);\r\n\r\n\t// GET VALUE IN EDITOR\r\n\tconst getDataEditor = (dataEditor) => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tquestionDataForm.Content = dataEditor;\r\n\t\t}\r\n\t\tsetQuestionDataForm({ ...questionDataForm });\r\n\t};\r\n\r\n\t// Reset value in form\r\n\tconst resetForm = () => {\r\n\t\tquestionDataForm.Content = '';\r\n\t\tquestionDataForm.ExerciseAnswer.forEach((item) => {\r\n\t\t\titem.AnswerContent = '';\r\n\t\t\titem.isTrue = false;\r\n\t\t});\r\n\t\tsetQuestionDataForm({ ...questionDataForm });\r\n\t};\r\n\r\n\t// ON CHANGE IS CORRECT\r\n\tconst onChange_isCorrect = (e, AnswerID) => {\r\n\t\tlet checked = e.target.checked;\r\n\r\n\t\t// Xóa các isTrue còn lại (vì là câu hỏi chọn 1 đáp án)\r\n\t\tquestionDataForm.ExerciseAnswer.forEach((item) => {\r\n\t\t\titem.isTrue = false;\r\n\t\t});\r\n\r\n\t\t// Tìm vị trí sau đó gán correct vào\r\n\t\tlet AnswerIndex = questionDataForm.ExerciseAnswer.findIndex((item) => item.ID == AnswerID);\r\n\t\tquestionDataForm.ExerciseAnswer[AnswerIndex].isTrue = checked;\r\n\t\tsetQuestionDataForm({ ...questionDataForm });\r\n\t};\r\n\r\n\t// ON CHANGE TEXT\r\n\tconst onChange_text = (e, AnswerID) => {\r\n\t\tlet text = e.target.value;\r\n\t\tlet AnswerIndex = questionDataForm.ExerciseAnswer.findIndex((item) => item.ID == AnswerID);\r\n\t\tquestionDataForm.ExerciseAnswer[AnswerIndex].AnswerContent = text;\r\n\t\tsetQuestionDataForm({ ...questionDataForm });\r\n\t};\r\n\r\n\t// SUBMIT FORM\r\n\tconst handleSubmitQuestion = async () => {\r\n\t\tconsole.log('Question SUBMIT in form: ', questionDataForm);\r\n\r\n\t\tlet res = null;\r\n\t\ttry {\r\n\t\t\tif (questionDataForm.ID) {\r\n\t\t\t\tres = await exerciseApi.update(questionDataForm);\r\n\t\t\t} else {\r\n\t\t\t\tres = await exerciseApi.add(questionDataForm);\r\n\t\t\t}\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tchangeIsSubmit(questionDataForm.ID ? questionDataForm : res.data.data);\r\n\t\t\t\tshowNoti('success', `${questionDataForm.ID ? 'Cập nhật' : 'Thêm'} Thành công`);\r\n\t\t\t\tif (!questionDataForm.ID) {\r\n\t\t\t\t\tresetForm();\r\n\t\t\t\t}\r\n\t\t\t\tsetIsResetEditor(true);\r\n\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tsetIsResetEditor(false);\r\n\t\t\t\t}, 500);\r\n\t\t\t}\r\n\t\t} catch (error) {}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tisSubmit && handleSubmitQuestion();\r\n\t}, [isSubmit]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (visible) {\r\n\t\t\tif (!questionData.ID) {\r\n\t\t\t\tquestionData.Content = '';\r\n\t\t\t\tquestionData.ExerciseAnswer.forEach((item: any) => {\r\n\t\t\t\t\titem.AnswerContent = '';\r\n\t\t\t\t\titem.isTrue = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tsetQuestionDataForm(questionData);\r\n\t\t} else {\r\n\t\t\tsetQuestionDataForm(null);\r\n\t\t\tsetLoadAtFirst(true);\r\n\t\t}\r\n\t}, [visible]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tif (!loadAtFirst) {\r\n\t\t\t\tchangeData && changeData();\r\n\t\t\t}\r\n\t\t\tsetLoadAtFirst(false);\r\n\t\t}\r\n\t}, [questionDataForm]);\r\n\r\n\treturn (\r\n\t\t<div className=\"form-create-question\">\r\n\t\t\t{visible && questionDataForm && (\r\n\t\t\t\t<Form form={form} layout=\"vertical\">\r\n\t\t\t\t\t<div className=\"container-fluid\">\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<Form.Item name=\"Question\" label=\"Câu hỏi\">\r\n\t\t\t\t\t\t\t\t\t<EditorSimple\r\n\t\t\t\t\t\t\t\t\t\tisTranslate={true}\r\n\t\t\t\t\t\t\t\t\t\tvisible={visible}\r\n\t\t\t\t\t\t\t\t\t\thandleChange={(value) => getDataEditor(value)}\r\n\t\t\t\t\t\t\t\t\t\tisReset={isResetEditor}\r\n\t\t\t\t\t\t\t\t\t\tquestionContent={questionDataForm?.Content}\r\n\t\t\t\t\t\t\t\t\t\tquestionData={questionData}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<Form.Item label=\"File nghe\">\r\n\t\t\t\t\t\t\t\t\t<UploadAudio\r\n\t\t\t\t\t\t\t\t\t\tgetFile={(file) => {\r\n\t\t\t\t\t\t\t\t\t\t\tquestionDataForm.LinkAudio = file;\r\n\t\t\t\t\t\t\t\t\t\t\tsetQuestionDataForm({ ...questionDataForm });\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tvalueFile={questionDataForm?.LinkAudio}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<p className=\"style-label\">Đáp án</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t{questionDataForm?.ExerciseAnswer.map((item, index) => (\r\n\t\t\t\t\t\t\t\t<div className=\"col-md-6 col-12\" key={index}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"row-ans\">\r\n\t\t\t\t\t\t\t\t\t\t<Checkbox checked={item.isTrue} onChange={(e) => onChange_isCorrect(e, item.ID)}></Checkbox>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder={listAlphabet[index]}\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={item.AnswerContent}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"style-input\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => onChange_text(e, item.ID)}\r\n\t\t\t\t\t\t\t\t\t\t\t></Input>\r\n\t\t\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Form>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChoiceForm;\r\n"]},"metadata":{},"sourceType":"module"}