{"ast":null,"code":"import { instance } from './instance';\nimport _ from '~/appConfig';\n\nconst FormData = require('form-data');\n\nexport const login = async params => {\n  try {\n    const formData = new FormData();\n    formData.append('username', params.username);\n    formData.append('password', params.password);\n    const res = await instance.post('/api/Account/LoginV2', formData, {\n      headers: formData.getHeaders()\n    });\n    return res;\n  } catch (error) {\n    console.log('login error', error);\n    return Promise.reject(error);\n  }\n};\nexport const loginByDev = async params => {\n  try {\n    const formData = new FormData();\n    formData.append('roleId', params.roleId);\n    const res = await instance.post('/api/LoginByDev', formData, {\n      headers: formData.getHeaders()\n    });\n    return res;\n  } catch (error) {\n    console.log('login error', error);\n    return Promise.reject(error);\n  }\n};\nexport const registerAPI = async params => {\n  try {\n    const res = await instance.post('/auth/signup', params);\n    return res;\n  } catch (error) {\n    console.log('register error', error);\n    return Promise.reject(error);\n  }\n};\nexport const SocialLogin = async params => {\n  try {\n    var myHeaders = new Headers();\n    myHeaders.append('token', params === null || params === void 0 ? void 0 : params.tokenId);\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n    let res = '';\n    let link = (params === null || params === void 0 ? void 0 : params.type) == 'google' ? '/api/LoginByGoogleAccount' : '/api/LoginByFacebook';\n    await fetch(_.hostURL + link, requestOptions).then(response => response.text()).then(result => {\n      res = JSON.parse(result);\n    }).catch(error => console.log('error', error));\n    return res;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/services/auth.tsx"],"names":["instance","_","FormData","require","login","params","formData","append","username","password","res","post","headers","getHeaders","error","console","log","Promise","reject","loginByDev","roleId","registerAPI","SocialLogin","myHeaders","Headers","tokenId","requestOptions","method","redirect","link","type","fetch","hostURL","then","response","text","result","JSON","parse","catch"],"mappings":"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","sourcesContent":["import { instance } from './instance'\r\nimport _ from '~/appConfig'\r\n\r\nconst FormData = require('form-data')\r\n\r\nexport const login = async (params: any) => {\r\n\ttry {\r\n\t\tconst formData = new FormData()\r\n\t\tformData.append('username', params.username)\r\n\t\tformData.append('password', params.password)\r\n\t\tconst res: any = await instance.post('/api/Account/LoginV2', formData, {\r\n\t\t\theaders: formData.getHeaders()\r\n\t\t})\r\n\t\treturn res\r\n\t} catch (error) {\r\n\t\tconsole.log('login error', error)\r\n\t\treturn Promise.reject(error)\r\n\t}\r\n}\r\n\r\nexport const loginByDev = async (params: any) => {\r\n\ttry {\r\n\t\tconst formData = new FormData()\r\n\t\tformData.append('roleId', params.roleId)\r\n\t\tconst res: any = await instance.post('/api/LoginByDev', formData, {\r\n\t\t\theaders: formData.getHeaders()\r\n\t\t})\r\n\t\treturn res\r\n\t} catch (error) {\r\n\t\tconsole.log('login error', error)\r\n\t\treturn Promise.reject(error)\r\n\t}\r\n}\r\n\r\nexport const registerAPI = async (params: any) => {\r\n\ttry {\r\n\t\tconst res: any = await instance.post('/auth/signup', params)\r\n\t\treturn res\r\n\t} catch (error) {\r\n\t\tconsole.log('register error', error)\r\n\t\treturn Promise.reject(error)\r\n\t}\r\n}\r\n\r\nexport const SocialLogin = async (params: any) => {\r\n\ttry {\r\n\t\tvar myHeaders = new Headers()\r\n\t\tmyHeaders.append('token', params?.tokenId)\r\n\t\tvar requestOptions: any = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: myHeaders,\r\n\t\t\tredirect: 'follow'\r\n\t\t}\r\n\t\tlet res: any = ''\r\n\t\tlet link: string = params?.type == 'google' ? '/api/LoginByGoogleAccount' : '/api/LoginByFacebook'\r\n\t\tawait fetch(_.hostURL + link, requestOptions)\r\n\t\t\t.then((response: any) => response.text())\r\n\t\t\t.then((result: any) => {\r\n\t\t\t\tres = JSON.parse(result)\r\n\t\t\t})\r\n\t\t\t.catch((error: any) => console.log('error', error))\r\n\t\treturn res\r\n\t} catch (error) {\r\n\t\treturn Promise.reject(error)\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}