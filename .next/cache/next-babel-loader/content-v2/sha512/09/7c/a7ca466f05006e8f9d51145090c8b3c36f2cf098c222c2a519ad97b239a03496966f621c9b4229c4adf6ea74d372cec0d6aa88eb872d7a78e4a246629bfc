{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\Customer\\\\Service\\\\ServiceAppointmentTest.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport router from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { branchApi, studentApi, testCustomerApi, examTopicApi, packageExaminerApi, teacherApi } from '~/apiBase';\nimport FilterBase from '~/components/Elements/FilterBase/FilterBase';\nimport NotiModal from '~/components/Elements/NotiModal/NotiModal';\nimport SortBox from '~/components/Elements/SortBox';\nimport ExpandTable from '~/components/ExpandTable';\nimport TestAddExam from '~/components/Global/Customer/Service/TestAddExam';\nimport TestCustomerForm from '~/components/Global/Customer/Service/TestCustomerForm';\nimport LayoutBase from '~/components/LayoutBase';\nimport FilterColumn from '~/components/Tables/FilterColumn';\nimport { useWrap } from '~/context/wrap';\nimport ExamAppointmentPoint from '../../ExamAppointment/ExamAppointmentPoint';\nimport { CloseOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport { Modal, Tooltip } from 'antd';\nimport Link from 'next/link';\nlet pageIndex = 1;\nlet listFieldSearch = {\n  pageIndex: 1,\n  FullNameUnicode: null\n};\nlet listFieldFilter = {\n  pageIndex: 1,\n  BranchID: null,\n  // lọc\n  UserInformationID: null,\n  Status: null,\n  AppointmentDate: null\n};\nconst dataOption = [{\n  dataSort: {\n    sort: 2,\n    sortType: true\n  },\n  text: 'Tên A - Z '\n}, {\n  dataSort: {\n    sort: 2,\n    sortType: false\n  },\n  text: 'Tên Z - A'\n}, {\n  dataSort: {\n    sort: 0,\n    sortType: true\n  },\n  text: 'Ngày hẹn A - Z'\n}, {\n  dataSort: {\n    sort: 0,\n    sortType: false\n  },\n  text: 'Ngày hẹn Z - A'\n}]; // -- FOR DIFFERENT VIEW --\n\nconst listApi = [{\n  api: branchApi,\n  text: 'Trung tâm',\n  name: 'Branch'\n}, {\n  api: studentApi,\n  text: 'Học viên',\n  name: 'Student'\n}, {\n  api: teacherApi,\n  text: 'Giáo viên',\n  name: 'Teacher'\n}];\nexport default function ServiceAppointmentTest(props) {\n  const {\n    0: listDataForm,\n    1: setListDataForm\n  } = useState({\n    Branch: [],\n    Student: [],\n    Teacher: []\n  });\n  const {\n    0: dataExam,\n    1: setDataExam\n  } = useState([]);\n  const {\n    0: currentDay,\n    1: setCurrentDate\n  } = useState(null);\n  const {\n    0: isOpenNoti,\n    1: setisOpenNoti\n  } = useState(false);\n  const {\n    0: userID,\n    1: setUserID\n  } = useState(null); // ------ BASE USESTATE TABLE -------\n\n  const {\n    0: dataSource,\n    1: setDataSource\n  } = useState([]);\n  const {\n    showNoti,\n    pageSize,\n    userInformation\n  } = useWrap();\n  const listTodoApi = {\n    pageSize: pageSize,\n    pageIndex: pageIndex,\n    sort: null,\n    sortType: null,\n    FullNameUnicode: null,\n    BranchID: null,\n    // lọc\n    UserInformationID: null,\n    Status: null,\n    AppointmentDate: null\n  };\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    0: indexRow,\n    1: setIndexRow\n  } = useState(null);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: todoApi,\n    1: setTodoApi\n  } = useState(listTodoApi); // ------ LIST FILTER -------\n\n  const {\n    0: dataFilter,\n    1: setDataFilter\n  } = useState([{\n    name: 'BranchID',\n    title: 'Trung tâm',\n    col: 'col-md-12 col-12',\n    type: 'select',\n    optionList: null,\n    // Gọi api xong trả data vào đây\n    value: null\n  }, {\n    name: 'Status',\n    title: 'Trạng thái',\n    col: 'col-md-12 col-12',\n    type: 'select',\n    optionList: [{\n      title: 'Chưa test',\n      value: 0\n    }, {\n      title: 'Đang chấm bài test',\n      value: 1\n    }, {\n      title: 'Chưa đăng kí khóa học',\n      value: 2\n    }, {\n      title: 'Đã đăng kí khóa học',\n      value: 3\n    }, {\n      title: 'Đã hủy hẹn test',\n      value: 4\n    }],\n    value: null\n  }, {\n    name: 'AppointmentDate',\n    title: 'Ngày hẹn test',\n    col: 'col-md-12 col-12',\n    type: 'date-single',\n    value: null\n  }, {\n    name: 'date-range',\n    title: 'Từ - đến',\n    col: 'col-12',\n    type: 'date-range',\n    value: null\n  }]);\n  const {\n    0: dataTeacher,\n    1: setDataTeacher\n  } = useState([]); // Get list teacher\n\n  const getListTeacher = async () => {\n    // setLoadingTeacher(true);\n    try {\n      let res = await packageExaminerApi.getAll({\n        selectAll: true\n      });\n\n      if (res.status === 200) {\n        let newData = res.data.data.map(item => ({\n          title: item.TeacherName,\n          value: item.TeacherID\n        }));\n        setDataTeacher(newData);\n      }\n    } catch (error) {\n      console.log('Error Get List Teacher: ', error.message);\n    } finally {// setLoadingTeacher(true);\n    }\n  };\n\n  const makeNewData = (data, name) => {\n    let newData = null;\n\n    switch (name) {\n      case 'Branch':\n        newData = data.map(item => ({\n          title: item.BranchName,\n          value: item.ID\n        }));\n        setDataFunc('BranchID', newData);\n        break;\n\n      case 'Student':\n        newData = data.map(item => ({\n          title: item.FullNameUnicode,\n          value: item.UserInformationID,\n          counselorsName: item.CounselorsName == null ? '' : item.CounselorsName\n        }));\n        break;\n\n      case 'Teacher':\n        newData = data.map(item => ({\n          title: item.FullNameUnicode,\n          value: item.UserInformationID\n        }));\n        break;\n\n      default:\n        break;\n    }\n\n    return newData;\n  };\n\n  const getDataTolist = (data, name) => {\n    let newData = makeNewData(data, name);\n    Object.keys(listDataForm).forEach(function (key) {\n      if (key == name) {\n        listDataForm[key] = newData;\n      }\n    });\n    setListDataForm(_objectSpread({}, listDataForm));\n  }; // ----------- GET DATA EXAM ------------\n\n\n  const getDataExam = async () => {\n    try {\n      let res = await examTopicApi.getAll({\n        selectAll: true,\n        type: 1\n      });\n\n      if (res.status === 200) {\n        setDataExam(res.data.data);\n      }\n    } catch (error) {\n      console.log('Error Exam: ', error.message);\n    }\n  }; // ----------- GET DATA SOURCE ---------------\n\n\n  const getDataAll = arrApi => {\n    arrApi.forEach((item, index) => {\n      (async () => {\n        let res = null;\n\n        try {\n          if (item.name == 'Counselors') {\n            res = await item.api.getAll({\n              pageIndex: 1,\n              pageSize: 99999,\n              RoleID: 6,\n              StatusID: 0,\n              Enable: true\n            });\n          } else {\n            res = await item.api.getAll({\n              pageIndex: 1,\n              pageSize: 99999,\n              Enable: true\n            });\n          }\n\n          res.status == 200 && getDataTolist(res.data.data, item.name);\n          res.status == 204 && console.log(item.text + ' Không có dữ liệu');\n        } catch (error) {\n          // showNoti('danger', error.message);\n          console.log(error);\n        } finally {}\n      })();\n    });\n  }; // GET DATA SOURCE\n\n\n  const getDataSource = async () => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      let res = await testCustomerApi.getAll(todoApi);\n\n      if (res.status == 200) {\n        setDataSource(res.data.data);\n        setTotalPage(res.data.totalRow); //@ts-ignore\n        // setTestDate(moment(res.data.data.AppointmentDate).format('DD/MM/YYYY HH:mm'));\n      }\n\n      res.status == 204 && setDataSource([]);\n    } catch (error) {\n      error.status == 500 ? showNoti('danger', 'Đường truyền mạng không ổn định') : showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  }; // ------ SET DATA FUN ------\n\n\n  const setDataFunc = (name, data) => {\n    dataFilter.every((item, index) => {\n      if (item.name == name) {\n        item.optionList = data;\n        return false;\n      }\n\n      return true;\n    });\n    setDataFilter([...dataFilter]);\n  }; // ---------------- AFTER SUBMIT -----------------\n\n\n  const afterPost = mes => {\n    // showNoti(\"success\", mes);\n    setTodoApi(_objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1\n    }));\n    setCurrentPage(1);\n  }; // ----------------- ON SUBMIT --------------------\n\n\n  const _onSubmit = async dataSubmit => {\n    // console.log('Data submit: ', dataSubmit);\n    // console.log('List data form: ', listDataForm);\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res = null;\n\n    try {\n      if (dataSubmit.ID) {\n        res = await testCustomerApi.update(dataSubmit);\n\n        if (res.status == 200) {\n          // let newDataSource = [...dataSource];\n          // newDataSource.splice(indexRow, 1, {\n          // \t...dataSubmit,\n          // \tFullNameUnicode: listDataForm.Student.find((item) => item.value == dataSubmit.UserInformationID).title,\n          // \tBranchName: listDataForm.Branch.find((item) => item.value == dataSubmit.BranchID).title,\n          // \tTeacherName: listDataForm.Teacher.find((item) => item.value == dataSubmit.TeacherID).title\n          // });\n          // setDataSource(newDataSource);\n          setTodoApi(_objectSpread({}, todoApi));\n          showNoti('success', res.data.message);\n        }\n      } else {\n        var _res;\n\n        res = await testCustomerApi.add(dataSubmit);\n        ((_res = res) === null || _res === void 0 ? void 0 : _res.status) == 200 && afterPost(res.data.message);\n      }\n    } catch (error) {\n      console.log('error: ', error);\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  }; // -------------- HANDLE FILTER ------------------\n\n\n  const handleFilter = listFilter => {\n    let newListFilter = _objectSpread({}, listFieldFilter);\n\n    listFilter.forEach((item, index) => {\n      let key = item.name;\n      Object.keys(newListFilter).forEach(keyFilter => {\n        if (keyFilter == key) {\n          newListFilter[key] = item.value;\n        }\n      });\n    });\n    setTodoApi(_objectSpread(_objectSpread(_objectSpread({}, listTodoApi), newListFilter), {}, {\n      pageIndex: 1\n    }));\n  }; // --------------- HANDLE SORT ----------------------\n\n\n  const handleSort = async option => {\n    let newTodoApi = _objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1,\n      sort: option.title.sort,\n      sortType: option.title.sortType\n    });\n\n    setCurrentPage(1), setTodoApi(newTodoApi);\n  }; // ------------ ON SEARCH -----------------------\n\n\n  const checkField = (valueSearch, dataIndex) => {\n    let newList = _objectSpread({}, listFieldSearch);\n\n    Object.keys(newList).forEach(function (key) {\n      if (key != dataIndex) {\n        if (key != 'pageIndex') {\n          newList[key] = null;\n        }\n      } else {\n        newList[key] = valueSearch;\n      }\n    });\n    return newList;\n  };\n\n  const onSearch = (valueSearch, dataIndex) => {\n    let clearKey = dataIndex == 'FullNameUnicode' ? {\n      FullNameUnicode: valueSearch\n    } : dataIndex == 'Mobile' ? {\n      Mobile: valueSearch\n    } : {\n      Email: valueSearch\n    };\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), clearKey));\n  }; // HANDLE RESET\n\n\n  const resetListFieldSearch = () => {\n    Object.keys(listFieldSearch).forEach(function (key) {\n      if (key != 'pageIndex') {\n        listFieldSearch[key] = null;\n      }\n    });\n  };\n\n  const handleReset = () => {\n    setTodoApi(_objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1\n    }));\n    setCurrentPage(1), resetListFieldSearch();\n  }; // -------------- GET PAGE_NUMBER -----------------\n\n\n  const getPagination = pageNumber => {\n    pageIndex = pageNumber;\n    setCurrentPage(pageNumber);\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), {}, {\n      // ...listFieldSearch,\n      pageIndex: pageIndex\n    }));\n  }; // ============== USE EFFECT - FETCH DATA ===================\n\n\n  useEffect(() => {\n    getDataSource();\n  }, [todoApi]);\n  useEffect(() => {\n    getDataAll(listApi);\n    getDataExam(); // Get current date\n\n    let currentdate = new Date();\n    let datetime = currentdate.getDate() + '/' + (currentdate.getMonth() + 1) + '/' + currentdate.getFullYear() + ' ' + currentdate.getHours() + ':' + currentdate.getMinutes();\n    setCurrentDate(datetime);\n  }, []);\n  useEffect(() => {\n    if (userInformation) {\n      setUserID(userInformation.UserInformationID);\n    }\n  }, [userInformation]);\n\n  const moveToTest = (e, data) => {\n    e.preventDefault();\n    let testDate = moment(data.AppointmentDate).format('DD/MM/YYYY') + ' ' + data.Time;\n    console.log('Test DAte: ', testDate);\n\n    if (currentDay < testDate) {\n      setisOpenNoti(true);\n    } else {\n      router.push('');\n    }\n  };\n\n  const expandedRowRender = record => {\n    // return record.Note ? record.Note : \"Không có ghi chú\";\n    // return (\n    // \t<>\n    // \t\t<div className=\"box-note mt-2\">\n    // \t\t\t<h6 className=\"d-block text-underline\">Ghi chú:</h6>\n    // \t\t\t<p>{record.Note}</p>\n    // \t\t</div>\n    // \t\t<TestCustomerPoint ID={record.ID} />\n    // \t</>\n    // );\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontWeight: 500\n        },\n        className: \"mt-3 mb-2\",\n        children: \"Ghi ch\\xFA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: record.Note\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ExamAppointmentPoint, {\n        infoID: record.ID,\n        userID: record.UserInformationID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  };\n\n  const onUpdateData = () => {\n    setTodoApi(_objectSpread({}, todoApi));\n  };\n\n  const columns = [_objectSpread({\n    width: 200,\n    title: 'Học viên',\n    dataIndex: 'FullNameUnicode',\n    fixed: 'left',\n    render: a => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-primary\",\n      children: a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 19\n    }, this)\n  }, FilterColumn('FullNameUnicode', onSearch, handleReset, 'text')), _objectSpread({\n    title: 'Email',\n    dataIndex: 'Email',\n    fixed: 'left',\n    render: a => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-primary\",\n      children: a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 19\n    }, this)\n  }, FilterColumn('Email', onSearch, handleReset, 'text')), _objectSpread({\n    title: 'SDT',\n    dataIndex: 'Mobile',\n    fixed: 'left',\n    render: a => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-primary\",\n      children: a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 19\n    }, this)\n  }, FilterColumn('Mobile', onSearch, handleReset, 'text')), {\n    width: 170,\n    title: 'Trung tâm',\n    dataIndex: 'BranchName',\n    render: a => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-black\",\n      children: a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 19\n    }, this)\n  }, {\n    width: 170,\n    title: 'Đề test',\n    dataIndex: 'ExamTopicnName',\n    render: (text, data) => /*#__PURE__*/_jsxDEV(Link, {\n      href: {\n        pathname: `/question-bank/exam-list/exam-detail/${data.ExamTopicID}`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"\",\n        className: \"font-weight-link\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 5\n    }, this)\n  }, {\n    title: 'Ngày hẹn',\n    dataIndex: 'AppointmentDate',\n    render: date => moment(date).format('DD/MM/YYYY')\n  }, {\n    width: 100,\n    title: 'Giờ hẹn',\n    dataIndex: 'Time',\n    align: 'center'\n  }, {\n    width: 170,\n    title: 'Giáo viên chấm bài',\n    dataIndex: 'TeacherName'\n  }, {\n    width: 190,\n    title: 'Tư vấn viên',\n    dataIndex: 'CounselorsName'\n  }, {\n    title: 'Trạng thái',\n    dataIndex: 'Status',\n    align: 'center',\n    filters: [{\n      text: 'Chưa test',\n      value: 0\n    }, {\n      text: 'Đang chấm bài',\n      value: 1\n    }, {\n      text: 'Chờ đăng kí khóa học',\n      value: 2\n    }, {\n      text: 'Đã đăng kí khóa học',\n      value: 3\n    }, {\n      text: 'Đã hủy hẹn test',\n      value: 4\n    }],\n    onFilter: (value, record) => record.Status === value,\n    render: status => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [status == 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tag red\",\n          children: \"Ch\\u01B0a test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 23\n        }, this), status == 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tag blue\",\n          children: \"\\u0110ang ch\\u1EA5m b\\xE0i\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 23\n        }, this), status == 2 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tag yellow\",\n          children: \"Ch\\u1EDD \\u0111\\u0103ng k\\xED kh\\xF3a h\\u1ECDc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 23\n        }, this), status == 3 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tag green\",\n          children: \"\\u0110\\xE3 \\u0111\\u0103ng k\\xED \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 23\n        }, this), status == 4 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tag gray\",\n          children: \"\\u0110\\xE3 h\\u1EE7y h\\u1EB9n test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true);\n    }\n  }, {\n    title: '',\n    render: (text, data, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(TestCustomerForm, {\n        getIndex: () => setIndexRow(index),\n        index: index,\n        rowData: data,\n        rowID: data.ID,\n        listData: listDataForm,\n        isLoading: isLoading,\n        _onSubmit: data => _onSubmit(data),\n        dataExam: dataExam\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(TestAddExam, {\n        dataExam: dataExam,\n        dataRow: data,\n        onFetchData: () => setTodoApi(_objectSpread({}, todoApi))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 6\n      }, this), data.Status == 0 && /*#__PURE__*/_jsxDEV(CancelTest, {\n        onUpdateData: onUpdateData,\n        dataRow: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 5\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NotiModal, {\n      isOpen: isOpenNoti,\n      isCancel: () => setisOpenNoti(false),\n      isOk: () => setisOpenNoti(false),\n      content: \"Ch\\u01B0a \\u0111\\u1EBFn gi\\u1EDD l\\xE0m \\u0111\\u1EC1 test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ExpandTable, {\n      currentPage: currentPage,\n      totalPage: totalPage && totalPage,\n      getPagination: pageNumber => getPagination(pageNumber),\n      loading: isLoading,\n      addClass: \"basic-header\",\n      TitlePage: \"Danh s\\xE1ch KH\\xC1CH H\\u1EB8N TEST\" // TitleCard={\n      //   <StudentAdviseForm\n      //     listData={listDataForm}\n      //     isLoading={isLoading}\n      //     _onSubmit={(data: any) => _onSubmit(data)}\n      //   />\n      // }\n      ,\n      dataSource: dataSource,\n      columns: columns,\n      Extra: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"extra-table\",\n        children: [/*#__PURE__*/_jsxDEV(FilterBase, {\n          dataFilter: dataFilter,\n          handleFilter: listFilter => handleFilter(listFilter),\n          handleReset: handleReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(SortBox, {\n          handleSort: value => handleSort(value),\n          dataOption: dataOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 6\n      }, this),\n      expandable: {\n        expandedRowRender\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\nServiceAppointmentTest.layout = LayoutBase;\n\nconst CancelTest = props => {\n  const {\n    onUpdateData,\n    dataRow\n  } = props;\n  const {\n    0: isModalVisible,\n    1: setIsModalVisible\n  } = useState(false);\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = async () => {\n    let dataSubmit = {\n      ID: dataRow.ID,\n      Status: 4\n    };\n    setLoading(true);\n\n    try {\n      let res = await testCustomerApi.update(dataSubmit);\n\n      if (res.status == 200) {\n        showNoti('success', 'Hủy lịch hẹn test thành công!');\n        setIsModalVisible(false);\n        onUpdateData && onUpdateData();\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"H\\u1EE7y l\\u1ECBch h\\u1EB9n\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-icon delete\",\n        onClick: showModal,\n        children: /*#__PURE__*/_jsxDEV(CloseOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-icon delete\",\n        children: /*#__PURE__*/_jsxDEV(QuestionCircleOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 6\n      }, this),\n      visible: isModalVisible,\n      onOk: handleOk,\n      onCancel: handleCancel,\n      okButtonProps: {\n        loading: loading\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontWeight: 500\n        },\n        children: \"B\\u1EA1n mu\\u1ED1n h\\u1EE7y l\\u1ECBch h\\u1EB9n test c\\u1EE7a h\\u1ECDc vi\\xEAn n\\xE0y?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/Customer/Service/ServiceAppointmentTest.tsx"],"names":["moment","router","React","useEffect","useState","branchApi","studentApi","testCustomerApi","examTopicApi","packageExaminerApi","teacherApi","FilterBase","NotiModal","SortBox","ExpandTable","TestAddExam","TestCustomerForm","LayoutBase","FilterColumn","useWrap","ExamAppointmentPoint","CloseOutlined","QuestionCircleOutlined","Modal","Tooltip","Link","pageIndex","listFieldSearch","FullNameUnicode","listFieldFilter","BranchID","UserInformationID","Status","AppointmentDate","dataOption","dataSort","sort","sortType","text","listApi","api","name","ServiceAppointmentTest","props","listDataForm","setListDataForm","Branch","Student","Teacher","dataExam","setDataExam","currentDay","setCurrentDate","isOpenNoti","setisOpenNoti","userID","setUserID","dataSource","setDataSource","showNoti","pageSize","userInformation","listTodoApi","isLoading","setIsLoading","type","status","totalPage","setTotalPage","indexRow","setIndexRow","currentPage","setCurrentPage","todoApi","setTodoApi","dataFilter","setDataFilter","title","col","optionList","value","dataTeacher","setDataTeacher","getListTeacher","res","getAll","selectAll","newData","data","map","item","TeacherName","TeacherID","error","console","log","message","makeNewData","BranchName","ID","setDataFunc","counselorsName","CounselorsName","getDataTolist","Object","keys","forEach","key","getDataExam","getDataAll","arrApi","index","RoleID","StatusID","Enable","getDataSource","totalRow","every","afterPost","mes","_onSubmit","dataSubmit","update","add","handleFilter","listFilter","newListFilter","keyFilter","handleSort","option","newTodoApi","checkField","valueSearch","dataIndex","newList","onSearch","clearKey","Mobile","Email","resetListFieldSearch","handleReset","getPagination","pageNumber","currentdate","Date","datetime","getDate","getMonth","getFullYear","getHours","getMinutes","moveToTest","e","preventDefault","testDate","format","Time","push","expandedRowRender","record","fontWeight","Note","onUpdateData","columns","width","fixed","render","a","pathname","ExamTopicID","date","align","filters","onFilter","stopPropagation","layout","CancelTest","dataRow","isModalVisible","setIsModalVisible","loading","setLoading","showModal","handleOk","handleCancel"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,eAAhC,EAAiDC,YAAjD,EAA+DC,kBAA/D,EAAmFC,UAAnF,QAAqG,WAArG;AACA,OAAOC,UAAP,MAAuB,6CAAvB;AACA,OAAOC,SAAP,MAAsB,2CAAtB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,WAAP,MAAwB,kDAAxB;AACA,OAAOC,gBAAP,MAA6B,uDAA7B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,OAAOC,oBAAP,MAAiC,4CAAjC;AACA,SAASC,aAAT,EAAwBC,sBAAxB,QAAsD,mBAAtD;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,MAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,IAAIC,SAAS,GAAG,CAAhB;AAEA,IAAIC,eAAe,GAAG;AACrBD,EAAAA,SAAS,EAAE,CADU;AAErBE,EAAAA,eAAe,EAAE;AAFI,CAAtB;AAKA,IAAIC,eAAe,GAAG;AACrBH,EAAAA,SAAS,EAAE,CADU;AAErBI,EAAAA,QAAQ,EAAE,IAFW;AAEL;AAChBC,EAAAA,iBAAiB,EAAE,IAHE;AAIrBC,EAAAA,MAAM,EAAE,IAJa;AAKrBC,EAAAA,eAAe,EAAE;AALI,CAAtB;AAQA,MAAMC,UAAU,GAAG,CAClB;AACCC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADX;AAKCC,EAAAA,IAAI,EAAE;AALP,CADkB,EAQlB;AACCH,EAAAA,QAAQ,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADX;AAKCC,EAAAA,IAAI,EAAE;AALP,CARkB,EAgBlB;AACCH,EAAAA,QAAQ,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADX;AAKCC,EAAAA,IAAI,EAAE;AALP,CAhBkB,EAuBlB;AACCH,EAAAA,QAAQ,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADX;AAKCC,EAAAA,IAAI,EAAE;AALP,CAvBkB,CAAnB,C,CAgCA;;AAkBA,MAAMC,OAAO,GAAG,CACf;AACCC,EAAAA,GAAG,EAAEnC,SADN;AAECiC,EAAAA,IAAI,EAAE,WAFP;AAGCG,EAAAA,IAAI,EAAE;AAHP,CADe,EAMf;AACCD,EAAAA,GAAG,EAAElC,UADN;AAECgC,EAAAA,IAAI,EAAE,UAFP;AAGCG,EAAAA,IAAI,EAAE;AAHP,CANe,EAWf;AACCD,EAAAA,GAAG,EAAE9B,UADN;AAEC4B,EAAAA,IAAI,EAAE,WAFP;AAGCG,EAAAA,IAAI,EAAE;AAHP,CAXe,CAAhB;AAkBA,eAAe,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AACrD,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCzC,QAAQ,CAAe;AAC9D0C,IAAAA,MAAM,EAAE,EADsD;AAE9DC,IAAAA,OAAO,EAAE,EAFqD;AAG9DC,IAAAA,OAAO,EAAE;AAHqD,GAAf,CAAhD;AAKA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0B9C,QAAQ,CAAe,EAAf,CAAxC;AACA,QAAM;AAAA,OAAC+C,UAAD;AAAA,OAAaC;AAAb,MAA+BhD,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM;AAAA,OAACiD,UAAD;AAAA,OAAaC;AAAb,MAA8BlD,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACmD,MAAD;AAAA,OAASC;AAAT,MAAsBpD,QAAQ,CAAC,IAAD,CAApC,CATqD,CAWrD;;AACA,QAAM;AAAA,OAACqD,UAAD;AAAA,OAAaC;AAAb,MAA8BtD,QAAQ,CAAkB,EAAlB,CAA5C;AACA,QAAM;AAAEuD,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAA0C1C,OAAO,EAAvD;AACA,QAAM2C,WAAW,GAAG;AACnBF,IAAAA,QAAQ,EAAEA,QADS;AAEnBlC,IAAAA,SAAS,EAAEA,SAFQ;AAGnBU,IAAAA,IAAI,EAAE,IAHa;AAInBC,IAAAA,QAAQ,EAAE,IAJS;AAKnBT,IAAAA,eAAe,EAAE,IALE;AAMnBE,IAAAA,QAAQ,EAAE,IANS;AAMH;AAChBC,IAAAA,iBAAiB,EAAE,IAPA;AAQnBC,IAAAA,MAAM,EAAE,IARW;AASnBC,IAAAA,eAAe,EAAE;AATE,GAApB;AAWA,QAAM;AAAA,OAAC8B,SAAD;AAAA,OAAYC;AAAZ,MAA4B5D,QAAQ,CAAC;AAC1C6D,IAAAA,IAAI,EAAE,EADoC;AAE1CC,IAAAA,MAAM,EAAE;AAFkC,GAAD,CAA1C;AAIA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BhE,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACiE,QAAD;AAAA,OAAWC;AAAX,MAA0BlE,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAA,OAACmE,WAAD;AAAA,OAAcC;AAAd,MAAgCpE,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM;AAAA,OAACqE,OAAD;AAAA,OAAUC;AAAV,MAAwBtE,QAAQ,CAAC0D,WAAD,CAAtC,CAhCqD,CAkCrD;;AACA,QAAM;AAAA,OAACa,UAAD;AAAA,OAAaC;AAAb,MAA8BxE,QAAQ,CAAC,CAC5C;AACCqC,IAAAA,IAAI,EAAE,UADP;AAECoC,IAAAA,KAAK,EAAE,WAFR;AAGCC,IAAAA,GAAG,EAAE,kBAHN;AAICb,IAAAA,IAAI,EAAE,QAJP;AAKCc,IAAAA,UAAU,EAAE,IALb;AAKmB;AAClBC,IAAAA,KAAK,EAAE;AANR,GAD4C,EAU5C;AACCvC,IAAAA,IAAI,EAAE,QADP;AAECoC,IAAAA,KAAK,EAAE,YAFR;AAGCC,IAAAA,GAAG,EAAE,kBAHN;AAICb,IAAAA,IAAI,EAAE,QAJP;AAKCc,IAAAA,UAAU,EAAE,CACX;AACCF,MAAAA,KAAK,EAAE,WADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KADW,EAKX;AACCH,MAAAA,KAAK,EAAE,oBADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KALW,EASX;AACCH,MAAAA,KAAK,EAAE,uBADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KATW,EAaX;AACCH,MAAAA,KAAK,EAAE,qBADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KAbW,EAiBX;AACCH,MAAAA,KAAK,EAAE,iBADR;AAECG,MAAAA,KAAK,EAAE;AAFR,KAjBW,CALb;AA2BCA,IAAAA,KAAK,EAAE;AA3BR,GAV4C,EAuC5C;AACCvC,IAAAA,IAAI,EAAE,iBADP;AAECoC,IAAAA,KAAK,EAAE,eAFR;AAGCC,IAAAA,GAAG,EAAE,kBAHN;AAICb,IAAAA,IAAI,EAAE,aAJP;AAKCe,IAAAA,KAAK,EAAE;AALR,GAvC4C,EA8C5C;AACCvC,IAAAA,IAAI,EAAE,YADP;AAECoC,IAAAA,KAAK,EAAE,UAFR;AAGCC,IAAAA,GAAG,EAAE,QAHN;AAICb,IAAAA,IAAI,EAAE,YAJP;AAKCe,IAAAA,KAAK,EAAE;AALR,GA9C4C,CAAD,CAA5C;AAuDA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgC9E,QAAQ,CAAC,EAAD,CAA9C,CA1FqD,CA4FrD;;AACA,QAAM+E,cAAc,GAAG,YAAY;AAClC;AACA,QAAI;AACH,UAAIC,GAAG,GAAG,MAAM3E,kBAAkB,CAAC4E,MAAnB,CAA0B;AACzCC,QAAAA,SAAS,EAAE;AAD8B,OAA1B,CAAhB;;AAIA,UAAIF,GAAG,CAAClB,MAAJ,KAAe,GAAnB,EAAwB;AACvB,YAAIqB,OAAO,GAAGH,GAAG,CAACI,IAAJ,CAASA,IAAT,CAAcC,GAAd,CAAmBC,IAAD,KAAW;AAC1Cb,UAAAA,KAAK,EAAEa,IAAI,CAACC,WAD8B;AAE1CX,UAAAA,KAAK,EAAEU,IAAI,CAACE;AAF8B,SAAX,CAAlB,CAAd;AAIAV,QAAAA,cAAc,CAACK,OAAD,CAAd;AACA;AACD,KAZD,CAYE,OAAOM,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAK,CAACG,OAA9C;AACA,KAdD,SAcU,CACT;AACA;AACD,GAnBD;;AAqBA,QAAMC,WAAW,GAAG,CAACT,IAAD,EAAO/C,IAAP,KAAgB;AACnC,QAAI8C,OAAO,GAAG,IAAd;;AACA,YAAQ9C,IAAR;AACC,WAAK,QAAL;AACC8C,QAAAA,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAUC,IAAD,KAAW;AAC7Bb,UAAAA,KAAK,EAAEa,IAAI,CAACQ,UADiB;AAE7BlB,UAAAA,KAAK,EAAEU,IAAI,CAACS;AAFiB,SAAX,CAAT,CAAV;AAIAC,QAAAA,WAAW,CAAC,UAAD,EAAab,OAAb,CAAX;AACA;;AAED,WAAK,SAAL;AACCA,QAAAA,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAUC,IAAD,KAAW;AAC7Bb,UAAAA,KAAK,EAAEa,IAAI,CAAC9D,eADiB;AAE7BoD,UAAAA,KAAK,EAAEU,IAAI,CAAC3D,iBAFiB;AAG7BsE,UAAAA,cAAc,EAAEX,IAAI,CAACY,cAAL,IAAuB,IAAvB,GAA8B,EAA9B,GAAmCZ,IAAI,CAACY;AAH3B,SAAX,CAAT,CAAV;AAMA;;AACD,WAAK,SAAL;AACCf,QAAAA,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAUC,IAAD,KAAW;AAC7Bb,UAAAA,KAAK,EAAEa,IAAI,CAAC9D,eADiB;AAE7BoD,UAAAA,KAAK,EAAEU,IAAI,CAAC3D;AAFiB,SAAX,CAAT,CAAV;AAKA;;AACD;AACC;AAzBF;;AA4BA,WAAOwD,OAAP;AACA,GA/BD;;AAiCA,QAAMgB,aAAa,GAAG,CAACf,IAAD,EAAY/C,IAAZ,KAA0B;AAC/C,QAAI8C,OAAO,GAAGU,WAAW,CAACT,IAAD,EAAO/C,IAAP,CAAzB;AAEA+D,IAAAA,MAAM,CAACC,IAAP,CAAY7D,YAAZ,EAA0B8D,OAA1B,CAAkC,UAAUC,GAAV,EAAe;AAChD,UAAIA,GAAG,IAAIlE,IAAX,EAAiB;AAChBG,QAAAA,YAAY,CAAC+D,GAAD,CAAZ,GAAoBpB,OAApB;AACA;AACD,KAJD;AAKA1C,IAAAA,eAAe,mBAAMD,YAAN,EAAf;AACA,GATD,CAnJqD,CA8JrD;;;AACA,QAAMgE,WAAW,GAAG,YAAY;AAC/B,QAAI;AACH,UAAIxB,GAAG,GAAG,MAAM5E,YAAY,CAAC6E,MAAb,CAAoB;AACnCC,QAAAA,SAAS,EAAE,IADwB;AAEnCrB,QAAAA,IAAI,EAAE;AAF6B,OAApB,CAAhB;;AAIA,UAAImB,GAAG,CAAClB,MAAJ,KAAe,GAAnB,EAAwB;AACvBhB,QAAAA,WAAW,CAACkC,GAAG,CAACI,IAAJ,CAASA,IAAV,CAAX;AACA;AACD,KARD,CAQE,OAAOK,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,KAAK,CAACG,OAAlC;AACA;AACD,GAZD,CA/JqD,CA6KrD;;;AACA,QAAMa,UAAU,GAAIC,MAAD,IAAY;AAC9BA,IAAAA,MAAM,CAACJ,OAAP,CAAe,CAAChB,IAAD,EAAOqB,KAAP,KAAiB;AAC/B,OAAC,YAAY;AACZ,YAAI3B,GAAG,GAAG,IAAV;;AACA,YAAI;AACH,cAAIM,IAAI,CAACjD,IAAL,IAAa,YAAjB,EAA+B;AAC9B2C,YAAAA,GAAG,GAAG,MAAMM,IAAI,CAAClD,GAAL,CAAS6C,MAAT,CAAgB;AAC3B3D,cAAAA,SAAS,EAAE,CADgB;AAE3BkC,cAAAA,QAAQ,EAAE,KAFiB;AAG3BoD,cAAAA,MAAM,EAAE,CAHmB;AAI3BC,cAAAA,QAAQ,EAAE,CAJiB;AAK3BC,cAAAA,MAAM,EAAE;AALmB,aAAhB,CAAZ;AAOA,WARD,MAQO;AACN9B,YAAAA,GAAG,GAAG,MAAMM,IAAI,CAAClD,GAAL,CAAS6C,MAAT,CAAgB;AAC3B3D,cAAAA,SAAS,EAAE,CADgB;AAE3BkC,cAAAA,QAAQ,EAAE,KAFiB;AAG3BsD,cAAAA,MAAM,EAAE;AAHmB,aAAhB,CAAZ;AAKA;;AAED9B,UAAAA,GAAG,CAAClB,MAAJ,IAAc,GAAd,IAAqBqC,aAAa,CAACnB,GAAG,CAACI,IAAJ,CAASA,IAAV,EAAgBE,IAAI,CAACjD,IAArB,CAAlC;AAEA2C,UAAAA,GAAG,CAAClB,MAAJ,IAAc,GAAd,IAAqB4B,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACpD,IAAL,GAAY,mBAAxB,CAArB;AACA,SApBD,CAoBE,OAAOuD,KAAP,EAAc;AACf;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAvBD,SAuBU,CACT;AACD,OA3BD;AA4BA,KA7BD;AA8BA,GA/BD,CA9KqD,CA+MrD;;;AACA,QAAMsB,aAAa,GAAG,YAAY;AACjCnD,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,SADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;;AAKA,QAAI;AACH,UAAIkB,GAAG,GAAG,MAAM7E,eAAe,CAAC8E,MAAhB,CAAuBZ,OAAvB,CAAhB;;AACA,UAAIW,GAAG,CAAClB,MAAJ,IAAc,GAAlB,EAAuB;AACtBR,QAAAA,aAAa,CAAC0B,GAAG,CAACI,IAAJ,CAASA,IAAV,CAAb;AACApB,QAAAA,YAAY,CAACgB,GAAG,CAACI,IAAJ,CAAS4B,QAAV,CAAZ,CAFsB,CAGtB;AACA;AACA;;AACDhC,MAAAA,GAAG,CAAClB,MAAJ,IAAc,GAAd,IAAqBR,aAAa,CAAC,EAAD,CAAlC;AACA,KATD,CASE,OAAOmC,KAAP,EAAc;AACfA,MAAAA,KAAK,CAAC3B,MAAN,IAAgB,GAAhB,GAAsBP,QAAQ,CAAC,QAAD,EAAW,iCAAX,CAA9B,GAA8EA,QAAQ,CAAC,QAAD,EAAWkC,KAAK,CAACG,OAAjB,CAAtF;AACA,KAXD,SAWU;AACThC,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,SADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;AACD,GAvBD,CAhNqD,CAyOrD;;;AACA,QAAMkC,WAAW,GAAG,CAAC3D,IAAD,EAAO+C,IAAP,KAAgB;AACnCb,IAAAA,UAAU,CAAC0C,KAAX,CAAiB,CAAC3B,IAAD,EAAOqB,KAAP,KAAiB;AACjC,UAAIrB,IAAI,CAACjD,IAAL,IAAaA,IAAjB,EAAuB;AACtBiD,QAAAA,IAAI,CAACX,UAAL,GAAkBS,IAAlB;AACA,eAAO,KAAP;AACA;;AACD,aAAO,IAAP;AACA,KAND;AAOAZ,IAAAA,aAAa,CAAC,CAAC,GAAGD,UAAJ,CAAD,CAAb;AACA,GATD,CA1OqD,CAqPrD;;;AACA,QAAM2C,SAAS,GAAIC,GAAD,IAAS;AAC1B;AACA7C,IAAAA,UAAU,iCACNZ,WADM;AAETpC,MAAAA,SAAS,EAAE;AAFF,OAAV;AAIA8C,IAAAA,cAAc,CAAC,CAAD,CAAd;AACA,GAPD,CAtPqD,CA+PrD;;;AACA,QAAMgD,SAAS,GAAG,MAAOC,UAAP,IAA2B;AAC5C;AACA;AACAzD,IAAAA,YAAY,CAAC;AACZC,MAAAA,IAAI,EAAE,UADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAD,CAAZ;AAKA,QAAIkB,GAAG,GAAG,IAAV;;AAEA,QAAI;AACH,UAAIqC,UAAU,CAACtB,EAAf,EAAmB;AAClBf,QAAAA,GAAG,GAAG,MAAM7E,eAAe,CAACmH,MAAhB,CAAuBD,UAAvB,CAAZ;;AAEA,YAAIrC,GAAG,CAAClB,MAAJ,IAAc,GAAlB,EAAuB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAQ,UAAAA,UAAU,mBAAMD,OAAN,EAAV;AACAd,UAAAA,QAAQ,CAAC,SAAD,EAAYyB,GAAG,CAACI,IAAJ,CAASQ,OAArB,CAAR;AACA;AACD,OAfD,MAeO;AAAA;;AACNZ,QAAAA,GAAG,GAAG,MAAM7E,eAAe,CAACoH,GAAhB,CAAoBF,UAApB,CAAZ;AACA,iBAAArC,GAAG,UAAH,oCAAKlB,MAAL,KAAe,GAAf,IAAsBoD,SAAS,CAAClC,GAAG,CAACI,IAAJ,CAASQ,OAAV,CAA/B;AACA;AACD,KApBD,CAoBE,OAAOH,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;AACAlC,MAAAA,QAAQ,CAAC,QAAD,EAAWkC,KAAK,CAACG,OAAjB,CAAR;AACA,KAvBD,SAuBU;AACThC,MAAAA,YAAY,CAAC;AACZC,QAAAA,IAAI,EAAE,UADM;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAD,CAAZ;AAIA;;AAED,WAAOkB,GAAP;AACA,GAzCD,CAhQqD,CA2SrD;;;AACA,QAAMwC,YAAY,GAAIC,UAAD,IAAgB;AACpC,QAAIC,aAAa,qBAAQjG,eAAR,CAAjB;;AACAgG,IAAAA,UAAU,CAACnB,OAAX,CAAmB,CAAChB,IAAD,EAAOqB,KAAP,KAAiB;AACnC,UAAIJ,GAAG,GAAGjB,IAAI,CAACjD,IAAf;AACA+D,MAAAA,MAAM,CAACC,IAAP,CAAYqB,aAAZ,EAA2BpB,OAA3B,CAAoCqB,SAAD,IAAe;AACjD,YAAIA,SAAS,IAAIpB,GAAjB,EAAsB;AACrBmB,UAAAA,aAAa,CAACnB,GAAD,CAAb,GAAqBjB,IAAI,CAACV,KAA1B;AACA;AACD,OAJD;AAKA,KAPD;AAQAN,IAAAA,UAAU,+CAAMZ,WAAN,GAAsBgE,aAAtB;AAAqCpG,MAAAA,SAAS,EAAE;AAAhD,OAAV;AACA,GAXD,CA5SqD,CAyTrD;;;AACA,QAAMsG,UAAU,GAAG,MAAOC,MAAP,IAAkB;AACpC,QAAIC,UAAU,mCACVpE,WADU;AAEbpC,MAAAA,SAAS,EAAE,CAFE;AAGbU,MAAAA,IAAI,EAAE6F,MAAM,CAACpD,KAAP,CAAazC,IAHN;AAIbC,MAAAA,QAAQ,EAAE4F,MAAM,CAACpD,KAAP,CAAaxC;AAJV,MAAd;;AAMAmC,IAAAA,cAAc,CAAC,CAAD,CAAd,EAAmBE,UAAU,CAACwD,UAAD,CAA7B;AACA,GARD,CA1TqD,CAoUrD;;;AAEA,QAAMC,UAAU,GAAG,CAACC,WAAD,EAAcC,SAAd,KAA4B;AAC9C,QAAIC,OAAO,qBAAQ3G,eAAR,CAAX;;AACA6E,IAAAA,MAAM,CAACC,IAAP,CAAY6B,OAAZ,EAAqB5B,OAArB,CAA6B,UAAUC,GAAV,EAAe;AAC3C,UAAIA,GAAG,IAAI0B,SAAX,EAAsB;AACrB,YAAI1B,GAAG,IAAI,WAAX,EAAwB;AACvB2B,UAAAA,OAAO,CAAC3B,GAAD,CAAP,GAAe,IAAf;AACA;AACD,OAJD,MAIO;AACN2B,QAAAA,OAAO,CAAC3B,GAAD,CAAP,GAAeyB,WAAf;AACA;AACD,KARD;AAUA,WAAOE,OAAP;AACA,GAbD;;AAeA,QAAMC,QAAQ,GAAG,CAACH,WAAD,EAAcC,SAAd,KAA4B;AAC5C,QAAIG,QAAQ,GACXH,SAAS,IAAI,iBAAb,GACG;AAAEzG,MAAAA,eAAe,EAAEwG;AAAnB,KADH,GAEGC,SAAS,IAAI,QAAb,GACA;AAAEI,MAAAA,MAAM,EAAEL;AAAV,KADA,GAEA;AAAEM,MAAAA,KAAK,EAAEN;AAAT,KALJ;AAOA1D,IAAAA,UAAU,iCACND,OADM,GAEN+D,QAFM,EAAV;AAIA,GAZD,CArVqD,CAmWrD;;;AACA,QAAMG,oBAAoB,GAAG,MAAM;AAClCnC,IAAAA,MAAM,CAACC,IAAP,CAAY9E,eAAZ,EAA6B+E,OAA7B,CAAqC,UAAUC,GAAV,EAAe;AACnD,UAAIA,GAAG,IAAI,WAAX,EAAwB;AACvBhF,QAAAA,eAAe,CAACgF,GAAD,CAAf,GAAuB,IAAvB;AACA;AACD,KAJD;AAKA,GAND;;AAQA,QAAMiC,WAAW,GAAG,MAAM;AACzBlE,IAAAA,UAAU,iCACNZ,WADM;AAETpC,MAAAA,SAAS,EAAE;AAFF,OAAV;AAIA8C,IAAAA,cAAc,CAAC,CAAD,CAAd,EAAmBmE,oBAAoB,EAAvC;AACA,GAND,CA5WqD,CAoXrD;;;AACA,QAAME,aAAa,GAAIC,UAAD,IAAwB;AAC7CpH,IAAAA,SAAS,GAAGoH,UAAZ;AACAtE,IAAAA,cAAc,CAACsE,UAAD,CAAd;AAEApE,IAAAA,UAAU,iCACND,OADM;AAET;AACA/C,MAAAA,SAAS,EAAEA;AAHF,OAAV;AAKA,GATD,CArXqD,CAgYrD;;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACfgH,IAAAA,aAAa;AACb,GAFQ,EAEN,CAAC1C,OAAD,CAFM,CAAT;AAIAtE,EAAAA,SAAS,CAAC,MAAM;AACf0G,IAAAA,UAAU,CAACtE,OAAD,CAAV;AACAqE,IAAAA,WAAW,GAFI,CAIf;;AACA,QAAImC,WAAW,GAAG,IAAIC,IAAJ,EAAlB;AACA,QAAIC,QAAQ,GACXF,WAAW,CAACG,OAAZ,KACA,GADA,IAECH,WAAW,CAACI,QAAZ,KAAyB,CAF1B,IAGA,GAHA,GAIAJ,WAAW,CAACK,WAAZ,EAJA,GAKA,GALA,GAMAL,WAAW,CAACM,QAAZ,EANA,GAOA,GAPA,GAQAN,WAAW,CAACO,UAAZ,EATD;AAWAlG,IAAAA,cAAc,CAAC6F,QAAD,CAAd;AACA,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA9I,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI0D,eAAJ,EAAqB;AACpBL,MAAAA,SAAS,CAACK,eAAe,CAAC9B,iBAAjB,CAAT;AACA;AACD,GAJQ,EAIN,CAAC8B,eAAD,CAJM,CAAT;;AAMA,QAAM0F,UAAU,GAAG,CAACC,CAAD,EAAIhE,IAAJ,KAAa;AAC/BgE,IAAAA,CAAC,CAACC,cAAF;AAEA,QAAIC,QAAQ,GAAG1J,MAAM,CAACwF,IAAI,CAACvD,eAAN,CAAN,CAA6B0H,MAA7B,CAAoC,YAApC,IAAoD,GAApD,GAA0DnE,IAAI,CAACoE,IAA9E;AACA9D,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B2D,QAA3B;;AACA,QAAIvG,UAAU,GAAGuG,QAAjB,EAA2B;AAC1BpG,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,KAFD,MAEO;AACNrD,MAAAA,MAAM,CAAC4J,IAAP,CAAY,EAAZ;AACA;AACD,GAVD;;AAYA,QAAMC,iBAAiB,GAAIC,MAAD,IAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBACC;AAAA,8BACC;AAAG,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAV;AAA+B,QAAA,SAAS,EAAC,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAIC;AAAA,kBAAID,MAAM,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,cAJD,eAKC,QAAC,oBAAD;AAAsB,QAAA,MAAM,EAAEF,MAAM,CAAC5D,EAArC;AAAyC,QAAA,MAAM,EAAE4D,MAAM,CAAChI;AAAxD;AAAA;AAAA;AAAA;AAAA,cALD;AAAA,oBADD;AASA,GApBD;;AAsBA,QAAMmI,YAAY,GAAG,MAAM;AAC1BxF,IAAAA,UAAU,mBAAMD,OAAN,EAAV;AACA,GAFD;;AAIA,QAAM0F,OAAO,GAAG;AAEdC,IAAAA,KAAK,EAAE,GAFO;AAGdvF,IAAAA,KAAK,EAAE,UAHO;AAIdwD,IAAAA,SAAS,EAAE,iBAJG;AAKdgC,IAAAA,KAAK,EAAE,MALO;AAMdC,IAAAA,MAAM,EAAGC,CAAD,iBAAO;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA,gBAAoCA;AAApC;AAAA;AAAA;AAAA;AAAA;AAND,KAOXrJ,YAAY,CAAC,iBAAD,EAAoBqH,QAApB,EAA8BK,WAA9B,EAA2C,MAA3C,CAPD;AAUd/D,IAAAA,KAAK,EAAE,OAVO;AAWdwD,IAAAA,SAAS,EAAE,OAXG;AAYdgC,IAAAA,KAAK,EAAE,MAZO;AAadC,IAAAA,MAAM,EAAGC,CAAD,iBAAO;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA,gBAAoCA;AAApC;AAAA;AAAA;AAAA;AAAA;AAbD,KAcXrJ,YAAY,CAAC,OAAD,EAAUqH,QAAV,EAAoBK,WAApB,EAAiC,MAAjC,CAdD;AAiBd/D,IAAAA,KAAK,EAAE,KAjBO;AAkBdwD,IAAAA,SAAS,EAAE,QAlBG;AAmBdgC,IAAAA,KAAK,EAAE,MAnBO;AAoBdC,IAAAA,MAAM,EAAGC,CAAD,iBAAO;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA,gBAAoCA;AAApC;AAAA;AAAA;AAAA;AAAA;AApBD,KAqBXrJ,YAAY,CAAC,QAAD,EAAWqH,QAAX,EAAqBK,WAArB,EAAkC,MAAlC,CArBD,GAuBf;AACCwB,IAAAA,KAAK,EAAE,GADR;AAECvF,IAAAA,KAAK,EAAE,WAFR;AAGCwD,IAAAA,SAAS,EAAE,YAHZ;AAKCiC,IAAAA,MAAM,EAAGC,CAAD,iBAAO;AAAG,MAAA,SAAS,EAAC,mBAAb;AAAA,gBAAkCA;AAAlC;AAAA;AAAA;AAAA;AAAA;AALhB,GAvBe,EA8Bf;AACCH,IAAAA,KAAK,EAAE,GADR;AAECvF,IAAAA,KAAK,EAAE,SAFR;AAGCwD,IAAAA,SAAS,EAAE,gBAHZ;AAICiC,IAAAA,MAAM,EAAE,CAAChI,IAAD,EAAOkD,IAAP,kBACP,QAAC,IAAD;AACC,MAAA,IAAI,EAAE;AACLgF,QAAAA,QAAQ,EAAG,wCAAuChF,IAAI,CAACiF,WAAY;AAD9D,OADP;AAAA,6BAKC;AAAG,QAAA,IAAI,EAAC,EAAR;AAAW,QAAA,SAAS,EAAC,kBAArB;AAAA,kBACEnI;AADF;AAAA;AAAA;AAAA;AAAA;AALD;AAAA;AAAA;AAAA;AAAA;AALF,GA9Be,EA8Cf;AACCuC,IAAAA,KAAK,EAAE,UADR;AAECwD,IAAAA,SAAS,EAAE,iBAFZ;AAGCiC,IAAAA,MAAM,EAAGI,IAAD,IAAe1K,MAAM,CAAC0K,IAAD,CAAN,CAAaf,MAAb,CAAoB,YAApB;AAHxB,GA9Ce,EAmDf;AACCS,IAAAA,KAAK,EAAE,GADR;AAECvF,IAAAA,KAAK,EAAE,SAFR;AAGCwD,IAAAA,SAAS,EAAE,MAHZ;AAICsC,IAAAA,KAAK,EAAE;AAJR,GAnDe,EAyDf;AACCP,IAAAA,KAAK,EAAE,GADR;AAECvF,IAAAA,KAAK,EAAE,oBAFR;AAGCwD,IAAAA,SAAS,EAAE;AAHZ,GAzDe,EA8Df;AACC+B,IAAAA,KAAK,EAAE,GADR;AAECvF,IAAAA,KAAK,EAAE,aAFR;AAGCwD,IAAAA,SAAS,EAAE;AAHZ,GA9De,EAoEf;AACCxD,IAAAA,KAAK,EAAE,YADR;AAECwD,IAAAA,SAAS,EAAE,QAFZ;AAGCsC,IAAAA,KAAK,EAAE,QAHR;AAKCC,IAAAA,OAAO,EAAE,CACR;AACCtI,MAAAA,IAAI,EAAE,WADP;AAEC0C,MAAAA,KAAK,EAAE;AAFR,KADQ,EAKR;AACC1C,MAAAA,IAAI,EAAE,eADP;AAEC0C,MAAAA,KAAK,EAAE;AAFR,KALQ,EASR;AACC1C,MAAAA,IAAI,EAAE,sBADP;AAEC0C,MAAAA,KAAK,EAAE;AAFR,KATQ,EAaR;AACC1C,MAAAA,IAAI,EAAE,qBADP;AAEC0C,MAAAA,KAAK,EAAE;AAFR,KAbQ,EAiBR;AACC1C,MAAAA,IAAI,EAAE,iBADP;AAEC0C,MAAAA,KAAK,EAAE;AAFR,KAjBQ,CALV;AA2BC6F,IAAAA,QAAQ,EAAE,CAAC7F,KAAD,EAAQ+E,MAAR,KAAmBA,MAAM,CAAC/H,MAAP,KAAkBgD,KA3BhD;AA4BCsF,IAAAA,MAAM,EAAGpG,MAAD,IAAY;AACnB,0BACC;AAAA,mBACEA,MAAM,IAAI,CAAV,iBAAe;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADjB,EAEEA,MAAM,IAAI,CAAV,iBAAe;AAAM,UAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFjB,EAGEA,MAAM,IAAI,CAAV,iBAAe;AAAM,UAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHjB,EAIEA,MAAM,IAAI,CAAV,iBAAe;AAAM,UAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJjB,EAKEA,MAAM,IAAI,CAAV,iBAAe;AAAM,UAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALjB;AAAA,sBADD;AAgBA;AA7CF,GApEe,EAmHf;AACCW,IAAAA,KAAK,EAAE,EADR;AAECyF,IAAAA,MAAM,EAAE,CAAChI,IAAD,EAAOkD,IAAP,EAAauB,KAAb,kBACP;AAAK,MAAA,OAAO,EAAGyC,CAAD,IAAOA,CAAC,CAACsB,eAAF,EAArB;AAAA,8BACC,QAAC,gBAAD;AACC,QAAA,QAAQ,EAAE,MAAMxG,WAAW,CAACyC,KAAD,CAD5B;AAEC,QAAA,KAAK,EAAEA,KAFR;AAGC,QAAA,OAAO,EAAEvB,IAHV;AAIC,QAAA,KAAK,EAAEA,IAAI,CAACW,EAJb;AAKC,QAAA,QAAQ,EAAEvD,YALX;AAMC,QAAA,SAAS,EAAEmB,SANZ;AAOC,QAAA,SAAS,EAAGyB,IAAD,IAAegC,SAAS,CAAChC,IAAD,CAPpC;AAQC,QAAA,QAAQ,EAAEvC;AARX;AAAA;AAAA;AAAA;AAAA,cADD,eAWC,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEA,QAAvB;AAAiC,QAAA,OAAO,EAAEuC,IAA1C;AAAgD,QAAA,WAAW,EAAE,MAAMd,UAAU,mBAAMD,OAAN;AAA7E;AAAA;AAAA;AAAA;AAAA,cAXD,EAYEe,IAAI,CAACxD,MAAL,IAAe,CAAf,iBAAoB,QAAC,UAAD;AAAY,QAAA,YAAY,EAAEkI,YAA1B;AAAwC,QAAA,OAAO,EAAE1E;AAAjD;AAAA;AAAA;AAAA;AAAA,cAZtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF,GAnHe,CAAhB;AAwIA,sBACC;AAAA,4BACC,QAAC,SAAD;AACC,MAAA,MAAM,EAAEnC,UADT;AAEC,MAAA,QAAQ,EAAE,MAAMC,aAAa,CAAC,KAAD,CAF9B;AAGC,MAAA,IAAI,EAAE,MAAMA,aAAa,CAAC,KAAD,CAH1B;AAIC,MAAA,OAAO,EAAC;AAJT;AAAA;AAAA;AAAA;AAAA,YADD,eAOC,QAAC,WAAD;AACC,MAAA,WAAW,EAAEiB,WADd;AAEC,MAAA,SAAS,EAAEJ,SAAS,IAAIA,SAFzB;AAGC,MAAA,aAAa,EAAG2E,UAAD,IAAwBD,aAAa,CAACC,UAAD,CAHrD;AAIC,MAAA,OAAO,EAAE/E,SAJV;AAKC,MAAA,QAAQ,EAAC,cALV;AAMC,MAAA,SAAS,EAAC,qCANX,CAOC;AACA;AACA;AACA;AACA;AACA;AACA;AAbD;AAcC,MAAA,UAAU,EAAEN,UAdb;AAeC,MAAA,OAAO,EAAE0G,OAfV;AAgBC,MAAA,KAAK,eACJ;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACC,QAAC,UAAD;AACC,UAAA,UAAU,EAAExF,UADb;AAEC,UAAA,YAAY,EAAGkD,UAAD,IAAqBD,YAAY,CAACC,UAAD,CAFhD;AAGC,UAAA,WAAW,EAAEe;AAHd;AAAA;AAAA;AAAA;AAAA,gBADD,eAMC,QAAC,OAAD;AAAS,UAAA,UAAU,EAAG5D,KAAD,IAAWgD,UAAU,CAAChD,KAAD,CAA1C;AAAmD,UAAA,UAAU,EAAE9C;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAND;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AA0BC,MAAA,UAAU,EAAE;AAAE4H,QAAAA;AAAF;AA1Bb;AAAA;AAAA;AAAA;AAAA,YAPD;AAAA,kBADD;AAsCA;AACDpH,sBAAsB,CAACqI,MAAvB,GAAgC9J,UAAhC;;AAEA,MAAM+J,UAAU,GAAIrI,KAAD,IAAW;AAC7B,QAAM;AAAEuH,IAAAA,YAAF;AAAgBe,IAAAA;AAAhB,MAA4BtI,KAAlC;AACA,QAAM;AAAA,OAACuI,cAAD;AAAA,OAAiBC;AAAjB,MAAsC/K,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAEuD,IAAAA;AAAF,MAAexC,OAAO,EAA5B;AACA,QAAM;AAAA,OAACiK,OAAD;AAAA,OAAUC;AAAV,MAAwBjL,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMkL,SAAS,GAAG,MAAM;AACvBH,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA,GAFD;;AAIA,QAAMI,QAAQ,GAAG,YAAY;AAC5B,QAAI9D,UAAU,GAAG;AAChBtB,MAAAA,EAAE,EAAE8E,OAAO,CAAC9E,EADI;AAEhBnE,MAAAA,MAAM,EAAE;AAFQ,KAAjB;AAIAqJ,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACH,UAAIjG,GAAG,GAAG,MAAM7E,eAAe,CAACmH,MAAhB,CAAuBD,UAAvB,CAAhB;;AACA,UAAIrC,GAAG,CAAClB,MAAJ,IAAc,GAAlB,EAAuB;AACtBP,QAAAA,QAAQ,CAAC,SAAD,EAAY,+BAAZ,CAAR;AACAwH,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAjB,QAAAA,YAAY,IAAIA,YAAY,EAA5B;AACA;AACD,KAPD,CAOE,OAAOrE,KAAP,EAAc;AACflC,MAAAA,QAAQ,CAAC,QAAD,EAAWkC,KAAK,CAACG,OAAjB,CAAR;AACA,KATD,SASU;AACTqF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD,GAnBD;;AAqBA,QAAMG,YAAY,GAAG,MAAM;AAC1BL,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA,GAFD;;AAIA,sBACC;AAAA,4BACC,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,6BAAf;AAAA,6BACC;AAAQ,QAAA,SAAS,EAAC,qBAAlB;AAAwC,QAAA,OAAO,EAAEG,SAAjD;AAAA,+BACC,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAMC,QAAC,KAAD;AACC,MAAA,KAAK,eACJ;AAAQ,QAAA,SAAS,EAAC,qBAAlB;AAAA,+BACC,QAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAFF;AAMC,MAAA,OAAO,EAAEJ,cANV;AAOC,MAAA,IAAI,EAAEK,QAPP;AAQC,MAAA,QAAQ,EAAEC,YARX;AASC,MAAA,aAAa,EAAE;AAAEJ,QAAAA,OAAO,EAAEA;AAAX,OAThB;AAAA,6BAWC;AAAG,QAAA,KAAK,EAAE;AAAEpB,UAAAA,UAAU,EAAE;AAAd,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXD;AAAA;AAAA;AAAA;AAAA,YAND;AAAA,kBADD;AAsBA,CAzDD","sourcesContent":["import moment from 'moment';\r\nimport router from 'next/router';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { branchApi, studentApi, testCustomerApi, examTopicApi, packageExaminerApi, teacherApi } from '~/apiBase';\r\nimport FilterBase from '~/components/Elements/FilterBase/FilterBase';\r\nimport NotiModal from '~/components/Elements/NotiModal/NotiModal';\r\nimport SortBox from '~/components/Elements/SortBox';\r\nimport ExpandTable from '~/components/ExpandTable';\r\nimport TestAddExam from '~/components/Global/Customer/Service/TestAddExam';\r\nimport TestCustomerForm from '~/components/Global/Customer/Service/TestCustomerForm';\r\nimport LayoutBase from '~/components/LayoutBase';\r\nimport FilterColumn from '~/components/Tables/FilterColumn';\r\nimport { useWrap } from '~/context/wrap';\r\nimport TestCustomerPoint from '~/components/Global/Customer/Service/TestCustomerPoint';\r\nimport ExamAppointmentPoint from '../../ExamAppointment/ExamAppointmentPoint';\r\nimport { CloseOutlined, QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { Modal, Tooltip } from 'antd';\r\nimport Link from 'next/link';\r\n\r\nlet pageIndex = 1;\r\n\r\nlet listFieldSearch = {\r\n\tpageIndex: 1,\r\n\tFullNameUnicode: null\r\n};\r\n\r\nlet listFieldFilter = {\r\n\tpageIndex: 1,\r\n\tBranchID: null, // lọc\r\n\tUserInformationID: null,\r\n\tStatus: null,\r\n\tAppointmentDate: null\r\n};\r\n\r\nconst dataOption = [\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 2,\r\n\t\t\tsortType: true\r\n\t\t},\r\n\t\ttext: 'Tên A - Z '\r\n\t},\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 2,\r\n\t\t\tsortType: false\r\n\t\t},\r\n\t\ttext: 'Tên Z - A'\r\n\t},\r\n\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 0,\r\n\t\t\tsortType: true\r\n\t\t},\r\n\t\ttext: 'Ngày hẹn A - Z'\r\n\t},\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 0,\r\n\t\t\tsortType: false\r\n\t\t},\r\n\t\ttext: 'Ngày hẹn Z - A'\r\n\t}\r\n];\r\n\r\n// -- FOR DIFFERENT VIEW --\r\ninterface optionObj {\r\n\ttitle: string;\r\n\tvalue: number;\r\n}\r\n\r\ninterface studentObj {\r\n\ttitle: string;\r\n\tvalue: number;\r\n\tcounselorsName: string;\r\n}\r\n\r\ninterface listDataForm {\r\n\tBranch: Array<optionObj>;\r\n\tStudent: Array<studentObj>;\r\n\tTeacher: Array<optionObj>;\r\n}\r\n\r\nconst listApi = [\r\n\t{\r\n\t\tapi: branchApi,\r\n\t\ttext: 'Trung tâm',\r\n\t\tname: 'Branch'\r\n\t},\r\n\t{\r\n\t\tapi: studentApi,\r\n\t\ttext: 'Học viên',\r\n\t\tname: 'Student'\r\n\t},\r\n\t{\r\n\t\tapi: teacherApi,\r\n\t\ttext: 'Giáo viên',\r\n\t\tname: 'Teacher'\r\n\t}\r\n];\r\n\r\nexport default function ServiceAppointmentTest(props) {\r\n\tconst [listDataForm, setListDataForm] = useState<listDataForm>({\r\n\t\tBranch: [],\r\n\t\tStudent: [],\r\n\t\tTeacher: []\r\n\t});\r\n\tconst [dataExam, setDataExam] = useState<IExamTopic[]>([]);\r\n\tconst [currentDay, setCurrentDate] = useState(null);\r\n\tconst [isOpenNoti, setisOpenNoti] = useState(false);\r\n\tconst [userID, setUserID] = useState(null);\r\n\r\n\t// ------ BASE USESTATE TABLE -------\r\n\tconst [dataSource, setDataSource] = useState<ITestCustomer[]>([]);\r\n\tconst { showNoti, pageSize, userInformation } = useWrap();\r\n\tconst listTodoApi = {\r\n\t\tpageSize: pageSize,\r\n\t\tpageIndex: pageIndex,\r\n\t\tsort: null,\r\n\t\tsortType: null,\r\n\t\tFullNameUnicode: null,\r\n\t\tBranchID: null, // lọc\r\n\t\tUserInformationID: null,\r\n\t\tStatus: null,\r\n\t\tAppointmentDate: null\r\n\t};\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t});\r\n\tconst [totalPage, setTotalPage] = useState(null);\r\n\tconst [indexRow, setIndexRow] = useState(null);\r\n\tconst [currentPage, setCurrentPage] = useState(1);\r\n\tconst [todoApi, setTodoApi] = useState(listTodoApi);\r\n\r\n\t// ------ LIST FILTER -------\r\n\tconst [dataFilter, setDataFilter] = useState([\r\n\t\t{\r\n\t\t\tname: 'BranchID',\r\n\t\t\ttitle: 'Trung tâm',\r\n\t\t\tcol: 'col-md-12 col-12',\r\n\t\t\ttype: 'select',\r\n\t\t\toptionList: null, // Gọi api xong trả data vào đây\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\tname: 'Status',\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\tcol: 'col-md-12 col-12',\r\n\t\t\ttype: 'select',\r\n\t\t\toptionList: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Chưa test',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Đang chấm bài test',\r\n\t\t\t\t\tvalue: 1\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Chưa đăng kí khóa học',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Đã đăng kí khóa học',\r\n\t\t\t\t\tvalue: 3\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Đã hủy hẹn test',\r\n\t\t\t\t\tvalue: 4\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'AppointmentDate',\r\n\t\t\ttitle: 'Ngày hẹn test',\r\n\t\t\tcol: 'col-md-12 col-12',\r\n\t\t\ttype: 'date-single',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'date-range',\r\n\t\t\ttitle: 'Từ - đến',\r\n\t\t\tcol: 'col-12',\r\n\t\t\ttype: 'date-range',\r\n\t\t\tvalue: null\r\n\t\t}\r\n\t]);\r\n\r\n\tconst [dataTeacher, setDataTeacher] = useState([]);\r\n\r\n\t// Get list teacher\r\n\tconst getListTeacher = async () => {\r\n\t\t// setLoadingTeacher(true);\r\n\t\ttry {\r\n\t\t\tlet res = await packageExaminerApi.getAll({\r\n\t\t\t\tselectAll: true\r\n\t\t\t});\r\n\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tlet newData = res.data.data.map((item) => ({\r\n\t\t\t\t\ttitle: item.TeacherName,\r\n\t\t\t\t\tvalue: item.TeacherID\r\n\t\t\t\t}));\r\n\t\t\t\tsetDataTeacher(newData);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Error Get List Teacher: ', error.message);\r\n\t\t} finally {\r\n\t\t\t// setLoadingTeacher(true);\r\n\t\t}\r\n\t};\r\n\r\n\tconst makeNewData = (data, name) => {\r\n\t\tlet newData = null;\r\n\t\tswitch (name) {\r\n\t\t\tcase 'Branch':\r\n\t\t\t\tnewData = data.map((item) => ({\r\n\t\t\t\t\ttitle: item.BranchName,\r\n\t\t\t\t\tvalue: item.ID\r\n\t\t\t\t}));\r\n\t\t\t\tsetDataFunc('BranchID', newData);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'Student':\r\n\t\t\t\tnewData = data.map((item) => ({\r\n\t\t\t\t\ttitle: item.FullNameUnicode,\r\n\t\t\t\t\tvalue: item.UserInformationID,\r\n\t\t\t\t\tcounselorsName: item.CounselorsName == null ? '' : item.CounselorsName\r\n\t\t\t\t}));\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Teacher':\r\n\t\t\t\tnewData = data.map((item) => ({\r\n\t\t\t\t\ttitle: item.FullNameUnicode,\r\n\t\t\t\t\tvalue: item.UserInformationID\r\n\t\t\t\t}));\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn newData;\r\n\t};\r\n\r\n\tconst getDataTolist = (data: any, name: any) => {\r\n\t\tlet newData = makeNewData(data, name);\r\n\r\n\t\tObject.keys(listDataForm).forEach(function (key) {\r\n\t\t\tif (key == name) {\r\n\t\t\t\tlistDataForm[key] = newData;\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetListDataForm({ ...listDataForm });\r\n\t};\r\n\r\n\t// ----------- GET DATA EXAM ------------\r\n\tconst getDataExam = async () => {\r\n\t\ttry {\r\n\t\t\tlet res = await examTopicApi.getAll({\r\n\t\t\t\tselectAll: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t});\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetDataExam(res.data.data);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Error Exam: ', error.message);\r\n\t\t}\r\n\t};\r\n\r\n\t// ----------- GET DATA SOURCE ---------------\r\n\tconst getDataAll = (arrApi) => {\r\n\t\tarrApi.forEach((item, index) => {\r\n\t\t\t(async () => {\r\n\t\t\t\tlet res = null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (item.name == 'Counselors') {\r\n\t\t\t\t\t\tres = await item.api.getAll({\r\n\t\t\t\t\t\t\tpageIndex: 1,\r\n\t\t\t\t\t\t\tpageSize: 99999,\r\n\t\t\t\t\t\t\tRoleID: 6,\r\n\t\t\t\t\t\t\tStatusID: 0,\r\n\t\t\t\t\t\t\tEnable: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres = await item.api.getAll({\r\n\t\t\t\t\t\t\tpageIndex: 1,\r\n\t\t\t\t\t\t\tpageSize: 99999,\r\n\t\t\t\t\t\t\tEnable: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tres.status == 200 && getDataTolist(res.data.data, item.name);\r\n\r\n\t\t\t\t\tres.status == 204 && console.log(item.text + ' Không có dữ liệu');\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\t// showNoti('danger', error.message);\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t} finally {\r\n\t\t\t\t}\r\n\t\t\t})();\r\n\t\t});\r\n\t};\r\n\r\n\t// GET DATA SOURCE\r\n\tconst getDataSource = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await testCustomerApi.getAll(todoApi);\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tsetDataSource(res.data.data);\r\n\t\t\t\tsetTotalPage(res.data.totalRow);\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\t// setTestDate(moment(res.data.data.AppointmentDate).format('DD/MM/YYYY HH:mm'));\r\n\t\t\t}\r\n\t\t\tres.status == 204 && setDataSource([]);\r\n\t\t} catch (error) {\r\n\t\t\terror.status == 500 ? showNoti('danger', 'Đường truyền mạng không ổn định') : showNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// ------ SET DATA FUN ------\r\n\tconst setDataFunc = (name, data) => {\r\n\t\tdataFilter.every((item, index) => {\r\n\t\t\tif (item.name == name) {\r\n\t\t\t\titem.optionList = data;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\tsetDataFilter([...dataFilter]);\r\n\t};\r\n\r\n\t// ---------------- AFTER SUBMIT -----------------\r\n\tconst afterPost = (mes) => {\r\n\t\t// showNoti(\"success\", mes);\r\n\t\tsetTodoApi({\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1\r\n\t\t});\r\n\t\tsetCurrentPage(1);\r\n\t};\r\n\r\n\t// ----------------- ON SUBMIT --------------------\r\n\tconst _onSubmit = async (dataSubmit: any) => {\r\n\t\t// console.log('Data submit: ', dataSubmit);\r\n\t\t// console.log('List data form: ', listDataForm);\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\r\n\t\tlet res = null;\r\n\r\n\t\ttry {\r\n\t\t\tif (dataSubmit.ID) {\r\n\t\t\t\tres = await testCustomerApi.update(dataSubmit);\r\n\r\n\t\t\t\tif (res.status == 200) {\r\n\t\t\t\t\t// let newDataSource = [...dataSource];\r\n\t\t\t\t\t// newDataSource.splice(indexRow, 1, {\r\n\t\t\t\t\t// \t...dataSubmit,\r\n\t\t\t\t\t// \tFullNameUnicode: listDataForm.Student.find((item) => item.value == dataSubmit.UserInformationID).title,\r\n\t\t\t\t\t// \tBranchName: listDataForm.Branch.find((item) => item.value == dataSubmit.BranchID).title,\r\n\t\t\t\t\t// \tTeacherName: listDataForm.Teacher.find((item) => item.value == dataSubmit.TeacherID).title\r\n\t\t\t\t\t// });\r\n\t\t\t\t\t// setDataSource(newDataSource);\r\n\t\t\t\t\tsetTodoApi({ ...todoApi });\r\n\t\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tres = await testCustomerApi.add(dataSubmit);\r\n\t\t\t\tres?.status == 200 && afterPost(res.data.message);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('error: ', error);\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t};\r\n\r\n\t// -------------- HANDLE FILTER ------------------\r\n\tconst handleFilter = (listFilter) => {\r\n\t\tlet newListFilter = { ...listFieldFilter };\r\n\t\tlistFilter.forEach((item, index) => {\r\n\t\t\tlet key = item.name;\r\n\t\t\tObject.keys(newListFilter).forEach((keyFilter) => {\r\n\t\t\t\tif (keyFilter == key) {\r\n\t\t\t\t\tnewListFilter[key] = item.value;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\tsetTodoApi({ ...listTodoApi, ...newListFilter, pageIndex: 1 });\r\n\t};\r\n\r\n\t// --------------- HANDLE SORT ----------------------\r\n\tconst handleSort = async (option) => {\r\n\t\tlet newTodoApi = {\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1,\r\n\t\t\tsort: option.title.sort,\r\n\t\t\tsortType: option.title.sortType\r\n\t\t};\r\n\t\tsetCurrentPage(1), setTodoApi(newTodoApi);\r\n\t};\r\n\r\n\t// ------------ ON SEARCH -----------------------\r\n\r\n\tconst checkField = (valueSearch, dataIndex) => {\r\n\t\tlet newList = { ...listFieldSearch };\r\n\t\tObject.keys(newList).forEach(function (key) {\r\n\t\t\tif (key != dataIndex) {\r\n\t\t\t\tif (key != 'pageIndex') {\r\n\t\t\t\t\tnewList[key] = null;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnewList[key] = valueSearch;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn newList;\r\n\t};\r\n\r\n\tconst onSearch = (valueSearch, dataIndex) => {\r\n\t\tlet clearKey =\r\n\t\t\tdataIndex == 'FullNameUnicode'\r\n\t\t\t\t? { FullNameUnicode: valueSearch }\r\n\t\t\t\t: dataIndex == 'Mobile'\r\n\t\t\t\t? { Mobile: valueSearch }\r\n\t\t\t\t: { Email: valueSearch };\r\n\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t...clearKey\r\n\t\t});\r\n\t};\r\n\r\n\t// HANDLE RESET\r\n\tconst resetListFieldSearch = () => {\r\n\t\tObject.keys(listFieldSearch).forEach(function (key) {\r\n\t\t\tif (key != 'pageIndex') {\r\n\t\t\t\tlistFieldSearch[key] = null;\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetTodoApi({\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1\r\n\t\t});\r\n\t\tsetCurrentPage(1), resetListFieldSearch();\r\n\t};\r\n\r\n\t// -------------- GET PAGE_NUMBER -----------------\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tpageIndex = pageNumber;\r\n\t\tsetCurrentPage(pageNumber);\r\n\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t// ...listFieldSearch,\r\n\t\t\tpageIndex: pageIndex\r\n\t\t});\r\n\t};\r\n\r\n\t// ============== USE EFFECT - FETCH DATA ===================\r\n\tuseEffect(() => {\r\n\t\tgetDataSource();\r\n\t}, [todoApi]);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetDataAll(listApi);\r\n\t\tgetDataExam();\r\n\r\n\t\t// Get current date\r\n\t\tlet currentdate = new Date();\r\n\t\tlet datetime =\r\n\t\t\tcurrentdate.getDate() +\r\n\t\t\t'/' +\r\n\t\t\t(currentdate.getMonth() + 1) +\r\n\t\t\t'/' +\r\n\t\t\tcurrentdate.getFullYear() +\r\n\t\t\t' ' +\r\n\t\t\tcurrentdate.getHours() +\r\n\t\t\t':' +\r\n\t\t\tcurrentdate.getMinutes();\r\n\r\n\t\tsetCurrentDate(datetime);\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (userInformation) {\r\n\t\t\tsetUserID(userInformation.UserInformationID);\r\n\t\t}\r\n\t}, [userInformation]);\r\n\r\n\tconst moveToTest = (e, data) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tlet testDate = moment(data.AppointmentDate).format('DD/MM/YYYY') + ' ' + data.Time;\r\n\t\tconsole.log('Test DAte: ', testDate);\r\n\t\tif (currentDay < testDate) {\r\n\t\t\tsetisOpenNoti(true);\r\n\t\t} else {\r\n\t\t\trouter.push('');\r\n\t\t}\r\n\t};\r\n\r\n\tconst expandedRowRender = (record) => {\r\n\t\t// return record.Note ? record.Note : \"Không có ghi chú\";\r\n\t\t// return (\r\n\t\t// \t<>\r\n\t\t// \t\t<div className=\"box-note mt-2\">\r\n\t\t// \t\t\t<h6 className=\"d-block text-underline\">Ghi chú:</h6>\r\n\t\t// \t\t\t<p>{record.Note}</p>\r\n\t\t// \t\t</div>\r\n\t\t// \t\t<TestCustomerPoint ID={record.ID} />\r\n\t\t// \t</>\r\n\t\t// );\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<p style={{ fontWeight: 500 }} className=\"mt-3 mb-2\">\r\n\t\t\t\t\tGhi chú\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>{record.Note}</p>\r\n\t\t\t\t<ExamAppointmentPoint infoID={record.ID} userID={record.UserInformationID} />\r\n\t\t\t</>\r\n\t\t);\r\n\t};\r\n\r\n\tconst onUpdateData = () => {\r\n\t\tsetTodoApi({ ...todoApi });\r\n\t};\r\n\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\twidth: 200,\r\n\t\t\ttitle: 'Học viên',\r\n\t\t\tdataIndex: 'FullNameUnicode',\r\n\t\t\tfixed: 'left',\r\n\t\t\trender: (a) => <p className=\"font-weight-primary\">{a}</p>,\r\n\t\t\t...FilterColumn('FullNameUnicode', onSearch, handleReset, 'text')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Email',\r\n\t\t\tdataIndex: 'Email',\r\n\t\t\tfixed: 'left',\r\n\t\t\trender: (a) => <p className=\"font-weight-primary\">{a}</p>,\r\n\t\t\t...FilterColumn('Email', onSearch, handleReset, 'text')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'SDT',\r\n\t\t\tdataIndex: 'Mobile',\r\n\t\t\tfixed: 'left',\r\n\t\t\trender: (a) => <p className=\"font-weight-primary\">{a}</p>,\r\n\t\t\t...FilterColumn('Mobile', onSearch, handleReset, 'text')\r\n\t\t},\r\n\t\t{\r\n\t\t\twidth: 170,\r\n\t\t\ttitle: 'Trung tâm',\r\n\t\t\tdataIndex: 'BranchName',\r\n\r\n\t\t\trender: (a) => <p className=\"font-weight-black\">{a}</p>\r\n\t\t},\r\n\t\t{\r\n\t\t\twidth: 170,\r\n\t\t\ttitle: 'Đề test',\r\n\t\t\tdataIndex: 'ExamTopicnName',\r\n\t\t\trender: (text, data: any) => (\r\n\t\t\t\t<Link\r\n\t\t\t\t\thref={{\r\n\t\t\t\t\t\tpathname: `/question-bank/exam-list/exam-detail/${data.ExamTopicID}`\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<a href=\"\" className=\"font-weight-link\">\r\n\t\t\t\t\t\t{text}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</Link>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Ngày hẹn',\r\n\t\t\tdataIndex: 'AppointmentDate',\r\n\t\t\trender: (date: any) => moment(date).format('DD/MM/YYYY')\r\n\t\t},\r\n\t\t{\r\n\t\t\twidth: 100,\r\n\t\t\ttitle: 'Giờ hẹn',\r\n\t\t\tdataIndex: 'Time',\r\n\t\t\talign: 'center'\r\n\t\t},\r\n\t\t{\r\n\t\t\twidth: 170,\r\n\t\t\ttitle: 'Giáo viên chấm bài',\r\n\t\t\tdataIndex: 'TeacherName'\r\n\t\t},\r\n\t\t{\r\n\t\t\twidth: 190,\r\n\t\t\ttitle: 'Tư vấn viên',\r\n\t\t\tdataIndex: 'CounselorsName'\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\tdataIndex: 'Status',\r\n\t\t\talign: 'center',\r\n\r\n\t\t\tfilters: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Chưa test',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Đang chấm bài',\r\n\t\t\t\t\tvalue: 1\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Chờ đăng kí khóa học',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Đã đăng kí khóa học',\r\n\t\t\t\t\tvalue: 3\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Đã hủy hẹn test',\r\n\t\t\t\t\tvalue: 4\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tonFilter: (value, record) => record.Status === value,\r\n\t\t\trender: (status) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t{status == 0 && <span className=\"tag red\">Chưa test</span>}\r\n\t\t\t\t\t\t{status == 1 && <span className=\"tag blue\">Đang chấm bài</span>}\r\n\t\t\t\t\t\t{status == 2 && <span className=\"tag yellow\">Chờ đăng kí khóa học</span>}\r\n\t\t\t\t\t\t{status == 3 && <span className=\"tag green\">Đã đăng kí </span>}\r\n\t\t\t\t\t\t{status == 4 && <span className=\"tag gray\">Đã hủy hẹn test</span>}\r\n\t\t\t\t\t\t{/* {apmReg == 1 ? (\r\n              <span className=\"tag blue\">Chưa đăng kí khóa học</span>\r\n            ) : apmReg == 2 ? (\r\n              <span className=\"tag green\">Đã đăng kí khóa học</span>\r\n            ) : (\r\n              <span className=\"tag red\">Chưa test</span>\r\n            )} */}\r\n\t\t\t\t\t</>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: '',\r\n\t\t\trender: (text, data, index) => (\r\n\t\t\t\t<div onClick={(e) => e.stopPropagation()}>\r\n\t\t\t\t\t<TestCustomerForm\r\n\t\t\t\t\t\tgetIndex={() => setIndexRow(index)}\r\n\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\trowData={data}\r\n\t\t\t\t\t\trowID={data.ID}\r\n\t\t\t\t\t\tlistData={listDataForm}\r\n\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t_onSubmit={(data: any) => _onSubmit(data)}\r\n\t\t\t\t\t\tdataExam={dataExam}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<TestAddExam dataExam={dataExam} dataRow={data} onFetchData={() => setTodoApi({ ...todoApi })} />\r\n\t\t\t\t\t{data.Status == 0 && <CancelTest onUpdateData={onUpdateData} dataRow={data} />}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<NotiModal\r\n\t\t\t\tisOpen={isOpenNoti}\r\n\t\t\t\tisCancel={() => setisOpenNoti(false)}\r\n\t\t\t\tisOk={() => setisOpenNoti(false)}\r\n\t\t\t\tcontent=\"Chưa đến giờ làm đề test\"\r\n\t\t\t/>\r\n\t\t\t<ExpandTable\r\n\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\ttotalPage={totalPage && totalPage}\r\n\t\t\t\tgetPagination={(pageNumber: number) => getPagination(pageNumber)}\r\n\t\t\t\tloading={isLoading}\r\n\t\t\t\taddClass=\"basic-header\"\r\n\t\t\t\tTitlePage=\"Danh sách KHÁCH HẸN TEST\"\r\n\t\t\t\t// TitleCard={\r\n\t\t\t\t//   <StudentAdviseForm\r\n\t\t\t\t//     listData={listDataForm}\r\n\t\t\t\t//     isLoading={isLoading}\r\n\t\t\t\t//     _onSubmit={(data: any) => _onSubmit(data)}\r\n\t\t\t\t//   />\r\n\t\t\t\t// }\r\n\t\t\t\tdataSource={dataSource}\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tExtra={\r\n\t\t\t\t\t<div className=\"extra-table\">\r\n\t\t\t\t\t\t<FilterBase\r\n\t\t\t\t\t\t\tdataFilter={dataFilter}\r\n\t\t\t\t\t\t\thandleFilter={(listFilter: any) => handleFilter(listFilter)}\r\n\t\t\t\t\t\t\thandleReset={handleReset}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<SortBox handleSort={(value) => handleSort(value)} dataOption={dataOption} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\texpandable={{ expandedRowRender }}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n}\r\nServiceAppointmentTest.layout = LayoutBase;\r\n\r\nconst CancelTest = (props) => {\r\n\tconst { onUpdateData, dataRow } = props;\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst { showNoti } = useWrap();\r\n\tconst [loading, setLoading] = useState(false);\r\n\r\n\tconst showModal = () => {\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst handleOk = async () => {\r\n\t\tlet dataSubmit = {\r\n\t\t\tID: dataRow.ID,\r\n\t\t\tStatus: 4\r\n\t\t};\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await testCustomerApi.update(dataSubmit);\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tshowNoti('success', 'Hủy lịch hẹn test thành công!');\r\n\t\t\t\tsetIsModalVisible(false);\r\n\t\t\t\tonUpdateData && onUpdateData();\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleCancel = () => {\r\n\t\tsetIsModalVisible(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Tooltip title=\"Hủy lịch hẹn\">\r\n\t\t\t\t<button className=\"btn btn-icon delete\" onClick={showModal}>\r\n\t\t\t\t\t<CloseOutlined />\r\n\t\t\t\t</button>\r\n\t\t\t</Tooltip>\r\n\t\t\t<Modal\r\n\t\t\t\ttitle={\r\n\t\t\t\t\t<button className=\"btn btn-icon delete\">\r\n\t\t\t\t\t\t<QuestionCircleOutlined />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t}\r\n\t\t\t\tvisible={isModalVisible}\r\n\t\t\t\tonOk={handleOk}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{ loading: loading }}\r\n\t\t\t>\r\n\t\t\t\t<p style={{ fontWeight: 500 }}>Bạn muốn hủy lịch hẹn test của học viên này?</p>\r\n\t\t\t</Modal>\r\n\t\t</>\r\n\t);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}