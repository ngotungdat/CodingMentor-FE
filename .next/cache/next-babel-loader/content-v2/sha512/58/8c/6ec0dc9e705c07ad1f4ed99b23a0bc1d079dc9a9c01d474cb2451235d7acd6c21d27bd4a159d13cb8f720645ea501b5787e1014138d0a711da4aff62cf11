{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\QuestionBank\\\\QuestionFormType\\\\WrittingForm.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Form } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { exerciseApi } from '~/apiBase/';\nimport EditorSimple from '~/components/Elements/EditorSimple';\nimport { useWrap } from '~/context/wrap';\nlet AnsID = 0;\n\nconst WrittingForm = props => {\n  const {\n    isSubmit,\n    questionData,\n    changeIsSubmit,\n    visible,\n    changeData\n  } = props;\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    reset,\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: {\n      isSubmitting,\n      errors,\n      isSubmitted\n    }\n  } = useForm();\n  const [form] = Form.useForm();\n  const {\n    0: questionDataForm,\n    1: setQuestionDataForm\n  } = useState(null);\n  const {\n    0: isResetEditor,\n    1: setIsResetEditor\n  } = useState(false);\n  const {\n    0: answerList,\n    1: setAnswerList\n  } = useState(questionData.ExerciseAnswer);\n  const {\n    0: loadAtFirst,\n    1: setLoadAtFirst\n  } = useState(true); // SUBMI FORM\n\n  const onSubmit = handleSubmit((data, e) => {\n    console.log('DATA SUBMIT: ', data);\n  }); // GET VALUE IN EDITOR\n\n  const getDataEditor = dataEditor => {\n    if (questionDataForm) {\n      questionDataForm.Content = dataEditor;\n    }\n\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // Reset value in form\n\n\n  const resetForm = () => {\n    questionDataForm.Content = '';\n    questionDataForm.ExerciseAnswer = [];\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // SUBMIT FORM\n\n\n  const handleSubmitQuestion = async () => {\n    let res = null;\n\n    try {\n      if (questionDataForm.ID) {\n        let cloneData = JSON.parse(JSON.stringify(questionDataForm));\n        cloneData.ExerciseAnswer.forEach((item, index) => {\n          if (item.isAdd) {\n            delete item.ID;\n          }\n        });\n        res = await exerciseApi.update(cloneData);\n      } else {\n        res = await exerciseApi.add(questionDataForm);\n      }\n\n      if (res.status == 200) {\n        changeIsSubmit(questionDataForm.ID ? questionDataForm : res.data.data);\n        showNoti('success', `${questionDataForm.ID ? 'Cập nhật' : 'Thêm'} Thành công`);\n\n        if (!questionDataForm.ID) {\n          resetForm();\n        }\n\n        setIsResetEditor(true);\n        setTimeout(() => {\n          setIsResetEditor(false);\n        }, 500);\n      }\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    isSubmit && handleSubmitQuestion();\n  }, [isSubmit]);\n  useEffect(() => {\n    if (visible) {\n      if (!questionData.ID) {\n        questionData.Content = '';\n      }\n\n      setQuestionDataForm(_objectSpread({}, questionData));\n    } else {\n      setQuestionDataForm(null);\n      setLoadAtFirst(true);\n    }\n  }, [visible]);\n  useEffect(() => {\n    if (questionDataForm) {\n      if (!loadAtFirst) {\n        changeData && changeData();\n      }\n\n      setLoadAtFirst(false);\n    }\n  }, [questionDataForm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-create-question\",\n    children: visible && questionDataForm && /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      layout: \"vertical\",\n      onFinish: onSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"Question\",\n              label: \"C\\xE2u h\\u1ECFi\",\n              children: /*#__PURE__*/_jsxDEV(EditorSimple, {\n                isTranslate: true,\n                handleChange: value => getDataEditor(value),\n                isReset: isResetEditor,\n                questionContent: questionDataForm === null || questionDataForm === void 0 ? void 0 : questionDataForm.Content,\n                questionData: questionDataForm\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 3\n  }, this);\n};\n\nexport default WrittingForm;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/QuestionBank/QuestionFormType/WrittingForm.tsx"],"names":["Form","React","useEffect","useState","useForm","exerciseApi","EditorSimple","useWrap","AnsID","WrittingForm","props","isSubmit","questionData","changeIsSubmit","visible","changeData","showNoti","reset","register","handleSubmit","control","setValue","formState","isSubmitting","errors","isSubmitted","form","questionDataForm","setQuestionDataForm","isResetEditor","setIsResetEditor","answerList","setAnswerList","ExerciseAnswer","loadAtFirst","setLoadAtFirst","onSubmit","data","e","console","log","getDataEditor","dataEditor","Content","resetForm","handleSubmitQuestion","res","ID","cloneData","JSON","parse","stringify","forEach","item","index","isAdd","update","add","status","setTimeout","error","value"],"mappings":"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","sourcesContent":["import { Form } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { exerciseApi } from '~/apiBase/'\r\nimport EditorSimple from '~/components/Elements/EditorSimple'\r\nimport { useWrap } from '~/context/wrap'\r\n\r\nlet AnsID = 0\r\n\r\nconst WrittingForm = (props) => {\r\n\tconst { isSubmit, questionData, changeIsSubmit, visible, changeData } = props\r\n\tconst { showNoti } = useWrap()\r\n\tconst {\r\n\t\treset,\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\tcontrol,\r\n\t\tsetValue,\r\n\t\tformState: { isSubmitting, errors, isSubmitted }\r\n\t} = useForm()\r\n\tconst [form] = Form.useForm()\r\n\tconst [questionDataForm, setQuestionDataForm] = useState(null)\r\n\tconst [isResetEditor, setIsResetEditor] = useState(false)\r\n\tconst [answerList, setAnswerList] = useState(questionData.ExerciseAnswer)\r\n\tconst [loadAtFirst, setLoadAtFirst] = useState(true)\r\n\r\n\t// SUBMI FORM\r\n\tconst onSubmit = handleSubmit((data: any, e) => {\r\n\t\tconsole.log('DATA SUBMIT: ', data)\r\n\t})\r\n\r\n\t// GET VALUE IN EDITOR\r\n\tconst getDataEditor = (dataEditor) => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tquestionDataForm.Content = dataEditor\r\n\t\t}\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// Reset value in form\r\n\tconst resetForm = () => {\r\n\t\tquestionDataForm.Content = ''\r\n\t\tquestionDataForm.ExerciseAnswer = []\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// SUBMIT FORM\r\n\tconst handleSubmitQuestion = async () => {\r\n\t\tlet res = null\r\n\r\n\t\ttry {\r\n\t\t\tif (questionDataForm.ID) {\r\n\t\t\t\tlet cloneData = JSON.parse(JSON.stringify(questionDataForm))\r\n\r\n\t\t\t\tcloneData.ExerciseAnswer.forEach((item, index) => {\r\n\t\t\t\t\tif (item.isAdd) {\r\n\t\t\t\t\t\tdelete item.ID\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tres = await exerciseApi.update(cloneData)\r\n\t\t\t} else {\r\n\t\t\t\tres = await exerciseApi.add(questionDataForm)\r\n\t\t\t}\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tchangeIsSubmit(questionDataForm.ID ? questionDataForm : res.data.data)\r\n\t\t\t\tshowNoti('success', `${questionDataForm.ID ? 'Cập nhật' : 'Thêm'} Thành công`)\r\n\t\t\t\tif (!questionDataForm.ID) {\r\n\t\t\t\t\tresetForm()\r\n\t\t\t\t}\r\n\t\t\t\tsetIsResetEditor(true)\r\n\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tsetIsResetEditor(false)\r\n\t\t\t\t}, 500)\r\n\t\t\t}\r\n\t\t} catch (error) {}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tisSubmit && handleSubmitQuestion()\r\n\t}, [isSubmit])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (visible) {\r\n\t\t\tif (!questionData.ID) {\r\n\t\t\t\tquestionData.Content = ''\r\n\t\t\t}\r\n\t\t\tsetQuestionDataForm({ ...questionData })\r\n\t\t} else {\r\n\t\t\tsetQuestionDataForm(null)\r\n\t\t\tsetLoadAtFirst(true)\r\n\t\t}\r\n\t}, [visible])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tif (!loadAtFirst) {\r\n\t\t\t\tchangeData && changeData()\r\n\t\t\t}\r\n\t\t\tsetLoadAtFirst(false)\r\n\t\t}\r\n\t}, [questionDataForm])\r\n\r\n\treturn (\r\n\t\t<div className=\"form-create-question\">\r\n\t\t\t{visible && questionDataForm && (\r\n\t\t\t\t<Form form={form} layout=\"vertical\" onFinish={onSubmit}>\r\n\t\t\t\t\t<div className=\"container-fluid\">\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<Form.Item name=\"Question\" label=\"Câu hỏi\">\r\n\t\t\t\t\t\t\t\t\t<EditorSimple\r\n\t\t\t\t\t\t\t\t\t\tisTranslate={true}\r\n\t\t\t\t\t\t\t\t\t\thandleChange={(value) => getDataEditor(value)}\r\n\t\t\t\t\t\t\t\t\t\tisReset={isResetEditor}\r\n\t\t\t\t\t\t\t\t\t\tquestionContent={questionDataForm?.Content}\r\n\t\t\t\t\t\t\t\t\t\tquestionData={questionDataForm}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t{/* <div className=\"col-12\">\r\n                <Form.Item label=\"File nghe\">\r\n                  <UploadAudio\r\n                    getFile={(file) => {\r\n                      questionDataForm.LinkAudio = file;\r\n                      setQuestionDataForm({ ...questionDataForm });\r\n                    }}\r\n                    valueFile={questionDataForm?.LinkAudio}\r\n                  />\r\n                </Form.Item>\r\n              </div> */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Form>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default WrittingForm\r\n"]},"metadata":{},"sourceType":"module"}