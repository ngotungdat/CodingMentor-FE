{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\StaffList\\\\ManageTask\\\\ManageTask.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport { useEffect, useRef, useState } from 'react';\nimport { staffOfTaskGroupApi, taskApi, taskGroupApi, userInformationApi } from '~/apiBase';\nimport DeleteTableRow from '~/components/Elements/DeleteTableRow/DeleteTableRow';\nimport SortBox from '~/components/Elements/SortBox';\nimport LayoutBase from '~/components/LayoutBase';\nimport PowerTable from '~/components/PowerTable';\nimport FilterColumn from '~/components/Tables/FilterColumn';\nimport { useDebounce } from '~/context/useDebounce';\nimport { useWrap } from '~/context/wrap';\nimport { fmSelectArr, mathRound } from '~/utils/functions';\nimport StaffOfTaskGroupForm from './StaffOfTaskGroup/StaffOfTaskGroupForm';\nimport TaskForm from './Task/TaskForm';\nimport TaskGroupFilterDate from './TaskGroup/TaskGroupFilterDate';\nimport TaskGroupForm from './TaskGroup/TaskGroupForm';\n\nconst ManageTask = () => {\n  // ----------STATE----------\n  const {\n    0: taskGroupList,\n    1: setTaskGroupList\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    showNoti,\n    userInformation,\n    pageSize\n  } = useWrap();\n  const {\n    0: optionStaffList,\n    1: setOptionStaffList\n  } = useState([]);\n  const {\n    0: staffOfTaskGroup,\n    1: setStaffOfTaskGroup\n  } = useState([]);\n  const {\n    0: taskList,\n    1: setTaskList\n  } = useState([]);\n  const {\n    0: optionTaskList,\n    1: setOptionTaskList\n  } = useState([]);\n  const {\n    0: activeColumnSearch,\n    1: setActiveColumnSearch\n  } = useState(''); // FILTER\n\n  const listFieldInit = {\n    pageIndex: 1,\n    pageSize: pageSize,\n    sort: -1,\n    sortType: false,\n    DoneTaskGroup: '',\n    TaskGroupName: '',\n    fromDate: '',\n    toDate: ''\n  };\n  let refValue = useRef({\n    pageIndex: 1,\n    pageSize: 10,\n    sort: -1,\n    sortType: false\n  });\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(listFieldInit); // ----------TASK GROUP----------\n  // SORT OPTION\n\n  const sortOptionList = [{\n    dataSort: {\n      sort: 0,\n      sortType: true\n    },\n    value: 1,\n    text: 'Tên tăng dần'\n  }, {\n    dataSort: {\n      sort: 0,\n      sortType: false\n    },\n    value: 2,\n    text: 'Tên giảm dần'\n  }, {\n    dataSort: {\n      sort: 1,\n      sortType: true\n    },\n    value: 1,\n    text: 'Thời hạn tăng dần'\n  }, {\n    dataSort: {\n      sort: 1,\n      sortType: false\n    },\n    value: 2,\n    text: 'Thời hạn giảm dần'\n  }, {\n    dataSort: {\n      sort: 2,\n      sortType: true\n    },\n    value: 3,\n    text: 'Tiến độ tăng dần'\n  }, {\n    dataSort: {\n      sort: 2,\n      sortType: false\n    },\n    value: 4,\n    text: 'Tiến độ giảm dần'\n  }]; // 1: ADMIN - 5: MANAGER\n\n  const checkAuthorization = StaffID => {\n    if (!userInformation) return;\n    const role = userInformation['RoleID'];\n    const uid = userInformation.UserInformationID;\n\n    if (role === 1 || role === 5 || +StaffID === +uid) {\n      return 'Accept';\n    }\n\n    return 'Ignore';\n  }; // FILTER\n\n\n  const onFilter = arr => {\n    setFilters(_objectSpread(_objectSpread(_objectSpread({}, listFieldInit), refValue.current), {}, {\n      pageIndex: 1,\n      fromDate: arr[0],\n      toDate: arr[1]\n    }));\n  }; // PAGINATION\n\n\n  const getPagination = (pageIndex, pageSize) => {\n    if (!pageSize) pageSize = 10;\n    refValue.current = _objectSpread(_objectSpread({}, refValue.current), {}, {\n      pageSize,\n      pageIndex\n    });\n    setFilters(_objectSpread(_objectSpread({}, filters), refValue.current));\n  }; // SORT\n\n\n  const onSort = option => {\n    refValue.current = _objectSpread(_objectSpread({}, refValue.current), {}, {\n      sort: option.title.sort,\n      sortType: option.title.sortType\n    });\n    setFilters(_objectSpread(_objectSpread({}, listFieldInit), refValue.current));\n  }; // RESET SEARCH\n\n\n  const onResetSearch = () => {\n    setActiveColumnSearch('');\n    setFilters(_objectSpread(_objectSpread({}, listFieldInit), {}, {\n      pageSize: refValue.current.pageSize\n    }));\n  }; // ACTION SEARCH\n\n\n  const onSearch = (valueSearch, dataIndex) => {\n    setActiveColumnSearch(dataIndex);\n    setFilters(_objectSpread(_objectSpread(_objectSpread({}, listFieldInit), refValue.current), {}, {\n      pageIndex: 1,\n      [dataIndex]: valueSearch\n    }));\n  }; // CREATE\n\n\n  const onCreateTaskGroup = async data => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      res = await taskGroupApi.add(data);\n\n      if (res.status === 200) {\n        showNoti('success', res.data.message);\n        onResetSearch(); // <== khi tạo xong r reset search để trở về trang đầu tiên\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  }; // UPDATE\n\n\n  const onUpdateTaskGroup = async (newObj, idx) => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      const {\n        ID,\n        TaskGroupName,\n        Note,\n        Deadline,\n        Enable\n      } = newObj;\n      const newTaskGroup = {\n        ID,\n        TaskGroupName,\n        Note,\n        Deadline,\n        Enable\n      };\n      res = await taskGroupApi.update(newTaskGroup);\n\n      if (res.status === 200) {\n        const newTaskGroupList = [...taskGroupList];\n        newTaskGroupList.splice(idx, 1, _objectSpread({}, newObj));\n        setTaskGroupList(newTaskGroupList);\n        showNoti('success', res.data.message);\n      }\n\n      if (res.status === 204) {\n        setTaskGroupList([]);\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n      return res;\n    }\n  }; // DELETE\n\n\n  const onDeleteTaskGroup = idx => {\n    return async () => {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: true\n      });\n\n      try {\n        const delObj = taskGroupList[idx];\n        const {\n          ID,\n          TaskGroupName,\n          Note,\n          Deadline\n        } = delObj;\n        const newDelObj = {\n          ID,\n          TaskGroupName,\n          Note,\n          Deadline,\n          Enable: false\n        };\n        const res = await taskGroupApi.delete(newDelObj);\n        res.status === 200 && showNoti('success', res.data.message);\n\n        if (taskGroupList.length === 1) {\n          filters.pageIndex === 1 ? (setFilters(_objectSpread(_objectSpread(_objectSpread({}, listFieldInit), refValue.current), {}, {\n            pageIndex: 1\n          })), setTaskGroupList([])) : setFilters(_objectSpread(_objectSpread(_objectSpread({}, filters), refValue.current), {}, {\n            pageIndex: filters.pageIndex - 1\n          }));\n          return;\n        }\n\n        fetchGroupTask();\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'GET_ALL',\n          status: false\n        });\n      }\n    };\n  };\n\n  const fetchGroupTask = async () => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      if (!userInformation) return; // ADMIN: 1 - MANAGER 5: SEE ALL TASK GROUP\n      // OTHERWISE: MUST HAVE ID IN STAFF OF TASK GROUP\n\n      if (userInformation['RoleID'] === 1 || userInformation['RoleID'] === 5) {\n        let res = await taskGroupApi.getAll(filters);\n\n        if (res.status === 200) {\n          if (res.data.totalRow && res.data.data.length) {\n            setTaskGroupList(res.data.data);\n            setTotalPage(res.data.totalRow);\n          }\n        }\n\n        if (res.status === 204) {\n          showNoti('danger', 'Không tìm thấy');\n        }\n      } else {\n        const StaffID = userInformation.UserInformationID;\n        const [taskGroupRes, staffOfTaskGroupRes] = await Promise.all([taskGroupApi.getAll(filters), staffOfTaskGroupApi.getAll({\n          StaffID\n        })]);\n\n        if (taskGroupRes.status === 200 && staffOfTaskGroupRes.status === 200) {\n          if (taskGroupRes.data.totalRow && staffOfTaskGroupRes.data.totalRow) {\n            const newTaskGroupList = taskGroupRes.data.data;\n            const newStaffOfTaskGroupList = staffOfTaskGroupRes.data.data;\n            const taskGroupListOfStaff = newTaskGroupList.filter(tg => {\n              if (newStaffOfTaskGroupList.some(s => s.TaskGroupID === tg.ID)) {\n                return tg;\n              }\n            });\n            setTaskGroupList(taskGroupListOfStaff);\n            setTotalPage(taskGroupListOfStaff.length);\n          }\n        }\n\n        if (taskGroupRes.status === 204 || staffOfTaskGroupRes.status === 204) {\n          showNoti('danger', 'Không tìm thấy');\n          setTaskGroupList([]);\n        }\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  };\n\n  const onDebounceFetchGroupTask = useDebounce(fetchGroupTask, 500, []);\n  useEffect(() => {\n    fetchGroupTask();\n  }, [filters, userInformation]); // ----------STAFF OF TASK GROUP----------\n\n  const optionRoleList = [{\n    title: 'Admin',\n    value: 1\n  }, {\n    title: 'Giáo viên',\n    value: 2\n  }, {\n    title: 'Nhân viên quản lý',\n    value: 5\n  }, {\n    title: 'Nhân viên bán hàng',\n    value: 6\n  }, {\n    title: 'Học vụ',\n    value: 7\n  }, {\n    title: 'Quản lý chuyên môn',\n    value: 8\n  }, {\n    title: 'Kế toán',\n    value: 9\n  }];\n\n  const fetchStaffListByRole = async RoleID => {\n    setIsLoading({\n      type: 'FETCH_STAFF',\n      status: true\n    });\n\n    try {\n      const res = await userInformationApi.getAllParams({\n        RoleID,\n        pageSize: 999\n      });\n\n      if (res.status === 200) {\n        const fmOptionStaffList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID');\n        setOptionStaffList(fmOptionStaffList);\n      }\n\n      if (res.status === 204) {\n        setOptionStaffList([]);\n      }\n    } catch (error) {\n      console.log('fetchStaffListByRole', error);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_STAFF',\n        status: false\n      });\n    }\n  };\n\n  const fetchStaffOfTaskGroup = async TaskGroupID => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      const res = await staffOfTaskGroupApi.getAll({\n        TaskGroupID,\n        pageSize: 99\n      });\n\n      if (res.status === 200) {\n        const addKeyToStaff = res.data.data.map((s, idx) => _objectSpread(_objectSpread({}, s), {}, {\n          key: idx\n        }));\n        setStaffOfTaskGroup(addKeyToStaff);\n      }\n\n      if (res.status === 204) {\n        setStaffOfTaskGroup([]);\n      }\n    } catch (error) {\n      console.log('fetchStaffOfTaskGroup', error);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  };\n\n  const middlewareCreateStaffOfTaskGroup = ID => {\n    return async obj => {\n      const {\n        StaffID,\n        isAddTask,\n        TaskID\n      } = obj;\n      let isDone = true;\n      await onCreateStaffOfTaskGroup({\n        TaskGroupID: ID,\n        StaffID\n      }).then(res => {\n        if ((res === null || res === void 0 ? void 0 : res.status) !== 200) isDone = false;\n      });\n\n      if (isAddTask && isDone) {\n        await onUpdateTask({\n          ID: TaskID,\n          StaffID\n        }).then(res => {\n          if ((res === null || res === void 0 ? void 0 : res.status) !== 200) isDone = false;\n        });\n      }\n\n      return isDone;\n    };\n  };\n\n  const onCreateStaffOfTaskGroup = async obj => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      res = await staffOfTaskGroupApi.add(obj);\n\n      if (res.status === 200) {\n        const newStaff = _objectSpread(_objectSpread({}, res.data.data), {}, {\n          key: staffOfTaskGroup.length\n        });\n\n        setStaffOfTaskGroup([newStaff, ...staffOfTaskGroup]);\n        showNoti('success', res.data.message);\n      }\n\n      if (res.status === 204) {\n        showNoti('danger', res.data.message);\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n      console.log('fetchTask', error);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  };\n\n  const onDeleteStaffOfTaskGroup = idx => {\n    return async () => {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: true\n      });\n\n      try {\n        const delObj = staffOfTaskGroup[idx];\n        const newDelObj = {\n          ID: delObj.ID,\n          Enable: false\n        };\n        const res = await staffOfTaskGroupApi.delete(newDelObj);\n\n        if (res.status === 200) {\n          showNoti('success', res.data.message);\n          const newStaffOfTaskGroup = [...staffOfTaskGroup];\n          newStaffOfTaskGroup.splice(idx, 1);\n          setStaffOfTaskGroup(newStaffOfTaskGroup);\n        }\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'GET_ALL',\n          status: false\n        });\n      }\n    };\n  }; // ----------TASK----------\n\n\n  const fetchTask = async TaskGroupID => {\n    setIsLoading({\n      type: 'FETCH_TASK',\n      status: true\n    });\n\n    try {\n      const res = await taskApi.getAll({\n        TaskGroupID\n      });\n\n      if (res.status === 200) {\n        const fmOptionTaskList = fmSelectArr(res.data.data, 'WorkContent', 'ID', ['DoneTask', 'StaffID']).filter(s => !s.options.StaffID && s.options.DoneTask === false);\n        setTaskList(res.data.data);\n        setOptionTaskList(fmOptionTaskList);\n      }\n\n      if (res.status === 204) {\n        setTaskList([]);\n        setOptionTaskList([]);\n      }\n    } catch (error) {\n      console.log('fetchTask', error);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_TASK',\n        status: false\n      });\n    }\n  };\n\n  const middlewareHandleTask = TaskGroupID => {\n    return async (obj, idx) => {\n      const {\n        ID,\n        WorkContent,\n        isAddStaff,\n        StaffID,\n        OldStaffID\n      } = obj;\n      let isDone = true;\n\n      if (isAddStaff) {\n        await staffOfTaskGroupApi.add({\n          TaskGroupID,\n          StaffID\n        }).catch(err => console.log(err));\n      } // IDX >= 0 IS HANDLE UPDATE\n\n\n      if (idx >= 0) {\n        const checkStaffID = isAddStaff && OldStaffID !== StaffID ? StaffID : OldStaffID;\n        const res = await onUpdateTask({\n          ID,\n          WorkContent,\n          StaffID: checkStaffID\n        }, idx);\n        if ((res === null || res === void 0 ? void 0 : res.status) !== 200) isDone = false;\n      } else {\n        const checkStaffID = isAddStaff ? StaffID : null;\n        const res = await onCreateTask({\n          TaskGroupID,\n          WorkContent,\n          StaffID: checkStaffID\n        });\n        if ((res === null || res === void 0 ? void 0 : res.status) !== 200) isDone = false;\n      }\n\n      return isDone;\n    };\n  };\n\n  const onCreateTask = async obj => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res;\n\n    try {\n      res = await taskApi.add(obj);\n\n      if (res.status === 200) {\n        setTaskList([res.data.data, ...taskList]);\n        showNoti('success', res.data.message);\n      }\n\n      if (res.status === 204) {\n        showNoti('danger', res.data.message);\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n      console.log('fetchTask', error);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n\n    return res;\n  };\n\n  const onUpdateTask = async (obj, idx) => {\n    setIsLoading({\n      type: 'FETCH_TASK',\n      status: true\n    });\n    let res;\n\n    try {\n      res = await taskApi.update(obj);\n\n      if (res.status === 200) {\n        if (idx >= 0) {\n          const {\n            StaffName,\n            StaffID,\n            DoneTask,\n            WorkContent,\n            RoleID,\n            RoleName\n          } = res.data.data;\n          const newTaskList = [...taskList];\n\n          const newTask = _objectSpread(_objectSpread({}, newTaskList[idx]), {}, {\n            StaffName,\n            StaffID,\n            DoneTask,\n            WorkContent,\n            RoleID,\n            RoleName\n          });\n\n          newTaskList.splice(idx, 1, newTask);\n          setTaskList(newTaskList);\n        }\n\n        showNoti('success', res.data.message);\n      }\n\n      if (res.status === 204) {\n        showNoti('danger', res.data.message);\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n      console.log('fetchTask', error);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_TASK',\n        status: false\n      });\n    }\n\n    return res;\n  };\n\n  const onDebounceActionOfStaff = useDebounce(onUpdateTask, 500, []);\n\n  const onDeleteTask = idx => {\n    return async () => {\n      setIsLoading({\n        type: 'FETCH_TASK',\n        status: true\n      });\n\n      try {\n        const delObj = taskList[idx];\n        const newDelObj = {\n          ID: delObj.ID,\n          Enable: false\n        };\n        const res = await taskApi.delete(newDelObj);\n\n        if (res.status === 200) {\n          showNoti('success', res.data.message);\n          const newTaskList = [...taskList];\n          newTaskList.splice(idx, 1);\n          setTaskList(newTaskList);\n        }\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'FETCH_TASK',\n          status: false\n        });\n      }\n    };\n  }; // ----------COLUMN----------\n\n\n  const columns = [_objectSpread(_objectSpread({\n    title: 'Nhóm công việc',\n    dataIndex: 'TaskGroupName'\n  }, FilterColumn('TaskGroupName', onSearch, onResetSearch, 'text')), {}, {\n    className: activeColumnSearch === 'TaskGroupName' ? 'active-column-search' : ''\n  }), {\n    title: 'Ghi chú',\n    dataIndex: 'Note'\n  }, {\n    title: 'Thời hạn',\n    dataIndex: 'Deadline',\n    render: text => moment(text).format('DD/MM/YYYY')\n  }, {\n    title: 'Ngày tạo',\n    dataIndex: 'CreatedOn',\n    render: text => moment(text).format('DD/MM/YYYY')\n  }, {\n    title: 'Tiến độ',\n    dataIndex: 'DonePercent',\n    render: text => mathRound(text) + '%  '\n  }, {\n    align: 'center',\n    render: (value, _, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        isLoading: isLoading,\n        handleFetchTask: () => fetchTask(value.ID),\n        taskList: taskList,\n        handleFetchStaffListByRole: fetchStaffListByRole,\n        optionRoleList: optionRoleList,\n        optionStaffList: optionStaffList,\n        handleSubmit: middlewareHandleTask(value.ID),\n        handleUpdateTask: onUpdateTask,\n        handleDeleteTask: onDeleteTask,\n        handleActionOfStaff: onDebounceActionOfStaff,\n        checkAuthorization: checkAuthorization,\n        userInformation: userInformation,\n        handleFetchGroupTask: onDebounceFetchGroupTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 6\n      }, this), checkAuthorization() === 'Accept' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(StaffOfTaskGroupForm, {\n          isLoading: isLoading,\n          optionRoleList: optionRoleList,\n          optionStaffList: optionStaffList,\n          staffOfTaskGroup: staffOfTaskGroup,\n          optionTaskList: optionTaskList,\n          handleFetchStaffOfTaskGroup: () => fetchStaffOfTaskGroup(value.ID),\n          handleFetchStaffListByRole: fetchStaffListByRole,\n          handleFetchTask: () => fetchTask(value.ID),\n          handleSubmit: middlewareCreateStaffOfTaskGroup(value.ID) //\n          ,\n          handleDeleteStaffOfTaskGroup: onDeleteStaffOfTaskGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(TaskGroupForm, {\n          isLoading: isLoading,\n          isUpdate: true,\n          updateObj: value,\n          indexUpdateObj: idx,\n          handleUpdateTaskGroup: onUpdateTaskGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(DeleteTableRow, {\n          handleDelete: onDeleteTaskGroup(idx),\n          text: \"nh\\xF3m c\\xF4ng vi\\u1EC7c\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 5\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PowerTable, {\n      currentPage: filters.pageIndex,\n      totalPage: totalPage,\n      getPagination: getPagination,\n      loading: isLoading,\n      addClass: \"basic-header\",\n      columns: columns,\n      dataSource: taskGroupList,\n      TitlePage: \"Qu\\u1EA3n l\\xED c\\xF4ng vi\\u1EC7c\",\n      TitleCard: checkAuthorization() === 'Accept' && /*#__PURE__*/_jsxDEV(TaskGroupForm, {\n        isLoading: isLoading,\n        handleCreateTaskGroup: onCreateTaskGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 43\n      }, this),\n      Extra: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"extra-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-datetime\",\n          children: /*#__PURE__*/_jsxDEV(TaskGroupFilterDate, {\n            handleFilter: onFilter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(SortBox, {\n          handleSort: onSort,\n          dataOption: sortOptionList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\nManageTask.layout = LayoutBase;\nexport default ManageTask;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/StaffList/ManageTask/ManageTask.tsx"],"names":["moment","useEffect","useRef","useState","staffOfTaskGroupApi","taskApi","taskGroupApi","userInformationApi","DeleteTableRow","SortBox","LayoutBase","PowerTable","FilterColumn","useDebounce","useWrap","fmSelectArr","mathRound","StaffOfTaskGroupForm","TaskForm","TaskGroupFilterDate","TaskGroupForm","ManageTask","taskGroupList","setTaskGroupList","isLoading","setIsLoading","type","status","totalPage","setTotalPage","showNoti","userInformation","pageSize","optionStaffList","setOptionStaffList","staffOfTaskGroup","setStaffOfTaskGroup","taskList","setTaskList","optionTaskList","setOptionTaskList","activeColumnSearch","setActiveColumnSearch","listFieldInit","pageIndex","sort","sortType","DoneTaskGroup","TaskGroupName","fromDate","toDate","refValue","filters","setFilters","sortOptionList","dataSort","value","text","checkAuthorization","StaffID","role","uid","UserInformationID","onFilter","arr","current","getPagination","onSort","option","title","onResetSearch","onSearch","valueSearch","dataIndex","onCreateTaskGroup","data","res","add","message","error","onUpdateTaskGroup","newObj","idx","ID","Note","Deadline","Enable","newTaskGroup","update","newTaskGroupList","splice","onDeleteTaskGroup","delObj","newDelObj","delete","length","fetchGroupTask","getAll","totalRow","taskGroupRes","staffOfTaskGroupRes","Promise","all","newStaffOfTaskGroupList","taskGroupListOfStaff","filter","tg","some","s","TaskGroupID","onDebounceFetchGroupTask","optionRoleList","fetchStaffListByRole","RoleID","getAllParams","fmOptionStaffList","console","log","fetchStaffOfTaskGroup","addKeyToStaff","map","key","middlewareCreateStaffOfTaskGroup","obj","isAddTask","TaskID","isDone","onCreateStaffOfTaskGroup","then","onUpdateTask","newStaff","onDeleteStaffOfTaskGroup","newStaffOfTaskGroup","fetchTask","fmOptionTaskList","options","DoneTask","middlewareHandleTask","WorkContent","isAddStaff","OldStaffID","catch","err","checkStaffID","onCreateTask","StaffName","RoleName","newTaskList","newTask","onDebounceActionOfStaff","onDeleteTask","columns","className","render","format","align","_","e","stopPropagation","layout"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { staffOfTaskGroupApi, taskApi, taskGroupApi, userInformationApi } from '~/apiBase';\r\nimport DeleteTableRow from '~/components/Elements/DeleteTableRow/DeleteTableRow';\r\nimport SortBox from '~/components/Elements/SortBox';\r\nimport LayoutBase from '~/components/LayoutBase';\r\nimport PowerTable from '~/components/PowerTable';\r\nimport FilterColumn from '~/components/Tables/FilterColumn';\r\nimport { useDebounce } from '~/context/useDebounce';\r\nimport { useWrap } from '~/context/wrap';\r\nimport { fmSelectArr, mathRound } from '~/utils/functions';\r\nimport StaffOfTaskGroupForm from './StaffOfTaskGroup/StaffOfTaskGroupForm';\r\nimport TaskForm from './Task/TaskForm';\r\nimport TaskGroupFilterDate from './TaskGroup/TaskGroupFilterDate';\r\nimport TaskGroupForm from './TaskGroup/TaskGroupForm';\r\n\r\nconst ManageTask = () => {\r\n\t// ----------STATE----------\r\n\tconst [taskGroupList, setTaskGroupList] = useState<ITaskGroup[]>([]);\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t});\r\n\tconst [totalPage, setTotalPage] = useState(null);\r\n\tconst { showNoti, userInformation, pageSize } = useWrap();\r\n\tconst [optionStaffList, setOptionStaffList] = useState<IOptionCommon[]>([]);\r\n\tconst [staffOfTaskGroup, setStaffOfTaskGroup] = useState<IStaffOfTaskGroup[]>([]);\r\n\tconst [taskList, setTaskList] = useState<ITask[]>([]);\r\n\tconst [optionTaskList, setOptionTaskList] = useState<IOptionCommon[]>([]);\r\n\tconst [activeColumnSearch, setActiveColumnSearch] = useState('');\r\n\t// FILTER\r\n\tconst listFieldInit = {\r\n\t\tpageIndex: 1,\r\n\t\tpageSize: pageSize,\r\n\t\tsort: -1,\r\n\t\tsortType: false,\r\n\r\n\t\tDoneTaskGroup: '',\r\n\t\tTaskGroupName: '',\r\n\t\tfromDate: '',\r\n\t\ttoDate: ''\r\n\t};\r\n\tlet refValue = useRef({\r\n\t\tpageIndex: 1,\r\n\t\tpageSize: 10,\r\n\t\tsort: -1,\r\n\t\tsortType: false\r\n\t});\r\n\tconst [filters, setFilters] = useState(listFieldInit);\r\n\r\n\t// ----------TASK GROUP----------\r\n\t// SORT OPTION\r\n\tconst sortOptionList = [\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsort: 0,\r\n\t\t\t\tsortType: true\r\n\t\t\t},\r\n\t\t\tvalue: 1,\r\n\t\t\ttext: 'Tên tăng dần'\r\n\t\t},\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsort: 0,\r\n\t\t\t\tsortType: false\r\n\t\t\t},\r\n\t\t\tvalue: 2,\r\n\t\t\ttext: 'Tên giảm dần'\r\n\t\t},\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsort: 1,\r\n\t\t\t\tsortType: true\r\n\t\t\t},\r\n\t\t\tvalue: 1,\r\n\t\t\ttext: 'Thời hạn tăng dần'\r\n\t\t},\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsort: 1,\r\n\t\t\t\tsortType: false\r\n\t\t\t},\r\n\t\t\tvalue: 2,\r\n\t\t\ttext: 'Thời hạn giảm dần'\r\n\t\t},\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsort: 2,\r\n\t\t\t\tsortType: true\r\n\t\t\t},\r\n\t\t\tvalue: 3,\r\n\t\t\ttext: 'Tiến độ tăng dần'\r\n\t\t},\r\n\t\t{\r\n\t\t\tdataSort: {\r\n\t\t\t\tsort: 2,\r\n\t\t\t\tsortType: false\r\n\t\t\t},\r\n\t\t\tvalue: 4,\r\n\t\t\ttext: 'Tiến độ giảm dần'\r\n\t\t}\r\n\t];\r\n\t// 1: ADMIN - 5: MANAGER\r\n\tconst checkAuthorization = (StaffID?: number) => {\r\n\t\tif (!userInformation) return;\r\n\t\tconst role = userInformation['RoleID'];\r\n\t\tconst uid = userInformation.UserInformationID;\r\n\t\tif (role === 1 || role === 5 || +StaffID === +uid) {\r\n\t\t\treturn 'Accept';\r\n\t\t}\r\n\t\treturn 'Ignore';\r\n\t};\r\n\t// FILTER\r\n\tconst onFilter = (arr: string[]) => {\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\t...refValue.current,\r\n\t\t\tpageIndex: 1,\r\n\t\t\tfromDate: arr[0],\r\n\t\t\ttoDate: arr[1]\r\n\t\t});\r\n\t};\r\n\t// PAGINATION\r\n\tconst getPagination = (pageIndex: number, pageSize: number) => {\r\n\t\tif (!pageSize) pageSize = 10;\r\n\t\trefValue.current = {\r\n\t\t\t...refValue.current,\r\n\t\t\tpageSize,\r\n\t\t\tpageIndex\r\n\t\t};\r\n\t\tsetFilters({\r\n\t\t\t...filters,\r\n\t\t\t...refValue.current\r\n\t\t});\r\n\t};\r\n\t// SORT\r\n\tconst onSort = (option) => {\r\n\t\trefValue.current = {\r\n\t\t\t...refValue.current,\r\n\t\t\tsort: option.title.sort,\r\n\t\t\tsortType: option.title.sortType\r\n\t\t};\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\t...refValue.current\r\n\t\t});\r\n\t};\r\n\t// RESET SEARCH\r\n\tconst onResetSearch = () => {\r\n\t\tsetActiveColumnSearch('');\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\tpageSize: refValue.current.pageSize\r\n\t\t});\r\n\t};\r\n\t// ACTION SEARCH\r\n\tconst onSearch = (valueSearch, dataIndex) => {\r\n\t\tsetActiveColumnSearch(dataIndex);\r\n\t\tsetFilters({\r\n\t\t\t...listFieldInit,\r\n\t\t\t...refValue.current,\r\n\t\t\tpageIndex: 1,\r\n\t\t\t[dataIndex]: valueSearch\r\n\t\t});\r\n\t};\r\n\t// CREATE\r\n\tconst onCreateTaskGroup = async (data: { TaskGroupName: string; Note: string; Deadline: string }) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\tlet res;\r\n\t\ttry {\r\n\t\t\tres = await taskGroupApi.add(data);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t\tonResetSearch(); // <== khi tạo xong r reset search để trở về trang đầu tiên\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn res;\r\n\t};\r\n\t// UPDATE\r\n\tconst onUpdateTaskGroup = async (newObj: ITaskGroup, idx: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\tlet res;\r\n\t\ttry {\r\n\t\t\tconst { ID, TaskGroupName, Note, Deadline, Enable } = newObj;\r\n\t\t\tconst newTaskGroup = {\r\n\t\t\t\tID,\r\n\t\t\t\tTaskGroupName,\r\n\t\t\t\tNote,\r\n\t\t\t\tDeadline,\r\n\t\t\t\tEnable\r\n\t\t\t};\r\n\t\t\tres = await taskGroupApi.update(newTaskGroup);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newTaskGroupList = [...taskGroupList];\r\n\t\t\t\tnewTaskGroupList.splice(idx, 1, {\r\n\t\t\t\t\t...newObj\r\n\t\t\t\t});\r\n\t\t\t\tsetTaskGroupList(newTaskGroupList);\r\n\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetTaskGroupList([]);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t\treturn res;\r\n\t\t}\r\n\t};\r\n\t// DELETE\r\n\tconst onDeleteTaskGroup = (idx: number) => {\r\n\t\treturn async () => {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: true\r\n\t\t\t});\r\n\t\t\ttry {\r\n\t\t\t\tconst delObj = taskGroupList[idx];\r\n\t\t\t\tconst { ID, TaskGroupName, Note, Deadline } = delObj;\r\n\t\t\t\tconst newDelObj = {\r\n\t\t\t\t\tID,\r\n\t\t\t\t\tTaskGroupName,\r\n\t\t\t\t\tNote,\r\n\t\t\t\t\tDeadline,\r\n\t\t\t\t\tEnable: false\r\n\t\t\t\t};\r\n\t\t\t\tconst res = await taskGroupApi.delete(newDelObj);\r\n\t\t\t\tres.status === 200 && showNoti('success', res.data.message);\r\n\t\t\t\tif (taskGroupList.length === 1) {\r\n\t\t\t\t\tfilters.pageIndex === 1\r\n\t\t\t\t\t\t? (setFilters({\r\n\t\t\t\t\t\t\t\t...listFieldInit,\r\n\t\t\t\t\t\t\t\t...refValue.current,\r\n\t\t\t\t\t\t\t\tpageIndex: 1\r\n\t\t\t\t\t\t  }),\r\n\t\t\t\t\t\t  setTaskGroupList([]))\r\n\t\t\t\t\t\t: setFilters({\r\n\t\t\t\t\t\t\t\t...filters,\r\n\t\t\t\t\t\t\t\t...refValue.current,\r\n\t\t\t\t\t\t\t\tpageIndex: filters.pageIndex - 1\r\n\t\t\t\t\t\t  });\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tfetchGroupTask();\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message);\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\tconst fetchGroupTask = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tif (!userInformation) return;\r\n\t\t\t// ADMIN: 1 - MANAGER 5: SEE ALL TASK GROUP\r\n\t\t\t// OTHERWISE: MUST HAVE ID IN STAFF OF TASK GROUP\r\n\t\t\tif (userInformation['RoleID'] === 1 || userInformation['RoleID'] === 5) {\r\n\t\t\t\tlet res = await taskGroupApi.getAll(filters);\r\n\t\t\t\tif (res.status === 200) {\r\n\t\t\t\t\tif (res.data.totalRow && res.data.data.length) {\r\n\t\t\t\t\t\tsetTaskGroupList(res.data.data);\r\n\t\t\t\t\t\tsetTotalPage(res.data.totalRow);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (res.status === 204) {\r\n\t\t\t\t\tshowNoti('danger', 'Không tìm thấy');\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst StaffID = userInformation.UserInformationID;\r\n\t\t\t\tconst [taskGroupRes, staffOfTaskGroupRes] = await Promise.all([\r\n\t\t\t\t\ttaskGroupApi.getAll(filters),\r\n\t\t\t\t\tstaffOfTaskGroupApi.getAll({ StaffID })\r\n\t\t\t\t]);\r\n\t\t\t\tif (taskGroupRes.status === 200 && staffOfTaskGroupRes.status === 200) {\r\n\t\t\t\t\tif (taskGroupRes.data.totalRow && staffOfTaskGroupRes.data.totalRow) {\r\n\t\t\t\t\t\tconst newTaskGroupList = taskGroupRes.data.data;\r\n\t\t\t\t\t\tconst newStaffOfTaskGroupList = staffOfTaskGroupRes.data.data;\r\n\t\t\t\t\t\tconst taskGroupListOfStaff = newTaskGroupList.filter((tg) => {\r\n\t\t\t\t\t\t\tif (newStaffOfTaskGroupList.some((s) => s.TaskGroupID === tg.ID)) {\r\n\t\t\t\t\t\t\t\treturn tg;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsetTaskGroupList(taskGroupListOfStaff);\r\n\t\t\t\t\t\tsetTotalPage(taskGroupListOfStaff.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (taskGroupRes.status === 204 || staffOfTaskGroupRes.status === 204) {\r\n\t\t\t\t\tshowNoti('danger', 'Không tìm thấy');\r\n\t\t\t\t\tsetTaskGroupList([]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tconst onDebounceFetchGroupTask = useDebounce(fetchGroupTask, 500, []);\r\n\tuseEffect(() => {\r\n\t\tfetchGroupTask();\r\n\t}, [filters, userInformation]);\r\n\t// ----------STAFF OF TASK GROUP----------\r\n\tconst optionRoleList = [\r\n\t\t{\r\n\t\t\ttitle: 'Admin',\r\n\t\t\tvalue: 1\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Giáo viên',\r\n\t\t\tvalue: 2\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Nhân viên quản lý',\r\n\t\t\tvalue: 5\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Nhân viên bán hàng',\r\n\t\t\tvalue: 6\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Học vụ',\r\n\t\t\tvalue: 7\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Quản lý chuyên môn',\r\n\t\t\tvalue: 8\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Kế toán',\r\n\t\t\tvalue: 9\r\n\t\t}\r\n\t];\r\n\tconst fetchStaffListByRole = async (RoleID: number) => {\r\n\t\tsetIsLoading({ type: 'FETCH_STAFF', status: true });\r\n\t\ttry {\r\n\t\t\tconst res = await userInformationApi.getAllParams({\r\n\t\t\t\tRoleID,\r\n\t\t\t\tpageSize: 999\r\n\t\t\t});\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst fmOptionStaffList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID');\r\n\t\t\t\tsetOptionStaffList(fmOptionStaffList);\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionStaffList([]);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('fetchStaffListByRole', error);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({ type: 'FETCH_STAFF', status: false });\r\n\t\t}\r\n\t};\r\n\tconst fetchStaffOfTaskGroup = async (TaskGroupID: number) => {\r\n\t\tsetIsLoading({ type: 'GET_ALL', status: true });\r\n\t\ttry {\r\n\t\t\tconst res = await staffOfTaskGroupApi.getAll({\r\n\t\t\t\tTaskGroupID,\r\n\t\t\t\tpageSize: 99\r\n\t\t\t});\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst addKeyToStaff = res.data.data.map((s, idx) => ({\r\n\t\t\t\t\t...s,\r\n\t\t\t\t\tkey: idx\r\n\t\t\t\t}));\r\n\t\t\t\tsetStaffOfTaskGroup(addKeyToStaff);\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetStaffOfTaskGroup([]);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('fetchStaffOfTaskGroup', error);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({ type: 'GET_ALL', status: false });\r\n\t\t}\r\n\t};\r\n\tconst middlewareCreateStaffOfTaskGroup = (ID: number) => {\r\n\t\treturn async (obj: { RoleID: number; StaffID: number; isAddTask: boolean; TaskID?: number }) => {\r\n\t\t\tconst { StaffID, isAddTask, TaskID } = obj;\r\n\t\t\tlet isDone = true;\r\n\t\t\tawait onCreateStaffOfTaskGroup({\r\n\t\t\t\tTaskGroupID: ID,\r\n\t\t\t\tStaffID\r\n\t\t\t}).then((res) => {\r\n\t\t\t\tif (res?.status !== 200) isDone = false;\r\n\t\t\t});\r\n\t\t\tif (isAddTask && isDone) {\r\n\t\t\t\tawait onUpdateTask({ ID: TaskID, StaffID }).then((res) => {\r\n\t\t\t\t\tif (res?.status !== 200) isDone = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn isDone;\r\n\t\t};\r\n\t};\r\n\tconst onCreateStaffOfTaskGroup = async (obj: { TaskGroupID: number; StaffID: number }) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\tlet res;\r\n\t\ttry {\r\n\t\t\tres = await staffOfTaskGroupApi.add(obj);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newStaff = {\r\n\t\t\t\t\t...res.data.data,\r\n\t\t\t\t\tkey: staffOfTaskGroup.length\r\n\t\t\t\t};\r\n\t\t\t\tsetStaffOfTaskGroup([newStaff, ...staffOfTaskGroup]);\r\n\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', res.data.message);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t\tconsole.log('fetchTask', error);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn res;\r\n\t};\r\n\tconst onDeleteStaffOfTaskGroup = (idx: number) => {\r\n\t\treturn async () => {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: true\r\n\t\t\t});\r\n\t\t\ttry {\r\n\t\t\t\tconst delObj = staffOfTaskGroup[idx];\r\n\t\t\t\tconst newDelObj = {\r\n\t\t\t\t\tID: delObj.ID,\r\n\t\t\t\t\tEnable: false\r\n\t\t\t\t};\r\n\t\t\t\tconst res = await staffOfTaskGroupApi.delete(newDelObj);\r\n\t\t\t\tif (res.status === 200) {\r\n\t\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t\t\tconst newStaffOfTaskGroup = [...staffOfTaskGroup];\r\n\t\t\t\t\tnewStaffOfTaskGroup.splice(idx, 1);\r\n\t\t\t\t\tsetStaffOfTaskGroup(newStaffOfTaskGroup);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message);\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\t// ----------TASK----------\r\n\tconst fetchTask = async (TaskGroupID: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_TASK',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconst res = await taskApi.getAll({\r\n\t\t\t\tTaskGroupID\r\n\t\t\t});\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst fmOptionTaskList = fmSelectArr(res.data.data, 'WorkContent', 'ID', ['DoneTask', 'StaffID']).filter(\r\n\t\t\t\t\t(s) => !s.options.StaffID && s.options.DoneTask === false\r\n\t\t\t\t);\r\n\t\t\t\tsetTaskList(res.data.data);\r\n\t\t\t\tsetOptionTaskList(fmOptionTaskList);\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetTaskList([]);\r\n\t\t\t\tsetOptionTaskList([]);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('fetchTask', error);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_TASK',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tconst middlewareHandleTask = (TaskGroupID: number) => {\r\n\t\treturn async (\r\n\t\t\tobj: {\r\n\t\t\t\tID?: number;\r\n\t\t\t\tWorkContent: string;\r\n\t\t\t\tisAddStaff: boolean;\r\n\t\t\t\tRoleID?: number;\r\n\t\t\t\tStaffID?: number;\r\n\t\t\t\tOldStaffID?: number;\r\n\t\t\t},\r\n\t\t\tidx?: number\r\n\t\t) => {\r\n\t\t\tconst { ID, WorkContent, isAddStaff, StaffID, OldStaffID } = obj;\r\n\t\t\tlet isDone = true;\r\n\t\t\tif (isAddStaff) {\r\n\t\t\t\tawait staffOfTaskGroupApi\r\n\t\t\t\t\t.add({\r\n\t\t\t\t\t\tTaskGroupID,\r\n\t\t\t\t\t\tStaffID\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((err) => console.log(err));\r\n\t\t\t}\r\n\t\t\t// IDX >= 0 IS HANDLE UPDATE\r\n\t\t\tif (idx >= 0) {\r\n\t\t\t\tconst checkStaffID = isAddStaff && OldStaffID !== StaffID ? StaffID : OldStaffID;\r\n\t\t\t\tconst res = await onUpdateTask(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tID,\r\n\t\t\t\t\t\tWorkContent,\r\n\t\t\t\t\t\tStaffID: checkStaffID\r\n\t\t\t\t\t},\r\n\t\t\t\t\tidx\r\n\t\t\t\t);\r\n\t\t\t\tif (res?.status !== 200) isDone = false;\r\n\t\t\t} else {\r\n\t\t\t\tconst checkStaffID = isAddStaff ? StaffID : null;\r\n\t\t\t\tconst res = await onCreateTask({\r\n\t\t\t\t\tTaskGroupID,\r\n\t\t\t\t\tWorkContent,\r\n\t\t\t\t\tStaffID: checkStaffID\r\n\t\t\t\t});\r\n\t\t\t\tif (res?.status !== 200) isDone = false;\r\n\t\t\t}\r\n\t\t\treturn isDone;\r\n\t\t};\r\n\t};\r\n\tconst onCreateTask = async (obj: { TaskGroupID: number; WorkContent: string; StaffID?: number }) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\tlet res;\r\n\t\ttry {\r\n\t\t\tres = await taskApi.add(obj);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetTaskList([res.data.data, ...taskList]);\r\n\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', res.data.message);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t\tconsole.log('fetchTask', error);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn res;\r\n\t};\r\n\tconst onUpdateTask = async (\r\n\t\tobj: {\r\n\t\t\tID: number;\r\n\t\t\tStaffID?: number;\r\n\t\t\tWorkContent?: string;\r\n\t\t\tDoneTask?: boolean;\r\n\t\t\tEnable?: boolean;\r\n\t\t},\r\n\t\tidx?: number\r\n\t) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_TASK',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\tlet res;\r\n\t\ttry {\r\n\t\t\tres = await taskApi.update(obj);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tif (idx >= 0) {\r\n\t\t\t\t\tconst { StaffName, StaffID, DoneTask, WorkContent, RoleID, RoleName } = res.data.data;\r\n\t\t\t\t\tconst newTaskList = [...taskList];\r\n\t\t\t\t\tconst newTask = {\r\n\t\t\t\t\t\t...newTaskList[idx],\r\n\t\t\t\t\t\tStaffName,\r\n\t\t\t\t\t\tStaffID,\r\n\t\t\t\t\t\tDoneTask,\r\n\t\t\t\t\t\tWorkContent,\r\n\t\t\t\t\t\tRoleID,\r\n\t\t\t\t\t\tRoleName\r\n\t\t\t\t\t};\r\n\t\t\t\t\tnewTaskList.splice(idx, 1, newTask);\r\n\t\t\t\t\tsetTaskList(newTaskList);\r\n\t\t\t\t}\r\n\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tshowNoti('danger', res.data.message);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t\tconsole.log('fetchTask', error);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_TASK',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn res;\r\n\t};\r\n\tconst onDebounceActionOfStaff = useDebounce(onUpdateTask, 500, []);\r\n\tconst onDeleteTask = (idx: number) => {\r\n\t\treturn async () => {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_TASK',\r\n\t\t\t\tstatus: true\r\n\t\t\t});\r\n\t\t\ttry {\r\n\t\t\t\tconst delObj = taskList[idx];\r\n\t\t\t\tconst newDelObj = {\r\n\t\t\t\t\tID: delObj.ID,\r\n\t\t\t\t\tEnable: false\r\n\t\t\t\t};\r\n\t\t\t\tconst res = await taskApi.delete(newDelObj);\r\n\t\t\t\tif (res.status === 200) {\r\n\t\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t\t\tconst newTaskList = [...taskList];\r\n\t\t\t\t\tnewTaskList.splice(idx, 1);\r\n\t\t\t\t\tsetTaskList(newTaskList);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message);\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'FETCH_TASK',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\t// ----------COLUMN----------\r\n\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Nhóm công việc',\r\n\t\t\tdataIndex: 'TaskGroupName',\r\n\t\t\t...FilterColumn('TaskGroupName', onSearch, onResetSearch, 'text'),\r\n\t\t\tclassName: activeColumnSearch === 'TaskGroupName' ? 'active-column-search' : ''\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Ghi chú',\r\n\t\t\tdataIndex: 'Note'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Thời hạn',\r\n\t\t\tdataIndex: 'Deadline',\r\n\t\t\trender: (text) => moment(text).format('DD/MM/YYYY')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Ngày tạo',\r\n\t\t\tdataIndex: 'CreatedOn',\r\n\t\t\trender: (text) => moment(text).format('DD/MM/YYYY')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Tiến độ',\r\n\t\t\tdataIndex: 'DonePercent',\r\n\t\t\trender: (text) => mathRound(text) + '%  '\r\n\t\t},\r\n\t\t{\r\n\t\t\talign: 'center',\r\n\t\t\trender: (value: ITaskGroup, _, idx) => (\r\n\t\t\t\t<div onClick={(e) => e.stopPropagation()}>\r\n\t\t\t\t\t<TaskForm\r\n\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\thandleFetchTask={() => fetchTask(value.ID)}\r\n\t\t\t\t\t\ttaskList={taskList}\r\n\t\t\t\t\t\thandleFetchStaffListByRole={fetchStaffListByRole}\r\n\t\t\t\t\t\toptionRoleList={optionRoleList}\r\n\t\t\t\t\t\toptionStaffList={optionStaffList}\r\n\t\t\t\t\t\thandleSubmit={middlewareHandleTask(value.ID)}\r\n\t\t\t\t\t\thandleUpdateTask={onUpdateTask}\r\n\t\t\t\t\t\thandleDeleteTask={onDeleteTask}\r\n\t\t\t\t\t\thandleActionOfStaff={onDebounceActionOfStaff}\r\n\t\t\t\t\t\tcheckAuthorization={checkAuthorization}\r\n\t\t\t\t\t\tuserInformation={userInformation}\r\n\t\t\t\t\t\thandleFetchGroupTask={onDebounceFetchGroupTask}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{checkAuthorization() === 'Accept' && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<StaffOfTaskGroupForm\r\n\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\toptionRoleList={optionRoleList}\r\n\t\t\t\t\t\t\t\toptionStaffList={optionStaffList}\r\n\t\t\t\t\t\t\t\tstaffOfTaskGroup={staffOfTaskGroup}\r\n\t\t\t\t\t\t\t\toptionTaskList={optionTaskList}\r\n\t\t\t\t\t\t\t\thandleFetchStaffOfTaskGroup={() => fetchStaffOfTaskGroup(value.ID)}\r\n\t\t\t\t\t\t\t\thandleFetchStaffListByRole={fetchStaffListByRole}\r\n\t\t\t\t\t\t\t\thandleFetchTask={() => fetchTask(value.ID)}\r\n\t\t\t\t\t\t\t\thandleSubmit={middlewareCreateStaffOfTaskGroup(value.ID)}\r\n\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\thandleDeleteStaffOfTaskGroup={onDeleteStaffOfTaskGroup}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TaskGroupForm\r\n\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\tisUpdate={true}\r\n\t\t\t\t\t\t\t\tupdateObj={value}\r\n\t\t\t\t\t\t\t\tindexUpdateObj={idx}\r\n\t\t\t\t\t\t\t\thandleUpdateTaskGroup={onUpdateTaskGroup}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<DeleteTableRow handleDelete={onDeleteTaskGroup(idx)} text=\"nhóm công việc\" />\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<PowerTable\r\n\t\t\t\tcurrentPage={filters.pageIndex}\r\n\t\t\t\ttotalPage={totalPage}\r\n\t\t\t\tgetPagination={getPagination}\r\n\t\t\t\tloading={isLoading}\r\n\t\t\t\taddClass=\"basic-header\"\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tdataSource={taskGroupList}\r\n\t\t\t\tTitlePage=\"Quản lí công việc\"\r\n\t\t\t\tTitleCard={\r\n\t\t\t\t\tcheckAuthorization() === 'Accept' && <TaskGroupForm isLoading={isLoading} handleCreateTaskGroup={onCreateTaskGroup} />\r\n\t\t\t\t}\r\n\t\t\t\tExtra={\r\n\t\t\t\t\t<div className=\"extra-table\">\r\n\t\t\t\t\t\t<div className=\"filter-datetime\">\r\n\t\t\t\t\t\t\t<TaskGroupFilterDate handleFilter={onFilter} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<SortBox handleSort={onSort} dataOption={sortOptionList} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t></PowerTable>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nManageTask.layout = LayoutBase;\r\nexport default ManageTask;\r\n"]},"metadata":{},"sourceType":"module"}