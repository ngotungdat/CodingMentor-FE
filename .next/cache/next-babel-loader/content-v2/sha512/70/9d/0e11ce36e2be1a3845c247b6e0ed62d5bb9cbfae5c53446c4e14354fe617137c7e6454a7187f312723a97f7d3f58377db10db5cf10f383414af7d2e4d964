{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\pages\\\\option\\\\idiom\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Switch } from 'antd';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { idiomsApi } from '~/apiBase/options/idioms';\nimport IdiomsForm from '~/components/Global/Option/IdiomsForm';\nimport LayoutBase from '~/components/LayoutBase';\nimport PowerTable from '~/components/PowerTable';\nimport FilterColumn from '~/components/Tables/FilterColumn';\nimport { useWrap } from '~/context/wrap';\n\nconst Idioms = () => {\n  const onSearch = data => {\n    setCurrentPage(1);\n    setParams(_objectSpread(_objectSpread({}, listParamsDefault), {}, {\n      search: data\n    }));\n  };\n\n  const handleReset = () => {\n    setCurrentPage(1);\n    setParams(listParamsDefault);\n  };\n\n  const columns = [{\n    title: 'Người tạo',\n    dataIndex: 'CreatedBy',\n    render: CreatedBy => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '120px'\n      },\n      children: CreatedBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 27\n    }, this)\n  }, _objectSpread(_objectSpread({\n    title: 'Câu thành ngữ',\n    dataIndex: 'Idioms'\n  }, FilterColumn('Idioms', onSearch, handleReset, 'text')), {}, {\n    render: text => ReactHtmlParser(text)\n  }), {\n    title: 'Trạng thái',\n    render: data => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        checkedChildren: \"Hi\\u1EC7n\",\n        unCheckedChildren: \"\\u1EA8n\",\n        checked: data.Enable,\n        size: \"default\",\n        onChange: async check => {\n          setIsLoading({\n            type: 'GET_ALL',\n            status: true\n          });\n\n          try {\n            let res = await idiomsApi.update(_objectSpread(_objectSpread({}, data), {}, {\n              Enable: check\n            }));\n            res.status == 200 && setParams(_objectSpread(_objectSpread({}, params), {}, {\n              pageIndex: currentPage\n            })), showNoti('success', res.data.message);\n          } catch (error) {\n            showNoti('danger', error.Message);\n          } finally {\n            setIsLoading({\n              type: 'GET_ALL',\n              status: false\n            });\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this)\n  }, {\n    render: data => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(IdiomsForm, {\n        idiomsDetail: data,\n        idiomsId: data.ID,\n        reloadData: firstPage => {\n          getDataIdioms(firstPage);\n        },\n        currentPage: currentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 6\n      }, this)\n    }, void 0, false)\n  }];\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    showNoti,\n    pageSize\n  } = useWrap();\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    0: idioms,\n    1: setIdioms\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: 'GET_ALL',\n    status: false\n  });\n  const listParamsDefault = {\n    pageSize: pageSize,\n    pageIndex: currentPage,\n    search: null\n  };\n  const {\n    0: params,\n    1: setParams\n  } = useState(listParamsDefault);\n\n  const getPagination = pageNumber => {\n    setCurrentPage(pageNumber);\n    setParams(_objectSpread(_objectSpread({}, params), {}, {\n      pageIndex: currentPage\n    }));\n  };\n\n  const getDataIdioms = page => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    (async () => {\n      try {\n        let res = await idiomsApi.getPaged(_objectSpread(_objectSpread({}, params), {}, {\n          pageIndex: page\n        }));\n        res.status == 200 && setIdioms(res.data.data);\n\n        if (res.status == 204) {\n          showNoti('danger', 'Không tìm thấy dữ liệu!');\n          setCurrentPage(1);\n          setParams(listParamsDefault);\n          setIdioms([]);\n        } else setTotalPage(res.data.totalRow);\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'GET_ALL',\n          status: false\n        });\n      }\n    })();\n  };\n\n  useEffect(() => {\n    getDataIdioms(currentPage);\n  }, [params]);\n  return /*#__PURE__*/_jsxDEV(PowerTable, {\n    currentPage: currentPage,\n    loading: isLoading,\n    totalPage: totalPage && totalPage,\n    getPagination: pageNumber => getPagination(pageNumber),\n    addClass: \"basic-header\",\n    TitlePage: \"Th\\xE0nh ng\\u1EEF\",\n    TitleCard: /*#__PURE__*/_jsxDEV(IdiomsForm, {\n      reloadData: firstPage => {\n        setCurrentPage(1);\n        getDataIdioms(firstPage);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this),\n    dataSource: idioms,\n    columns: columns\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 3\n  }, this);\n};\n\nIdioms.layout = LayoutBase;\nexport default Idioms;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/pages/option/idiom/index.tsx"],"names":["Switch","React","Fragment","useEffect","useState","ReactHtmlParser","idiomsApi","IdiomsForm","LayoutBase","PowerTable","FilterColumn","useWrap","Idioms","onSearch","data","setCurrentPage","setParams","listParamsDefault","search","handleReset","columns","title","dataIndex","render","CreatedBy","width","text","Enable","check","setIsLoading","type","status","res","update","params","pageIndex","currentPage","showNoti","message","error","Message","ID","firstPage","getDataIdioms","pageSize","totalPage","setTotalPage","idioms","setIdioms","isLoading","getPagination","pageNumber","page","getPaged","totalRow","layout"],"mappings":"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","sourcesContent":["import { Switch } from 'antd'\r\nimport React, { Fragment, useEffect, useState } from 'react'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport { idiomsApi } from '~/apiBase/options/idioms'\r\nimport IdiomsForm from '~/components/Global/Option/IdiomsForm'\r\nimport LayoutBase from '~/components/LayoutBase'\r\nimport PowerTable from '~/components/PowerTable'\r\nimport FilterColumn from '~/components/Tables/FilterColumn'\r\nimport { useWrap } from '~/context/wrap'\r\n\r\nconst Idioms = () => {\r\n\tconst onSearch = (data) => {\r\n\t\tsetCurrentPage(1)\r\n\t\tsetParams({\r\n\t\t\t...listParamsDefault,\r\n\t\t\tsearch: data\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetCurrentPage(1)\r\n\t\tsetParams(listParamsDefault)\r\n\t}\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Người tạo',\r\n\t\t\tdataIndex: 'CreatedBy',\r\n\t\t\trender: (CreatedBy) => <div style={{ width: '120px' }}>{CreatedBy}</div>\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Câu thành ngữ',\r\n\t\t\tdataIndex: 'Idioms',\r\n\t\t\t...FilterColumn('Idioms', onSearch, handleReset, 'text'),\r\n\t\t\trender: (text) => ReactHtmlParser(text)\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\trender: (data) => (\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<Switch\r\n\t\t\t\t\t\tcheckedChildren=\"Hiện\"\r\n\t\t\t\t\t\tunCheckedChildren=\"Ẩn\"\r\n\t\t\t\t\t\tchecked={data.Enable}\r\n\t\t\t\t\t\tsize=\"default\"\r\n\t\t\t\t\t\tonChange={async (check: boolean) => {\r\n\t\t\t\t\t\t\tsetIsLoading({\r\n\t\t\t\t\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\t\t\t\t\tstatus: true\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tlet res = await idiomsApi.update({ ...data, Enable: check })\r\n\t\t\t\t\t\t\t\tres.status == 200 && setParams({ ...params, pageIndex: currentPage }), showNoti('success', res.data.message)\r\n\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\tshowNoti('danger', error.Message)\r\n\t\t\t\t\t\t\t} finally {\r\n\t\t\t\t\t\t\t\tsetIsLoading({\r\n\t\t\t\t\t\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\t\t\t\t\t\tstatus: false\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Fragment>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\trender: (data) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<IdiomsForm\r\n\t\t\t\t\t\tidiomsDetail={data}\r\n\t\t\t\t\t\tidiomsId={data.ID}\r\n\t\t\t\t\t\treloadData={(firstPage) => {\r\n\t\t\t\t\t\t\tgetDataIdioms(firstPage)\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t}\r\n\t]\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\r\n\tconst { showNoti, pageSize } = useWrap()\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\tconst [idioms, setIdioms] = useState<IIdioms[]>([])\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: 'GET_ALL',\r\n\t\tstatus: false\r\n\t})\r\n\tconst listParamsDefault = {\r\n\t\tpageSize: pageSize,\r\n\t\tpageIndex: currentPage,\r\n\t\tsearch: null\r\n\t}\r\n\tconst [params, setParams] = useState(listParamsDefault)\r\n\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tsetCurrentPage(pageNumber)\r\n\t\tsetParams({\r\n\t\t\t...params,\r\n\t\t\tpageIndex: currentPage\r\n\t\t})\r\n\t}\r\n\r\n\tconst getDataIdioms = (page: any) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\t\t;(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tlet res = await idiomsApi.getPaged({ ...params, pageIndex: page })\r\n\r\n\t\t\t\tres.status == 200 && setIdioms(res.data.data)\r\n\t\t\t\tif (res.status == 204) {\r\n\t\t\t\t\tshowNoti('danger', 'Không tìm thấy dữ liệu!')\r\n\t\t\t\t\tsetCurrentPage(1)\r\n\t\t\t\t\tsetParams(listParamsDefault)\r\n\t\t\t\t\tsetIdioms([])\r\n\t\t\t\t} else setTotalPage(res.data.totalRow)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})()\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tgetDataIdioms(currentPage)\r\n\t}, [params])\r\n\r\n\treturn (\r\n\t\t<PowerTable\r\n\t\t\tcurrentPage={currentPage}\r\n\t\t\tloading={isLoading}\r\n\t\t\ttotalPage={totalPage && totalPage}\r\n\t\t\tgetPagination={(pageNumber: number) => getPagination(pageNumber)}\r\n\t\t\taddClass=\"basic-header\"\r\n\t\t\tTitlePage=\"Thành ngữ\"\r\n\t\t\tTitleCard={\r\n\t\t\t\t<IdiomsForm\r\n\t\t\t\t\treloadData={(firstPage) => {\r\n\t\t\t\t\t\tsetCurrentPage(1)\r\n\t\t\t\t\t\tgetDataIdioms(firstPage)\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t}\r\n\t\t\tdataSource={idioms}\r\n\t\t\tcolumns={columns}\r\n\t\t/>\r\n\t)\r\n}\r\nIdioms.layout = LayoutBase\r\nexport default Idioms\r\n"]},"metadata":{},"sourceType":"module"}