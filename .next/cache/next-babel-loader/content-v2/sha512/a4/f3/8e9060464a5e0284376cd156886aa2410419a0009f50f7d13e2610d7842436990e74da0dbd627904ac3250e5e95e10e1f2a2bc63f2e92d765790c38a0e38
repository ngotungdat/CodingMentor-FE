{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\QuestionBank\\\\QuestionFormType\\\\SpeakingForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Form } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { exerciseApi } from '~/apiBase/';\nimport EditorSimple from '~/components/Elements/EditorSimple';\nimport { useWrap } from '~/context/wrap';\nvar AnsID = 0;\n\nvar SpeakingForm = function SpeakingForm(props) {\n  _s();\n\n  var isSubmit = props.isSubmit,\n      questionData = props.questionData,\n      changeIsSubmit = props.changeIsSubmit,\n      visible = props.visible,\n      changeData = props.changeData,\n      isGroup = props.isGroup;\n\n  var _useWrap = useWrap(),\n      showNoti = _useWrap.showNoti;\n\n  var _useForm = useForm(),\n      reset = _useForm.reset,\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      control = _useForm.control,\n      setValue = _useForm.setValue,\n      _useForm$formState = _useForm.formState,\n      isSubmitting = _useForm$formState.isSubmitting,\n      errors = _useForm$formState.errors,\n      isSubmitted = _useForm$formState.isSubmitted;\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var _useState = useState(null),\n      questionDataForm = _useState[0],\n      setQuestionDataForm = _useState[1];\n\n  var _useState2 = useState(false),\n      isResetEditor = _useState2[0],\n      setIsResetEditor = _useState2[1];\n\n  var _useState3 = useState(questionData.ExerciseAnswer),\n      answerList = _useState3[0],\n      setAnswerList = _useState3[1];\n\n  var _useState4 = useState(true),\n      loadAtFirst = _useState4[0],\n      setLoadAtFirst = _useState4[1]; // SUBMI FORM\n\n\n  var onSubmit = handleSubmit(function (data, e) {\n    console.log('DATA SUBMIT: ', data);\n  }); // GET VALUE IN EDITOR\n\n  var getDataEditor = function getDataEditor(dataEditor) {\n    if (questionDataForm) {\n      questionDataForm.Content = dataEditor;\n    }\n\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  };\n\n  var getDescribeAnswer = function getDescribeAnswer(dataEditor) {\n    if (questionDataForm) {\n      questionDataForm.DescribeAnswer = dataEditor;\n    }\n\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // Reset value in form\n\n\n  var resetForm = function resetForm() {\n    questionDataForm.Content = '';\n    questionDataForm.ExerciseAnswer = [];\n    setQuestionDataForm(_objectSpread({}, questionDataForm));\n  }; // SUBMIT FORM\n\n\n  var handleSubmitQuestion = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res, cloneData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              res = null;\n              _context.prev = 1;\n\n              if (!questionDataForm.ID) {\n                _context.next = 10;\n                break;\n              }\n\n              cloneData = JSON.parse(JSON.stringify(questionDataForm));\n              cloneData.ExerciseAnswer.forEach(function (item, index) {\n                if (item.isAdd) {\n                  delete item.ID;\n                }\n              });\n              _context.next = 7;\n              return exerciseApi.update(cloneData);\n\n            case 7:\n              res = _context.sent;\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return exerciseApi.add(questionDataForm);\n\n            case 12:\n              res = _context.sent;\n\n            case 13:\n              if (res.status == 200) {\n                changeIsSubmit(questionDataForm.ID ? questionDataForm : res.data.data);\n                showNoti('success', \"\".concat(questionDataForm.ID ? 'Cập nhật' : 'Thêm', \" Th\\xE0nh c\\xF4ng\"));\n\n                if (!questionDataForm.ID) {\n                  resetForm();\n                }\n\n                setIsResetEditor(true);\n                setTimeout(function () {\n                  setIsResetEditor(false);\n                }, 500);\n              }\n\n              _context.next = 18;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 16]]);\n    }));\n\n    return function handleSubmitQuestion() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    isSubmit && handleSubmitQuestion();\n  }, [isSubmit]);\n  useEffect(function () {\n    if (visible) {\n      if (!questionData.ID) {\n        questionData.Content = '';\n      }\n\n      setQuestionDataForm(_objectSpread({}, questionData));\n    } else {\n      setQuestionDataForm(null);\n      setLoadAtFirst(true);\n    }\n  }, [visible]);\n  useEffect(function () {\n    if (questionDataForm) {\n      if (!loadAtFirst) {\n        changeData && changeData();\n      }\n\n      setLoadAtFirst(false);\n    }\n  }, [questionDataForm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-create-question\",\n    children: visible && questionDataForm && /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      layout: \"vertical\",\n      onFinish: onSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"Question\",\n              label: \"C\\xE2u h\\u1ECFi\",\n              children: /*#__PURE__*/_jsxDEV(EditorSimple, {\n                isTranslate: true,\n                handleChange: function handleChange(value) {\n                  return getDataEditor(value);\n                },\n                isReset: isResetEditor,\n                questionContent: questionDataForm === null || questionDataForm === void 0 ? void 0 : questionDataForm.Content,\n                questionData: questionDataForm\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 10\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 9\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 8\n          }, _this), !(isGroup !== null && isGroup !== void 0 && isGroup.status) && /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Gi\\u1EA3i th\\xEDch \\u0111\\xE1p \\xE1n\",\n            name: \"DescribeAnswer\",\n            children: /*#__PURE__*/_jsxDEV(EditorSimple, {\n              handleChange: function handleChange(value) {\n                return getDescribeAnswer(value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 10\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 9\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 6\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(SpeakingForm, \"PcwqbjKdnfnIvF8DINty8rxNEus=\", false, function () {\n  return [useWrap, useForm, Form.useForm];\n});\n\n_c = SpeakingForm;\nexport default SpeakingForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpeakingForm\");","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/QuestionBank/QuestionFormType/SpeakingForm.tsx"],"names":["Form","React","useEffect","useState","useForm","exerciseApi","EditorSimple","useWrap","AnsID","SpeakingForm","props","isSubmit","questionData","changeIsSubmit","visible","changeData","isGroup","showNoti","reset","register","handleSubmit","control","setValue","formState","isSubmitting","errors","isSubmitted","form","questionDataForm","setQuestionDataForm","isResetEditor","setIsResetEditor","ExerciseAnswer","answerList","setAnswerList","loadAtFirst","setLoadAtFirst","onSubmit","data","e","console","log","getDataEditor","dataEditor","Content","getDescribeAnswer","DescribeAnswer","resetForm","handleSubmitQuestion","res","ID","cloneData","JSON","parse","stringify","forEach","item","index","isAdd","update","add","status","setTimeout","value"],"mappings":"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","sourcesContent":["import { Form } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { exerciseApi } from '~/apiBase/'\r\nimport EditorSimple from '~/components/Elements/EditorSimple'\r\nimport { useWrap } from '~/context/wrap'\r\n\r\nlet AnsID = 0\r\n\r\nconst SpeakingForm = (props) => {\r\n\tconst { isSubmit, questionData, changeIsSubmit, visible, changeData, isGroup } = props\r\n\tconst { showNoti } = useWrap()\r\n\tconst {\r\n\t\treset,\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\tcontrol,\r\n\t\tsetValue,\r\n\t\tformState: { isSubmitting, errors, isSubmitted }\r\n\t} = useForm()\r\n\tconst [form] = Form.useForm()\r\n\tconst [questionDataForm, setQuestionDataForm] = useState(null)\r\n\tconst [isResetEditor, setIsResetEditor] = useState(false)\r\n\tconst [answerList, setAnswerList] = useState(questionData.ExerciseAnswer)\r\n\tconst [loadAtFirst, setLoadAtFirst] = useState(true)\r\n\r\n\t// SUBMI FORM\r\n\tconst onSubmit = handleSubmit((data: any, e) => {\r\n\t\tconsole.log('DATA SUBMIT: ', data)\r\n\t})\r\n\r\n\t// GET VALUE IN EDITOR\r\n\tconst getDataEditor = (dataEditor) => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tquestionDataForm.Content = dataEditor\r\n\t\t}\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\tconst getDescribeAnswer = (dataEditor) => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tquestionDataForm.DescribeAnswer = dataEditor\r\n\t\t}\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// Reset value in form\r\n\tconst resetForm = () => {\r\n\t\tquestionDataForm.Content = ''\r\n\t\tquestionDataForm.ExerciseAnswer = []\r\n\t\tsetQuestionDataForm({ ...questionDataForm })\r\n\t}\r\n\r\n\t// SUBMIT FORM\r\n\tconst handleSubmitQuestion = async () => {\r\n\t\tlet res = null\r\n\r\n\t\ttry {\r\n\t\t\tif (questionDataForm.ID) {\r\n\t\t\t\tlet cloneData = JSON.parse(JSON.stringify(questionDataForm))\r\n\r\n\t\t\t\tcloneData.ExerciseAnswer.forEach((item, index) => {\r\n\t\t\t\t\tif (item.isAdd) {\r\n\t\t\t\t\t\tdelete item.ID\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tres = await exerciseApi.update(cloneData)\r\n\t\t\t} else {\r\n\t\t\t\tres = await exerciseApi.add(questionDataForm)\r\n\t\t\t}\r\n\t\t\tif (res.status == 200) {\r\n\t\t\t\tchangeIsSubmit(questionDataForm.ID ? questionDataForm : res.data.data)\r\n\t\t\t\tshowNoti('success', `${questionDataForm.ID ? 'Cập nhật' : 'Thêm'} Thành công`)\r\n\t\t\t\tif (!questionDataForm.ID) {\r\n\t\t\t\t\tresetForm()\r\n\t\t\t\t}\r\n\t\t\t\tsetIsResetEditor(true)\r\n\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tsetIsResetEditor(false)\r\n\t\t\t\t}, 500)\r\n\t\t\t}\r\n\t\t} catch (error) {}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tisSubmit && handleSubmitQuestion()\r\n\t}, [isSubmit])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (visible) {\r\n\t\t\tif (!questionData.ID) {\r\n\t\t\t\tquestionData.Content = ''\r\n\t\t\t}\r\n\t\t\tsetQuestionDataForm({ ...questionData })\r\n\t\t} else {\r\n\t\t\tsetQuestionDataForm(null)\r\n\t\t\tsetLoadAtFirst(true)\r\n\t\t}\r\n\t}, [visible])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (questionDataForm) {\r\n\t\t\tif (!loadAtFirst) {\r\n\t\t\t\tchangeData && changeData()\r\n\t\t\t}\r\n\t\t\tsetLoadAtFirst(false)\r\n\t\t}\r\n\t}, [questionDataForm])\r\n\r\n\treturn (\r\n\t\t<div className=\"form-create-question\">\r\n\t\t\t{visible && questionDataForm && (\r\n\t\t\t\t<Form form={form} layout=\"vertical\" onFinish={onSubmit}>\r\n\t\t\t\t\t<div className=\"container-fluid\">\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<Form.Item name=\"Question\" label=\"Câu hỏi\">\r\n\t\t\t\t\t\t\t\t\t<EditorSimple\r\n\t\t\t\t\t\t\t\t\t\tisTranslate={true}\r\n\t\t\t\t\t\t\t\t\t\thandleChange={(value) => getDataEditor(value)}\r\n\t\t\t\t\t\t\t\t\t\tisReset={isResetEditor}\r\n\t\t\t\t\t\t\t\t\t\tquestionContent={questionDataForm?.Content}\r\n\t\t\t\t\t\t\t\t\t\tquestionData={questionDataForm}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t{/* <div className=\"col-12\">\r\n                <Form.Item label=\"File nghe\">\r\n                  <UploadAudio\r\n                    getFile={(file) => {\r\n                      questionDataForm.LinkAudio = file;\r\n                      setQuestionDataForm({ ...questionDataForm });\r\n                    }}\r\n                    valueFile={questionDataForm?.LinkAudio}\r\n                  />\r\n                </Form.Item>\r\n              </div> */}\r\n\r\n\t\t\t\t\t\t\t{!isGroup?.status && (\r\n\t\t\t\t\t\t\t\t<Form.Item label=\"Giải thích đáp án\" name=\"DescribeAnswer\">\r\n\t\t\t\t\t\t\t\t\t<EditorSimple handleChange={(value: any) => getDescribeAnswer(value)} />\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Form>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SpeakingForm\r\n"]},"metadata":{},"sourceType":"module"}