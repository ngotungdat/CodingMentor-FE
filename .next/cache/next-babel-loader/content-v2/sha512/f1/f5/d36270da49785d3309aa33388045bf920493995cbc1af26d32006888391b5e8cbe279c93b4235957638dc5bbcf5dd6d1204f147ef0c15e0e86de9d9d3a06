{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\pages\\\\option\\\\grade\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport PowerTable from '~/components/PowerTable';\nimport { Tooltip, Switch } from 'antd';\nimport GradeForm from '~/components/Global/Option/GradeForm';\nimport FilterColumn from '~/components/Tables/FilterColumn';\nimport SortBox from '~/components/Elements/SortBox';\nimport LayoutBase from '~/components/LayoutBase';\nimport { gradeApi } from '~/apiBase';\nimport { useWrap } from '~/context/wrap';\nimport moment from 'moment';\nlet pageIndex = 1;\nlet listFieldSearch = {\n  pageIndex: 1,\n  GradeCode: null,\n  GradeName: null\n};\nconst dataOption = [{\n  dataSort: {\n    sort: 0,\n    sortType: false\n  },\n  text: 'Tên giảm dần'\n}, {\n  dataSort: {\n    sort: 0,\n    sortType: true\n  },\n  text: 'Tên tăng dần '\n}];\n\nconst Grade = () => {\n  // ------ BASE USESTATE TABLE -------\n  const {\n    0: dataSource,\n    1: setDataSource\n  } = useState([]);\n  const {\n    showNoti,\n    pageSize\n  } = useWrap();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    0: indexRow,\n    1: setIndexRow\n  } = useState(null);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const listTodoApi = {\n    pageSize: pageSize,\n    pageIndex: pageIndex,\n    sort: null,\n    sortType: null,\n    GradeCode: null,\n    GradeName: null\n  };\n  const {\n    0: todoApi,\n    1: setTodoApi\n  } = useState(listTodoApi); // GET DATA SOURCE\n\n  const getDataSource = async () => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      let res = await gradeApi.getAll(todoApi);\n      res.status == 200 && (setDataSource(res.data.data), setTotalPage(res.data.totalRow), showNoti('success', 'Thành công'));\n      res.status == 204 && showNoti('danger', 'Không có dữ liệu') && setDataSource([]);\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  }; // ---------------- AFTER SUBMIT -----------------\n\n\n  const afterPost = mes => {\n    showNoti('success', mes);\n    setTodoApi(_objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1\n    }));\n    setCurrentPage(1);\n  }; // ----------------- ON SUBMIT --------------------\n\n\n  const _onSubmit = async dataSubmit => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res = null;\n\n    if (dataSubmit.ID) {\n      try {\n        res = await gradeApi.update(dataSubmit);\n\n        if (res.status == 200) {\n          let newDataSource = [...dataSource];\n          newDataSource.splice(indexRow, 1, dataSubmit);\n          setDataSource(newDataSource);\n          showNoti('success', res.data.message);\n        }\n      } catch (error) {\n        console.log('error: ', error);\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'ADD_DATA',\n          status: false\n        });\n      }\n    } else {\n      try {\n        var _res;\n\n        res = await gradeApi.add(dataSubmit);\n        ((_res = res) === null || _res === void 0 ? void 0 : _res.status) == 200 && afterPost(res.data.message);\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'ADD_DATA',\n          status: false\n        });\n      }\n    }\n\n    return res;\n  }; // ----------------- TURN OF ------------------------\n\n\n  const changeStatus = async (checked, idRow) => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n    let dataChange = {\n      ID: idRow,\n      Enable: checked\n    };\n\n    try {\n      let res = await gradeApi.update(dataChange);\n      res.status == 200 && setTodoApi(_objectSpread({}, todoApi));\n    } catch (error) {\n      showNoti('danger', error.Message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  }; // --------------- HANDLE SORT ----------------------\n\n\n  const handleSort = async option => {\n    let newTodoApi = _objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1,\n      sort: option.title.sort,\n      sortType: option.title.sortType\n    });\n\n    setCurrentPage(1), setTodoApi(newTodoApi);\n  }; // ------------ ON SEARCH -----------------------\n\n\n  const checkField = (valueSearch, dataIndex) => {\n    let newList = _objectSpread({}, listFieldSearch);\n\n    Object.keys(newList).forEach(function (key) {\n      console.log('key: ', key);\n\n      if (key != dataIndex) {\n        if (key != 'pageIndex') {\n          newList[key] = null;\n        }\n      } else {\n        newList[key] = valueSearch;\n      }\n    });\n    console.log('new list: ', newList);\n    return newList;\n  };\n\n  console.log('Todo API: ', todoApi);\n  console.log('list search: ', listFieldSearch);\n\n  const onSearch = (valueSearch, dataIndex) => {\n    let clearKey = checkField(valueSearch, dataIndex);\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), clearKey));\n  }; // HANDLE RESET\n\n\n  const resetListFieldSearch = () => {\n    Object.keys(listFieldSearch).forEach(function (key) {\n      if (key != 'pageIndex') {\n        listFieldSearch[key] = null;\n      }\n    });\n  };\n\n  const handleReset = () => {\n    setTodoApi(_objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1\n    }));\n    setCurrentPage(1), resetListFieldSearch();\n  }; // -------------- GET PAGE_NUMBER -----------------\n\n\n  const getPagination = pageNumber => {\n    pageIndex = pageNumber;\n    setCurrentPage(pageNumber);\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), {}, {\n      // ...listFieldSearch,\n      pageIndex: pageIndex\n    }));\n  }; // ============== USE EFFECT - FETCH DATA ===================\n\n\n  useEffect(() => {\n    getDataSource();\n  }, [todoApi]); // Columns\n\n  const columns = [_objectSpread({\n    title: 'Mã khối',\n    dataIndex: 'GradeCode'\n  }, FilterColumn('GradeCode', onSearch, handleReset, 'text')), _objectSpread({\n    title: 'Tên khối',\n    dataIndex: 'GradeName'\n  }, FilterColumn('GradeName', onSearch, handleReset, 'text')), {\n    title: 'Ghi chú',\n    dataIndex: 'Description'\n  }, {\n    title: 'Tạo ngày',\n    dataIndex: 'CreatedOn',\n    render: date => moment(date).format('DD/MM/YYYY')\n  }, {\n    title: 'Trạng thái',\n    dataIndex: 'Enable',\n    render: (Enable, record) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        checkedChildren: \"Hi\\u1EC7n\",\n        unCheckedChildren: \"\\u1EA8n\",\n        checked: Enable,\n        size: \"default\",\n        onChange: checked => changeStatus(checked, record.ID)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 6\n      }, this)\n    }, void 0, false)\n  }, {\n    render: (text, data, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"C\\u1EADp nh\\u1EADt trung t\\xE2m\",\n        children: /*#__PURE__*/_jsxDEV(GradeForm, {\n          getIndex: () => setIndexRow(index),\n          index: index,\n          rowData: data,\n          rowID: data.ID,\n          isLoading: isLoading,\n          _onSubmit: data => _onSubmit(data)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 6\n      }, this)\n    }, void 0, false)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PowerTable, {\n      currentPage: currentPage,\n      totalPage: totalPage && totalPage,\n      getPagination: pageNumber => getPagination(pageNumber),\n      loading: isLoading,\n      addClass: \"basic-header\",\n      TitlePage: \"Danh s\\xE1ch kh\\u1ED1i h\\u1ECDc\",\n      TitleCard: /*#__PURE__*/_jsxDEV(GradeForm, {\n        isLoading: isLoading,\n        _onSubmit: data => _onSubmit(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 16\n      }, this),\n      dataSource: dataSource,\n      columns: columns,\n      Extra: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"extra-table\",\n        children: /*#__PURE__*/_jsxDEV(SortBox, {\n          handleSort: value => handleSort(value),\n          dataOption: dataOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\nGrade.layout = LayoutBase;\nexport default Grade;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/pages/option/grade/index.tsx"],"names":["React","useEffect","useState","PowerTable","Tooltip","Switch","GradeForm","FilterColumn","SortBox","LayoutBase","gradeApi","useWrap","moment","pageIndex","listFieldSearch","GradeCode","GradeName","dataOption","dataSort","sort","sortType","text","Grade","dataSource","setDataSource","showNoti","pageSize","isLoading","setIsLoading","type","status","totalPage","setTotalPage","indexRow","setIndexRow","currentPage","setCurrentPage","listTodoApi","todoApi","setTodoApi","getDataSource","res","getAll","data","totalRow","error","message","afterPost","mes","_onSubmit","dataSubmit","ID","update","newDataSource","splice","console","log","add","changeStatus","checked","idRow","dataChange","Enable","Message","handleSort","option","newTodoApi","title","checkField","valueSearch","dataIndex","newList","Object","keys","forEach","key","onSearch","clearKey","resetListFieldSearch","handleReset","getPagination","pageNumber","columns","render","date","format","record","index","value","layout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport PowerTable from '~/components/PowerTable'\r\nimport { Tooltip, Switch } from 'antd'\r\nimport GradeForm from '~/components/Global/Option/GradeForm'\r\nimport FilterColumn from '~/components/Tables/FilterColumn'\r\nimport SortBox from '~/components/Elements/SortBox'\r\nimport LayoutBase from '~/components/LayoutBase'\r\nimport { gradeApi } from '~/apiBase'\r\nimport { useWrap } from '~/context/wrap'\r\nimport moment from 'moment'\r\n\r\nlet pageIndex = 1\r\n\r\nlet listFieldSearch = {\r\n\tpageIndex: 1,\r\n\tGradeCode: null,\r\n\tGradeName: null\r\n}\r\n\r\nconst dataOption = [\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 0,\r\n\t\t\tsortType: false\r\n\t\t},\r\n\t\ttext: 'Tên giảm dần'\r\n\t},\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 0,\r\n\t\t\tsortType: true\r\n\t\t},\r\n\t\ttext: 'Tên tăng dần '\r\n\t}\r\n]\r\n\r\nconst Grade = () => {\r\n\t// ------ BASE USESTATE TABLE -------\r\n\tconst [dataSource, setDataSource] = useState<IGrade[]>([])\r\n\tconst { showNoti, pageSize } = useWrap()\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t})\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\tconst [indexRow, setIndexRow] = useState(null)\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\tconst listTodoApi = {\r\n\t\tpageSize: pageSize,\r\n\t\tpageIndex: pageIndex,\r\n\t\tsort: null,\r\n\t\tsortType: null,\r\n\t\tGradeCode: null,\r\n\t\tGradeName: null\r\n\t}\r\n\tconst [todoApi, setTodoApi] = useState(listTodoApi)\r\n\r\n\t// GET DATA SOURCE\r\n\tconst getDataSource = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await gradeApi.getAll(todoApi)\r\n\t\t\tres.status == 200 && (setDataSource(res.data.data), setTotalPage(res.data.totalRow), showNoti('success', 'Thành công'))\r\n\t\t\tres.status == 204 && showNoti('danger', 'Không có dữ liệu') && setDataSource([])\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// ---------------- AFTER SUBMIT -----------------\r\n\tconst afterPost = (mes) => {\r\n\t\tshowNoti('success', mes)\r\n\t\tsetTodoApi({\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1\r\n\t\t})\r\n\t\tsetCurrentPage(1)\r\n\t}\r\n\r\n\t// ----------------- ON SUBMIT --------------------\r\n\tconst _onSubmit = async (dataSubmit: any) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\tlet res = null\r\n\r\n\t\tif (dataSubmit.ID) {\r\n\t\t\ttry {\r\n\t\t\t\tres = await gradeApi.update(dataSubmit)\r\n\r\n\t\t\t\tif (res.status == 200) {\r\n\t\t\t\t\tlet newDataSource = [...dataSource]\r\n\t\t\t\t\tnewDataSource.splice(indexRow, 1, dataSubmit)\r\n\t\t\t\t\tsetDataSource(newDataSource)\r\n\t\t\t\t\tshowNoti('success', res.data.message)\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log('error: ', error)\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tres = await gradeApi.add(dataSubmit)\r\n\t\t\t\tres?.status == 200 && afterPost(res.data.message)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn res\r\n\t}\r\n\r\n\t// ----------------- TURN OF ------------------------\r\n\tconst changeStatus = async (checked: boolean, idRow: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\tlet dataChange = {\r\n\t\t\tID: idRow,\r\n\t\t\tEnable: checked\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await gradeApi.update(dataChange)\r\n\t\t\tres.status == 200 && setTodoApi({ ...todoApi })\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.Message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// --------------- HANDLE SORT ----------------------\r\n\tconst handleSort = async (option) => {\r\n\t\tlet newTodoApi = {\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1,\r\n\t\t\tsort: option.title.sort,\r\n\t\t\tsortType: option.title.sortType\r\n\t\t}\r\n\t\tsetCurrentPage(1), setTodoApi(newTodoApi)\r\n\t}\r\n\r\n\t// ------------ ON SEARCH -----------------------\r\n\r\n\tconst checkField = (valueSearch, dataIndex) => {\r\n\t\tlet newList = { ...listFieldSearch }\r\n\t\tObject.keys(newList).forEach(function (key) {\r\n\t\t\tconsole.log('key: ', key)\r\n\t\t\tif (key != dataIndex) {\r\n\t\t\t\tif (key != 'pageIndex') {\r\n\t\t\t\t\tnewList[key] = null\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnewList[key] = valueSearch\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconsole.log('new list: ', newList)\r\n\t\treturn newList\r\n\t}\r\n\r\n\tconsole.log('Todo API: ', todoApi)\r\n\tconsole.log('list search: ', listFieldSearch)\r\n\r\n\tconst onSearch = (valueSearch, dataIndex) => {\r\n\t\tlet clearKey = checkField(valueSearch, dataIndex)\r\n\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t...clearKey\r\n\t\t})\r\n\t}\r\n\r\n\t// HANDLE RESET\r\n\tconst resetListFieldSearch = () => {\r\n\t\tObject.keys(listFieldSearch).forEach(function (key) {\r\n\t\t\tif (key != 'pageIndex') {\r\n\t\t\t\tlistFieldSearch[key] = null\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetTodoApi({\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1\r\n\t\t})\r\n\t\tsetCurrentPage(1), resetListFieldSearch()\r\n\t}\r\n\r\n\t// -------------- GET PAGE_NUMBER -----------------\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tpageIndex = pageNumber\r\n\t\tsetCurrentPage(pageNumber)\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t// ...listFieldSearch,\r\n\t\t\tpageIndex: pageIndex\r\n\t\t})\r\n\t}\r\n\r\n\t// ============== USE EFFECT - FETCH DATA ===================\r\n\tuseEffect(() => {\r\n\t\tgetDataSource()\r\n\t}, [todoApi])\r\n\r\n\t// Columns\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Mã khối',\r\n\t\t\tdataIndex: 'GradeCode',\r\n\t\t\t...FilterColumn('GradeCode', onSearch, handleReset, 'text')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Tên khối',\r\n\t\t\tdataIndex: 'GradeName',\r\n\t\t\t...FilterColumn('GradeName', onSearch, handleReset, 'text')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Ghi chú',\r\n\t\t\tdataIndex: 'Description'\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\ttitle: 'Tạo ngày',\r\n\t\t\tdataIndex: 'CreatedOn',\r\n\t\t\trender: (date: any) => moment(date).format('DD/MM/YYYY')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\tdataIndex: 'Enable',\r\n\t\t\trender: (Enable, record) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Switch\r\n\t\t\t\t\t\tcheckedChildren=\"Hiện\"\r\n\t\t\t\t\t\tunCheckedChildren=\"Ẩn\"\r\n\t\t\t\t\t\tchecked={Enable}\r\n\t\t\t\t\t\tsize=\"default\"\r\n\t\t\t\t\t\tonChange={(checked) => changeStatus(checked, record.ID)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\trender: (text, data, index) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Tooltip title=\"Cập nhật trung tâm\">\r\n\t\t\t\t\t\t<GradeForm\r\n\t\t\t\t\t\t\tgetIndex={() => setIndexRow(index)}\r\n\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t\trowData={data}\r\n\t\t\t\t\t\t\trowID={data.ID}\r\n\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t_onSubmit={(data: any) => _onSubmit(data)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t}\r\n\t]\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<PowerTable\r\n\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\ttotalPage={totalPage && totalPage}\r\n\t\t\t\tgetPagination={(pageNumber: number) => getPagination(pageNumber)}\r\n\t\t\t\tloading={isLoading}\r\n\t\t\t\taddClass=\"basic-header\"\r\n\t\t\t\tTitlePage=\"Danh sách khối học\"\r\n\t\t\t\tTitleCard={<GradeForm isLoading={isLoading} _onSubmit={(data: any) => _onSubmit(data)} />}\r\n\t\t\t\tdataSource={dataSource}\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tExtra={\r\n\t\t\t\t\t<div className=\"extra-table\">\r\n\t\t\t\t\t\t<SortBox handleSort={(value) => handleSort(value)} dataOption={dataOption} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t</>\r\n\t)\r\n}\r\nGrade.layout = LayoutBase\r\nexport default Grade\r\n"]},"metadata":{},"sourceType":"module"}