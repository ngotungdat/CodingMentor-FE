{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\CodingMentor\\\\CodingMentor-FE\\\\src\\\\components\\\\Global\\\\CreateCourse\\\\CreateCourse.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card } from 'antd';\nimport moment from 'moment';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { branchApi, checkRoomApi, checkTeacherApi, courseApi, curriculumApi, gradeApi, lessonApi, programApi, roomApi, staffApi, studyDayApi, studyTimeApi } from '~/apiBase';\nimport CreateCourseForm from '~/components/Global/CreateCourse/CreateCourseForm/CreateCourseForm';\nimport SaveCreateCourse from '~/components/Global/CreateCourse/SaveCreateCourse';\nimport TitlePage from '~/components/TitlePage';\nimport { useDebounce } from '~/context/useDebounce';\nimport { useWrap } from '~/context/wrap';\nimport { fmArrayToObjectWithSpecialKey, fmSelectArr } from '~/utils/functions';\nimport CreateCourseCalendar from './Calendar/CreateCourseCalendar';\nimport Schedule from './Schedule/Schedule';\nimport ScheduleItem from './Schedule/ScheduleItem';\nimport ScheduleList from './Schedule/ScheduleList'; // ------------ MAIN COMPONENT ------------------\n\nconst dayOfWeek = [{\n  title: 'Thứ 2',\n  value: 1\n}, {\n  title: 'Thứ 3',\n  value: 2\n}, {\n  title: 'Thứ 4',\n  value: 3\n}, {\n  title: 'Thứ 5',\n  value: 4\n}, {\n  title: 'Thứ 6',\n  value: 5\n}, {\n  title: 'Thứ 7',\n  value: 6\n}, {\n  title: 'Chủ nhật',\n  value: 0\n}];\n\nconst CreateCourse = () => {\n  const router = useRouter(); // -----------STATE-----------\n  // FORM\n\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: optionListForForm,\n    1: setOptionListForForm\n  } = useState({\n    branchList: [],\n    studyTimeList: [],\n    gradeList: [],\n    programList: [],\n    dayOfWeek,\n    curriculumList: [],\n    userInformationList: [],\n    roomList: []\n  });\n  const stoneStudyTimeList = useRef(optionListForForm.studyTimeList);\n  const {\n    0: dataToFetchCurriculum,\n    1: setDataToFetchCurriculum\n  } = useState({\n    StudyTimeID: null,\n    ProgramID: null\n  }); //Lesson\n\n  const {\n    0: scheduleList,\n    1: setScheduleList\n  } = useState({\n    available: [],\n    unavailable: [],\n    endDate: ''\n  });\n  const {\n    0: optionListForADay,\n    1: setOptionListForADay\n  } = useState({\n    optionStudyTimeList: [],\n    list: [{\n      optionRoomList: [],\n      optionTeacherList: []\n    }]\n  }); //StudyDay\n\n  const {\n    0: calendarList,\n    1: setCalendarList\n  } = useState([]); // SAVE\n\n  const {\n    0: isSave,\n    1: setIsSave\n  } = useState(false);\n  const {\n    0: scheduleShow,\n    1: setScheduleShow\n  } = useState({});\n  const stoneDataToSave = useRef({\n    CourseName: '',\n    AcademicUID: 0,\n    BranchID: 0,\n    RoomID: '',\n    CurriculumID: 0,\n    ProgramID: 0,\n    StartDay: '',\n    GradeID: 0,\n    DaySelected: '',\n    StudyTimeID: ''\n  });\n  const {\n    0: saveCourseInfo,\n    1: setSaveCourseInfo\n  } = useState({\n    CourseName: '',\n    AcademicUID: 0,\n    BranchID: 0,\n    BranchName: '',\n    GradeID: 0,\n    RoomID: '',\n    RoomName: '',\n    StudyTimeID: '',\n    StudyTimeName: '',\n    ProgramID: 0,\n    ProgramName: '',\n    CurriculumID: 0,\n    CurriculumName: '',\n    StartDay: '',\n    EndDay: '',\n    DaySelected: '',\n    DaySelectedName: '',\n    TypeCourse: 1,\n    Schedule: []\n  }); // CALENDAR MODAL\n\n  const {\n    0: dataModalCalendar,\n    1: setDataModalCalendar\n  } = useState({\n    dateString: '',\n    limit: 0,\n    scheduleInDay: 0,\n    scheduleList: []\n  }); // -----------CREATE COURSE FORM-----------\n  // FETCH BRANCH, STUDY TIME, GRADE IN THE FIRST TIME\n\n  const fetchData = async () => {\n    setIsLoading({\n      type: 'FETCH_DATA',\n      status: true\n    });\n\n    try {\n      const [branch, studyTime, grade] = await Promise.all([branchApi.getAll({\n        pageIndex: 1,\n        pageSize: 9999\n      }), studyTimeApi.getAll({\n        selectAll: true\n      }), gradeApi.getAll({\n        selectAll: true\n      })]); // BRANCH\n\n      const newBranchList = fmSelectArr(branch.data.data, 'BranchName', 'ID'); // STUDY TIME\n\n      const newStudyTimeList = fmSelectArr(studyTime.data.data, 'Name', 'ID', ['Time', 'TimeStart', 'TimeEnd']);\n      stoneStudyTimeList.current = newStudyTimeList; // GRADE\n\n      const newGradeList = fmSelectArr(grade.data.data, 'GradeName', 'ID');\n      setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n        branchList: newBranchList,\n        studyTimeList: newStudyTimeList,\n        gradeList: newGradeList\n      }));\n    } catch (error) {\n      console.log('fetchData - PromiseAll:', error);\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'FETCH_DATA',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []); // FETCH ROOM AND USER INFORMATION\n\n  const fetchDataByBranch = async id => {\n    setIsLoading({\n      type: 'BranchID',\n      status: true\n    });\n\n    try {\n      const params = {\n        BranchID: id\n      };\n      const [user, room] = await Promise.all([staffApi.getAll(_objectSpread(_objectSpread({}, params), {}, {\n        RoleID: 7\n      })), roomApi.getAll(params)]); // USER INFORMATION\n\n      const rs = {\n        userInformationList: [],\n        roomList: []\n      };\n\n      if (user.status === 200) {\n        const newUserInformationList = fmSelectArr(user.data.data, 'FullNameUnicode', 'UserInformationID');\n        rs.userInformationList = newUserInformationList;\n      }\n\n      if (user.status === 204) {\n        rs.userInformationList = [];\n      } // ROOM\n\n\n      if (room.status === 200) {\n        const newRoomList = fmSelectArr(room.data.data, 'RoomName', 'RoomID', ['RoomCode']);\n        const newRoomListFmName = newRoomList.map(r => _objectSpread(_objectSpread({}, r), {}, {\n          title: `${r.options.RoomCode} - ${r.title}`\n        }));\n        rs.roomList = newRoomListFmName;\n      }\n\n      if (room.status === 204) {\n        rs.roomList = [];\n      }\n\n      setOptionListForForm(preState => _objectSpread(_objectSpread({}, preState), rs));\n    } catch (error) {\n      console.log('FetchDataByBranch - PromiseAll:', error);\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'BranchID',\n        status: false\n      });\n    }\n  }; // PROGRAM\n\n\n  const fetchProgramByGrade = async id => {\n    setIsLoading({\n      type: 'GradeID',\n      status: true\n    });\n\n    try {\n      const res = await programApi.getAll({\n        GradeID: id\n      });\n\n      if (res.status === 200) {\n        const newProgramList = fmSelectArr(res.data.data, 'ProgramName', 'ID');\n        setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n          programList: newProgramList\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n          programList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GradeID',\n        status: false\n      });\n    }\n  }; // CURRICULUM\n\n\n  const checkStudyTime = async value => {\n    if (!(value !== null && value !== void 0 && value.length)) {\n      setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n        studyTimeList: stoneStudyTimeList.current\n      }));\n      return;\n    }\n\n    const newStudyTimeList = [...optionListForForm.studyTimeList];\n    let rs;\n    const studyTimeSelected = [];\n\n    for (let i = 0; i < value.length; i++) {\n      const timeObjBase = newStudyTimeList.find(s => s.value === value[i]);\n      const s1 = +timeObjBase.options.TimeStart.replace(':', '');\n      const e1 = +timeObjBase.options.TimeEnd.replace(':', '');\n      const t1 = +timeObjBase.options.Time;\n      rs = newStudyTimeList.filter(st => {\n        const s2 = +st.options.TimeStart.replace(':', '');\n        const e2 = +st.options.TimeEnd.replace(':', '');\n        const t2 = +st.options.Time;\n\n        if (timeObjBase.value === st.value) {\n          studyTimeSelected.push(st);\n          return st;\n        }\n\n        if ( // KIỂM TRA MỖI CA HỌC KHÔNG CÓ THỜI GIAN TRÙNG LÊN NHAU\n        !(s1 < s2 && e1 > e2 && s1 < e2 || s1 > s2 && e1 > e2 && s1 < e2 || s1 < s2 && e1 < e2 && e1 > s2 || s1 > s2 && e1 < e2) && t1 === t2) {\n          return st;\n        }\n      });\n    }\n\n    setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n      studyTimeList: rs\n    }));\n    setOptionListForADay(_objectSpread(_objectSpread({}, optionListForADay), {}, {\n      optionStudyTimeList: studyTimeSelected\n    }));\n  }; // GET ENOUGH 2 VALUE TO GET CURRICULUM - NEED PROGRAM ID - STUDY TIME ID\n\n\n  const getValueBeforeFetchCurriculum = async (key, value) => {\n    setDataToFetchCurriculum(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [key]: value\n    }));\n  };\n\n  const fetchCurriculum = async () => {\n    setIsLoading({\n      type: 'ProgramID',\n      status: true\n    });\n\n    try {\n      const res = await curriculumApi.getAll({\n        StudyTimeID: dataToFetchCurriculum.StudyTimeID.join(','),\n        ProgramID: dataToFetchCurriculum.ProgramID\n      });\n\n      if (res.status === 200) {\n        const newCurriculum = fmSelectArr(res.data.data, 'CurriculumName', 'ID');\n        setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n          curriculumList: newCurriculum\n        }));\n      }\n\n      if (res.status === 204) {\n        setOptionListForForm(_objectSpread(_objectSpread({}, optionListForForm), {}, {\n          curriculumList: []\n        }));\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ProgramID',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (dataToFetchCurriculum.ProgramID && dataToFetchCurriculum.StudyTimeID) {\n      fetchCurriculum();\n    }\n  }, [dataToFetchCurriculum]); // GET COURSE\n\n  const getCourse = async object => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n\n    try {\n      const {\n        RoomID,\n        BranchID,\n        CurriculumID,\n        StartDay: StartDate,\n        StudyTimeID,\n        DaySelected,\n        ProgramID,\n        GradeID,\n        CourseName,\n        UserInformationID\n      } = object;\n      stoneDataToSave.current = {\n        CourseName,\n        AcademicUID: UserInformationID,\n        BranchID,\n        RoomID: RoomID.join(','),\n        CurriculumID,\n        ProgramID,\n        GradeID,\n        StartDay: StartDate,\n        DaySelected: DaySelected.join(','),\n        StudyTimeID: StudyTimeID.join(',')\n      };\n      const lessonParams = {\n        CurriculumnID: CurriculumID,\n        StartDate,\n        StudyTimeID: StudyTimeID.join(','),\n        RoomID: RoomID.join(','),\n        BranchID,\n        DaySelected: DaySelected.join(',')\n      };\n      const studyDayParams = {\n        BranchID,\n        StudyTimeID: StudyTimeID.join(','),\n        StartDate,\n        DaySelected: DaySelected.join(','),\n        RoomID: RoomID.join(',')\n      };\n      const arrRes = await Promise.all([lessonApi.getAll(lessonParams), studyDayApi.getAll(studyDayParams)]).then(([lessonList, studyDayList]) => {\n        if (lessonList.status === 200) {\n          setScheduleList({\n            endDate: '',\n            available: [],\n            unavailable: lessonList.data.schedule\n          });\n        }\n\n        studyDayList.status === 200 && setCalendarList(studyDayList.data.data);\n\n        if (lessonList.status === 200 && studyDayList.status === 200) {\n          setIsSave(true);\n          checkStudyTime(null);\n          showNoti('success', 'Thành công');\n          return true;\n        }\n      }).catch(error => {\n        error.status === 400 && showNoti('danger', error.message);\n      });\n      return arrRes;\n    } catch (error) {\n      showNoti('error', error.message);\n    } finally {\n      setIsLoading({\n        type: 'ADD_DATA',\n        status: false\n      });\n    }\n  }; // -----------SCHEDULE-----------\n  // FETCH DATA FOR SELECT SCHEDULE\n\n\n  const fetchInfoAvailableSchedule = async arrSchedule => {\n    const {\n      BranchID,\n      RoomID\n    } = stoneDataToSave.current; // SPLIT SCHEDULE TO 2 OBJECT TO CALL 2 API\n    // paramsArr = [ {Schedule-*: [{params teacher}, {params room}]} ]\n\n    const paramsArr = arrSchedule.map(({\n      CaID,\n      Tiet\n    }, idx) => {\n      const dateFm = moment(dataModalCalendar.dateString).format('YYYY/MM/DD');\n      const {\n        SubjectID\n      } = Tiet;\n      return {\n        [`Schedule-${idx + 1}`]: [// TEACHER\n        {\n          BranchID,\n          SubjectID,\n          StudyTimeID: CaID,\n          Date: dateFm\n        }, // ROOM\n        {\n          BranchID,\n          Rooms: RoomID,\n          StudyTimeID: CaID,\n          Date: dateFm\n        }]\n      };\n    });\n\n    try {\n      if (!paramsArr.length) return; // promises = [ {checkTeacher promise}, {checkRoom promise} ]\n\n      const promises = paramsArr.map((obj, idx1) => {\n        return obj[`Schedule-${idx1 + 1}`].map((p, idx2) => idx2 % 2 === 0 ? checkTeacherApi.getAll(p) : checkRoomApi.getAll(p));\n      }).flat(1);\n      await Promise.all(promises).then(res => {\n        //res = [ {data teacher}, {data room} ]\n        //newRes = [ [{data teacher}, {data room}] ]\n        const newRes = [];\n\n        for (let i = 0, len = res.length; i < len; i += 2) {\n          newRes.push([res[i], res[i + 1]]);\n        } // newOptionForSchedule = [ {optionRoomList:[], optionTeacherList:[]} ]\n\n\n        const newOptionForSchedule = newRes.map(r => {\n          const teacherList = r[0];\n          const roomList = r[1];\n          const rs = {\n            optionRoomList: [{\n              title: '---Chọn phòng---',\n              value: 0\n            }],\n            optionTeacherList: [{\n              title: '---Chọn giáo viên---',\n              value: 0\n            }]\n          };\n\n          if (teacherList.status === 200) {\n            rs.optionTeacherList = [...rs.optionTeacherList, ...fmSelectArr(teacherList.data.data, 'name', 'id', ['name'])];\n          }\n\n          if (roomList.status === 200) {\n            rs.optionRoomList = [...rs.optionRoomList, ...fmSelectArr(roomList.data.data, 'name', 'id', ['name'])];\n          }\n\n          return rs;\n        });\n        setOptionListForADay(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n          list: newOptionForSchedule\n        }));\n      }).catch(err => console.log('fetchInfoAvailableSchedule - PromiseAll:', err));\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'CHECK_SCHEDULE',\n        status: false\n      });\n    }\n  };\n\n  const onDebounceFetch = useDebounce(fetchInfoAvailableSchedule, 300, []);\n\n  const onDebounceFetchInfoAvailableSchedule = params => {\n    setIsLoading({\n      type: 'CHECK_SCHEDULE',\n      status: true\n    });\n    onDebounceFetch(params);\n  };\n\n  const checkDuplicateStudyTimeInDay = (arr, vl) => {\n    const scheduleSameStudyTime = arr.filter(s => s.CaID === vl);\n\n    if (scheduleSameStudyTime.length > 1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const getNewValueForSchedule = (key, vl, pos) => {\n    var _optionListForADay$op, _optionTeacherList$fi, _optionRoomList$find;\n\n    const {\n      optionRoomList,\n      optionTeacherList\n    } = optionListForADay.list[pos];\n\n    switch (key) {\n      case 'CaID':\n        const CaName = (_optionListForADay$op = optionListForADay.optionStudyTimeList.find(o => o.value === vl)) === null || _optionListForADay$op === void 0 ? void 0 : _optionListForADay$op.title;\n        return {\n          RoomID: 0,\n          TeacherID: 0,\n          TeacherName: 'Giáo viên trống',\n          RoomName: 'Phòng trống',\n          CaName,\n          [key]: vl\n        };\n\n      case 'TeacherID':\n        const TeacherName = (_optionTeacherList$fi = optionTeacherList.find(o => o.value === vl)) === null || _optionTeacherList$fi === void 0 ? void 0 : _optionTeacherList$fi.title;\n        return {\n          TeacherName: vl ? TeacherName : 'Giáo viên trống',\n          [key]: vl\n        };\n        break;\n\n      case 'RoomID':\n        const RoomName = (_optionRoomList$find = optionRoomList.find(o => o.value === vl)) === null || _optionRoomList$find === void 0 ? void 0 : _optionRoomList$find.title;\n        return {\n          RoomName: vl ? RoomName : 'Phòng trống',\n          [key]: vl\n        };\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const getNewUnavailableScheduleList = (uid, key, vl, pos) => {\n    const {\n      unavailable\n    } = scheduleList; // DATE TO CHECK DUPLICATE VALUE\n\n    let date;\n    const rs = unavailable.map(s => {\n      if (s.ID === uid) {\n        const newVl = getNewValueForSchedule(key, vl, pos);\n        date = s.date;\n        return _objectSpread(_objectSpread({}, s), newVl);\n      } else {\n        return s;\n      }\n    });\n    return {\n      date,\n      rs\n    };\n  };\n\n  const changeValueSchedule = (uid, key, vl, pos) => {\n    const {\n      rs: newUnavailableScheduleList,\n      date\n    } = getNewUnavailableScheduleList(uid, key, vl, pos);\n\n    if (key === 'CaID') {\n      const scheduleList = newUnavailableScheduleList.filter(s => s.date === date);\n\n      if (checkDuplicateStudyTimeInDay(scheduleList, vl)) {\n        showNoti('danger', 'Dữ liệu trùng lập');\n      } else {\n        setDataModalCalendar(_objectSpread(_objectSpread({}, dataModalCalendar), {}, {\n          scheduleList: scheduleList\n        }));\n      }\n    }\n\n    setScheduleList(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      unavailable: newUnavailableScheduleList\n    }));\n  };\n\n  const changeStatusSchedule = (sch, type = 1) => {\n    const newScheduleUnavailableList = [...scheduleList.unavailable];\n    const newScheduleAvailableList = [...scheduleList.available];\n    const fmDate = moment(dataModalCalendar.dateString).format('YYYY-MM-DD');\n    const fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(newScheduleUnavailableList, 'date'); // type = 2 => unavailable to available\n\n    if (type === 2) {\n      const idx = newScheduleUnavailableList.findIndex(s => s.ID === sch.ID);\n\n      const newScheduleObj = _objectSpread(_objectSpread({}, newScheduleUnavailableList[idx]), {}, {\n        date: fmDate\n      });\n\n      newScheduleUnavailableList.splice(idx, 1);\n      newScheduleAvailableList.push(newScheduleObj);\n    } // type = 1 => available to unavailable\n\n\n    if (type === 1) {\n      var _fmScheduleUnavailabl;\n\n      const limit = calendarList.find(c => c.Day === dataModalCalendar.dateString).Limit;\n\n      if (((_fmScheduleUnavailabl = fmScheduleUnavailableToObject[fmDate]) === null || _fmScheduleUnavailabl === void 0 ? void 0 : _fmScheduleUnavailabl.length) >= limit) {\n        showNoti('danger', 'Số ca đạt giới hạn');\n        return false;\n      }\n\n      const idx = newScheduleAvailableList.findIndex(s => s.ID === sch.ID);\n\n      const newScheduleObj = _objectSpread(_objectSpread({}, newScheduleAvailableList[idx]), {}, {\n        date: fmDate\n      });\n\n      newScheduleAvailableList.splice(idx, 1);\n      newScheduleUnavailableList.push(newScheduleObj);\n    }\n\n    setScheduleList(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      available: newScheduleAvailableList,\n      unavailable: newScheduleUnavailableList\n    }));\n    return true;\n  }; // -----------CALENDAR-----------\n\n\n  const calendarDateFormat = calendarArr => {\n    const {\n      unavailable\n    } = scheduleList;\n    const fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(unavailable, 'date');\n    const rs = calendarArr.map((c, idx) => {\n      var _fmScheduleUnavailabl2;\n\n      let isValid = true;\n      let limit = c.Limit;\n      let scheduleListForADay = [];\n      let title = `Số buổi trống: ${limit}`;\n      const calendarHadSchedule = (_fmScheduleUnavailabl2 = fmScheduleUnavailableToObject[c.Day.slice(0, 10)]) === null || _fmScheduleUnavailabl2 === void 0 ? void 0 : _fmScheduleUnavailabl2.length;\n\n      if (calendarHadSchedule) {\n        limit = c.Limit - calendarHadSchedule;\n        scheduleListForADay = fmScheduleUnavailableToObject[c.Day.slice(0, 10)];\n        title = 'Click để xem chi tiết';\n      }\n\n      if (!limit) {\n        isValid = false;\n      }\n\n      return {\n        id: idx + 1,\n        title: title,\n        start: moment(c.Day).toDate(),\n        end: moment(c.Day).toDate(),\n        resource: {\n          dateString: c.Day,\n          valid: isValid,\n          limit: c.Limit,\n          scheduleList: scheduleListForADay\n        }\n      };\n    });\n    return rs;\n  };\n\n  const onToggleSchedule = (sch, type) => {\n    if (changeStatusSchedule(sch, type)) {\n      const newScheduleList = [...dataModalCalendar.scheduleList];\n      const idx = newScheduleList.findIndex(s => s.ID === sch.ID);\n\n      if (idx >= 0) {\n        newScheduleList.splice(idx, 1);\n      } else {\n        newScheduleList.push(sch);\n      }\n\n      setDataModalCalendar(_objectSpread(_objectSpread({}, dataModalCalendar), {}, {\n        scheduleInDay: newScheduleList.length,\n        scheduleList: newScheduleList\n      }));\n    }\n  };\n\n  useEffect(() => {\n    const {\n      scheduleList\n    } = dataModalCalendar;\n\n    if (scheduleList.length) {\n      onDebounceFetchInfoAvailableSchedule(scheduleList);\n    }\n  }, [dataModalCalendar]); // -----------SAVE COURSE-----------\n\n  const getTitle = (arr, vl) => arr.find(p => p.value === vl).title;\n\n  const getMultiTitle = (arrList, arrVl) => {\n    const rs = [];\n\n    for (const r1 of arrVl.split(',')) {\n      for (const r2 of arrList) {\n        if (+r1 === r2.value) {\n          rs.push(r2.title);\n          break;\n        }\n      }\n    }\n\n    return rs.join(', ');\n  };\n\n  const onValidateDateToSave = () => {\n    const {\n      unavailable\n    } = scheduleList;\n    const rs = {\n      show: [],\n      save: [],\n      endDate: 0\n    };\n\n    for (let i = 0, len = unavailable.length; i < len; i++) {\n      const s = unavailable[i]; // get end date of course\n\n      const checkEndDay = moment(s.date).valueOf();\n\n      if (rs.endDate < checkEndDay) {\n        rs.endDate = checkEndDay;\n      }\n\n      const dayArr = ['Chủ Nhật', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'];\n      const dayOffWeek = dayArr[moment(s.date).day()];\n      let isValid = !s.RoomID || !s.TeacherID;\n\n      for (let i2 = 0; i2 < len; i2++) {\n        const s2 = scheduleList.unavailable[i2];\n\n        if (i !== i2 && s.date === s2.date && s.CaID === s2.CaID) {\n          isValid = true;\n        }\n      }\n\n      rs.show.push({\n        date: s.date,\n        dayOffWeek,\n        studyTimeName: s.CaName,\n        roomName: s.RoomName,\n        teacherName: s.TeacherName,\n        StudyTimeID: s.CaID,\n        isValid\n      });\n      rs.save.push({\n        CurriculumsDetailID: s.Tiet.CurriculumsDetailID,\n        Date: s.date,\n        StudyTimeID: s.CaID,\n        RoomID: s.RoomID,\n        TeacherID: s.TeacherID,\n        SubjectID: s.Tiet.SubjectID\n      });\n    }\n\n    return rs;\n  };\n\n  const onFetchDataToSave = () => {\n    const {\n      branchList,\n      programList,\n      curriculumList,\n      studyTimeList,\n      roomList\n    } = optionListForForm;\n    const {\n      show,\n      save,\n      endDate\n    } = onValidateDateToSave();\n    const scheduleListSorted = show.sort((a, b) => moment(a.date).valueOf() - moment(b.date).valueOf());\n    const fmScheduleShowToObject = fmArrayToObjectWithSpecialKey(scheduleListSorted, 'date');\n    const {\n      BranchID,\n      RoomID,\n      ProgramID,\n      CurriculumID,\n      DaySelected,\n      StudyTimeID,\n      StartDay,\n      CourseName\n    } = stoneDataToSave.current;\n    const BranchName = getTitle(branchList, BranchID);\n    const ProgramName = getTitle(programList, ProgramID);\n    const CurriculumName = getTitle(curriculumList, CurriculumID);\n    const RoomName = getMultiTitle(roomList, RoomID);\n    const DaySelectedName = getMultiTitle(dayOfWeek, DaySelected);\n    const StudyTimeName = getMultiTitle(studyTimeList, StudyTimeID);\n    const CourseNameFinal = CourseName ? CourseName : `[${BranchName}][${ProgramName}][${CurriculumName}][${StudyTimeName}] - ${moment(StartDay).format('DD/MM/YYYY')}`;\n    setScheduleShow(fmScheduleShowToObject);\n    setSaveCourseInfo(_objectSpread(_objectSpread(_objectSpread({}, saveCourseInfo), stoneDataToSave.current), {}, {\n      CourseName: CourseNameFinal,\n      BranchName,\n      RoomName,\n      ProgramName,\n      CurriculumName,\n      DaySelectedName,\n      StudyTimeName,\n      EndDay: moment(endDate).format('YYYY/MM/DD'),\n      Schedule: save\n    }));\n  };\n\n  const onSaveCourse = async () => {\n    setIsLoading({\n      type: 'SAVE_COURSE',\n      status: true\n    });\n    let res;\n\n    try {\n      const haveErrors = Object.keys(scheduleShow).find((date, idx) => scheduleShow[date].find(s => s.isValid));\n\n      if (haveErrors) {\n        showNoti('danger', 'Đã xảy ra lỗi. Xin kiểm tra lại');\n        return;\n      }\n\n      res = await courseApi.add(saveCourseInfo);\n\n      if (res.status === 200) {\n        showNoti('success', res.data.message);\n        router.push('/course/course-list/');\n      }\n    } catch (error) {\n      showNoti('error', error.message);\n    } finally {\n      setIsLoading({\n        type: 'SAVE_COURSE',\n        status: false\n      });\n    }\n\n    return res;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-course\",\n    children: [/*#__PURE__*/_jsxDEV(TitlePage, {\n      title: \"T\\u1EA1o kh\\xF3a h\\u1ECDc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8 col-12\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: \"S\\u1EAFp x\\u1EBFp l\\u1ECBch h\\u1ECDc\",\n          extra: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-page-course\",\n            children: [/*#__PURE__*/_jsxDEV(CreateCourseForm, {\n              isLoading: isLoading,\n              isUpdate: false //\n              ,\n              optionListForForm: optionListForForm //\n              ,\n              handleGetCourse: getCourse,\n              handleCheckStudyTime: checkStudyTime,\n              handleFetchDataByBranch: fetchDataByBranch,\n              handleFetchProgramByGrade: fetchProgramByGrade,\n              handleGetValueBeforeFetchCurriculum: getValueBeforeFetchCurriculum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 9\n            }, this), isSave && /*#__PURE__*/_jsxDEV(SaveCreateCourse, {\n              isLoading: isLoading,\n              saveInfo: saveCourseInfo,\n              scheduleShow: scheduleShow,\n              handleSaveCourse: onSaveCourse,\n              handleFetchDataToSave: onFetchDataToSave\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 912,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 8\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(CreateCourseCalendar, {\n            eventList: calendarDateFormat(calendarList),\n            isLoaded: true //\n            ,\n            handleSetDataModalCalendar: setDataModalCalendar,\n            dataModalCalendar: dataModalCalendar,\n            children: /*#__PURE__*/_jsxDEV(ScheduleList, {\n              panelActiveListInModal: dataModalCalendar.scheduleList.map((_, idx) => idx),\n              children: dataModalCalendar.scheduleList.map((s, idx) => /*#__PURE__*/_jsxDEV(ScheduleItem, {\n                isUpdate: true,\n                scheduleObj: s,\n                isLoading: isLoading,\n                handleChangeValueSchedule: (uid, key, vl) => changeValueSchedule(uid, key, vl, idx),\n                handleChangeStatusSchedule: onToggleSchedule,\n                optionRoomAndTeacherForADay: optionListForADay.list[idx],\n                optionStudyTime: optionListForADay.optionStudyTimeList\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 932,\n                columnNumber: 10\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 923,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 col-12\",\n        children: /*#__PURE__*/_jsxDEV(Schedule, {\n          children: /*#__PURE__*/_jsxDEV(ScheduleList, {\n            children: scheduleList.available.map((s, idx) => /*#__PURE__*/_jsxDEV(ScheduleItem, {\n              scheduleObj: s,\n              handleChangeStatusSchedule: onToggleSchedule,\n              isUpdate: false\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 893,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 891,\n    columnNumber: 3\n  }, this);\n};\n\nexport default CreateCourse;","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/components/Global/CreateCourse/CreateCourse.tsx"],"names":["Card","moment","useRouter","React","useEffect","useRef","useState","branchApi","checkRoomApi","checkTeacherApi","courseApi","curriculumApi","gradeApi","lessonApi","programApi","roomApi","staffApi","studyDayApi","studyTimeApi","CreateCourseForm","SaveCreateCourse","TitlePage","useDebounce","useWrap","fmArrayToObjectWithSpecialKey","fmSelectArr","CreateCourseCalendar","Schedule","ScheduleItem","ScheduleList","dayOfWeek","title","value","CreateCourse","router","showNoti","isLoading","setIsLoading","type","status","optionListForForm","setOptionListForForm","branchList","studyTimeList","gradeList","programList","curriculumList","userInformationList","roomList","stoneStudyTimeList","dataToFetchCurriculum","setDataToFetchCurriculum","StudyTimeID","ProgramID","scheduleList","setScheduleList","available","unavailable","endDate","optionListForADay","setOptionListForADay","optionStudyTimeList","list","optionRoomList","optionTeacherList","calendarList","setCalendarList","isSave","setIsSave","scheduleShow","setScheduleShow","stoneDataToSave","CourseName","AcademicUID","BranchID","RoomID","CurriculumID","StartDay","GradeID","DaySelected","saveCourseInfo","setSaveCourseInfo","BranchName","RoomName","StudyTimeName","ProgramName","CurriculumName","EndDay","DaySelectedName","TypeCourse","dataModalCalendar","setDataModalCalendar","dateString","limit","scheduleInDay","fetchData","branch","studyTime","grade","Promise","all","getAll","pageIndex","pageSize","selectAll","newBranchList","data","newStudyTimeList","current","newGradeList","error","console","log","message","fetchDataByBranch","id","params","user","room","RoleID","rs","newUserInformationList","newRoomList","newRoomListFmName","map","r","options","RoomCode","preState","fetchProgramByGrade","res","newProgramList","checkStudyTime","length","studyTimeSelected","i","timeObjBase","find","s","s1","TimeStart","replace","e1","TimeEnd","t1","Time","filter","st","s2","e2","t2","push","getValueBeforeFetchCurriculum","key","prevState","fetchCurriculum","join","newCurriculum","getCourse","object","StartDate","UserInformationID","lessonParams","CurriculumnID","studyDayParams","arrRes","then","lessonList","studyDayList","schedule","catch","fetchInfoAvailableSchedule","arrSchedule","paramsArr","CaID","Tiet","idx","dateFm","format","SubjectID","Date","Rooms","promises","obj","idx1","p","idx2","flat","newRes","len","newOptionForSchedule","teacherList","err","onDebounceFetch","onDebounceFetchInfoAvailableSchedule","checkDuplicateStudyTimeInDay","arr","vl","scheduleSameStudyTime","getNewValueForSchedule","pos","CaName","o","TeacherID","TeacherName","getNewUnavailableScheduleList","uid","date","ID","newVl","changeValueSchedule","newUnavailableScheduleList","changeStatusSchedule","sch","newScheduleUnavailableList","newScheduleAvailableList","fmDate","fmScheduleUnavailableToObject","findIndex","newScheduleObj","splice","c","Day","Limit","calendarDateFormat","calendarArr","isValid","scheduleListForADay","calendarHadSchedule","slice","start","toDate","end","resource","valid","onToggleSchedule","newScheduleList","getTitle","getMultiTitle","arrList","arrVl","r1","split","r2","onValidateDateToSave","show","save","checkEndDay","valueOf","dayArr","dayOffWeek","day","i2","studyTimeName","roomName","teacherName","CurriculumsDetailID","onFetchDataToSave","scheduleListSorted","sort","a","b","fmScheduleShowToObject","CourseNameFinal","onSaveCourse","haveErrors","Object","keys","add","_"],"mappings":"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","sourcesContent":["import { Card } from 'antd';\r\nimport moment from 'moment';\r\nimport { useRouter } from 'next/router';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n\tbranchApi,\r\n\tcheckRoomApi,\r\n\tcheckTeacherApi,\r\n\tcourseApi,\r\n\tcurriculumApi,\r\n\tgradeApi,\r\n\tlessonApi,\r\n\tprogramApi,\r\n\troomApi,\r\n\tstaffApi,\r\n\tstudyDayApi,\r\n\tstudyTimeApi\r\n} from '~/apiBase';\r\nimport CreateCourseForm from '~/components/Global/CreateCourse/CreateCourseForm/CreateCourseForm';\r\nimport SaveCreateCourse from '~/components/Global/CreateCourse/SaveCreateCourse';\r\nimport TitlePage from '~/components/TitlePage';\r\nimport { useDebounce } from '~/context/useDebounce';\r\nimport { useWrap } from '~/context/wrap';\r\nimport { fmArrayToObjectWithSpecialKey, fmSelectArr } from '~/utils/functions';\r\nimport CreateCourseCalendar from './Calendar/CreateCourseCalendar';\r\nimport Schedule from './Schedule/Schedule';\r\nimport ScheduleItem from './Schedule/ScheduleItem';\r\nimport ScheduleList from './Schedule/ScheduleList';\r\n\r\n// ------------ MAIN COMPONENT ------------------\r\ntype IOptionListForForm = {\r\n\tbranchList: IOptionCommon[];\r\n\tstudyTimeList: IOptionCommon[];\r\n\tgradeList: IOptionCommon[];\r\n\tprogramList: IOptionCommon[];\r\n\tdayOfWeek: IOptionCommon[];\r\n\tcurriculumList: IOptionCommon[];\r\n\tuserInformationList: IOptionCommon[];\r\n\troomList: IOptionCommon[];\r\n};\r\ntype IOptionListForADay = {\r\n\toptionStudyTimeList: IOptionCommon[];\r\n\tlist: Array<{\r\n\t\toptionRoomList: IOptionCommon[];\r\n\t\toptionTeacherList: IOptionCommon[];\r\n\t}>;\r\n};\r\n\r\ntype ICreateCourseScheduleList = {\r\n\tavailable: ISchedule[];\r\n\tunavailable: ISchedule[];\r\n\tendDate: string;\r\n};\r\ntype ICreateCourseScheduleShowList = {\r\n\t[k: string]: ISchedule[];\r\n};\r\ntype IDataModal = {\r\n\tdateString: string;\r\n\tlimit: number;\r\n\tscheduleInDay: number;\r\n\tscheduleList: ISchedule[];\r\n};\r\ntype IScheduleListToSave = {\r\n\tCurriculumsDetailID?: number | string;\r\n\tDate: string;\r\n\tStudyTimeID: number;\r\n\tRoomID: number;\r\n\tTeacherID: number;\r\n\tSubjectID: number;\r\n};\r\ntype ISaveCourseInfo = {\r\n\tCourseName: string;\r\n\tAcademicUID: number;\r\n\tBranchID: number;\r\n\tBranchName: string;\r\n\tGradeID: number;\r\n\tRoomID: string;\r\n\tRoomName: string;\r\n\tStudyTimeID: string;\r\n\tStudyTimeName: string;\r\n\tProgramID: number;\r\n\tProgramName: string;\r\n\tCurriculumID: number;\r\n\tCurriculumName: string;\r\n\tStartDay: string;\r\n\tEndDay: string;\r\n\tDaySelected: string;\r\n\tDaySelectedName: string;\r\n\tTypeCourse: number;\r\n\tSchedule: IScheduleListToSave[];\r\n};\r\nconst dayOfWeek = [\r\n\t{\r\n\t\ttitle: 'Thứ 2',\r\n\t\tvalue: 1\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 3',\r\n\t\tvalue: 2\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 4',\r\n\t\tvalue: 3\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 5',\r\n\t\tvalue: 4\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 6',\r\n\t\tvalue: 5\r\n\t},\r\n\t{\r\n\t\ttitle: 'Thứ 7',\r\n\t\tvalue: 6\r\n\t},\r\n\t{\r\n\t\ttitle: 'Chủ nhật',\r\n\t\tvalue: 0\r\n\t}\r\n];\r\nconst CreateCourse = () => {\r\n\tconst router = useRouter();\r\n\t// -----------STATE-----------\r\n\t// FORM\r\n\tconst { showNoti } = useWrap();\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t});\r\n\tconst [optionListForForm, setOptionListForForm] = useState<IOptionListForForm>({\r\n\t\tbranchList: [],\r\n\t\tstudyTimeList: [],\r\n\t\tgradeList: [],\r\n\t\tprogramList: [],\r\n\t\tdayOfWeek,\r\n\t\tcurriculumList: [],\r\n\t\tuserInformationList: [],\r\n\t\troomList: []\r\n\t});\r\n\tconst stoneStudyTimeList = useRef(optionListForForm.studyTimeList);\r\n\tconst [dataToFetchCurriculum, setDataToFetchCurriculum] = useState<{\r\n\t\tStudyTimeID: number[];\r\n\t\tProgramID: number;\r\n\t}>({\r\n\t\tStudyTimeID: null,\r\n\t\tProgramID: null\r\n\t});\r\n\t//Lesson\r\n\tconst [scheduleList, setScheduleList] = useState<ICreateCourseScheduleList>({\r\n\t\tavailable: [],\r\n\t\tunavailable: [],\r\n\t\tendDate: ''\r\n\t});\r\n\tconst [optionListForADay, setOptionListForADay] = useState<IOptionListForADay>({\r\n\t\toptionStudyTimeList: [],\r\n\t\tlist: [\r\n\t\t\t{\r\n\t\t\t\toptionRoomList: [],\r\n\t\t\t\toptionTeacherList: []\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n\t//StudyDay\r\n\tconst [calendarList, setCalendarList] = useState<IStudyDay[]>([]);\r\n\t// SAVE\r\n\tconst [isSave, setIsSave] = useState(false);\r\n\tconst [scheduleShow, setScheduleShow] = useState<ICreateCourseScheduleShowList>({});\r\n\tconst stoneDataToSave = useRef({\r\n\t\tCourseName: '',\r\n\t\tAcademicUID: 0,\r\n\t\tBranchID: 0,\r\n\t\tRoomID: '',\r\n\t\tCurriculumID: 0,\r\n\t\tProgramID: 0,\r\n\t\tStartDay: '',\r\n\t\tGradeID: 0,\r\n\t\tDaySelected: '',\r\n\t\tStudyTimeID: ''\r\n\t});\r\n\tconst [saveCourseInfo, setSaveCourseInfo] = useState<ISaveCourseInfo>({\r\n\t\tCourseName: '',\r\n\t\tAcademicUID: 0,\r\n\t\tBranchID: 0,\r\n\t\tBranchName: '',\r\n\t\tGradeID: 0,\r\n\t\tRoomID: '',\r\n\t\tRoomName: '',\r\n\t\tStudyTimeID: '',\r\n\t\tStudyTimeName: '',\r\n\t\tProgramID: 0,\r\n\t\tProgramName: '',\r\n\t\tCurriculumID: 0,\r\n\t\tCurriculumName: '',\r\n\t\tStartDay: '',\r\n\t\tEndDay: '',\r\n\t\tDaySelected: '',\r\n\t\tDaySelectedName: '',\r\n\t\tTypeCourse: 1,\r\n\t\tSchedule: []\r\n\t});\r\n\t// CALENDAR MODAL\r\n\tconst [dataModalCalendar, setDataModalCalendar] = useState<IDataModal>({\r\n\t\tdateString: '',\r\n\t\tlimit: 0,\r\n\t\tscheduleInDay: 0,\r\n\t\tscheduleList: []\r\n\t});\r\n\t// -----------CREATE COURSE FORM-----------\r\n\t// FETCH BRANCH, STUDY TIME, GRADE IN THE FIRST TIME\r\n\tconst fetchData = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconst [branch, studyTime, grade] = await Promise.all([\r\n\t\t\t\tbranchApi.getAll({ pageIndex: 1, pageSize: 9999 }),\r\n\t\t\t\tstudyTimeApi.getAll({ selectAll: true }),\r\n\t\t\t\tgradeApi.getAll({ selectAll: true })\r\n\t\t\t]);\r\n\t\t\t// BRANCH\r\n\t\t\tconst newBranchList = fmSelectArr(branch.data.data, 'BranchName', 'ID');\r\n\t\t\t// STUDY TIME\r\n\t\t\tconst newStudyTimeList = fmSelectArr(studyTime.data.data, 'Name', 'ID', ['Time', 'TimeStart', 'TimeEnd']);\r\n\t\t\tstoneStudyTimeList.current = newStudyTimeList;\r\n\t\t\t// GRADE\r\n\t\t\tconst newGradeList = fmSelectArr(grade.data.data, 'GradeName', 'ID');\r\n\t\t\tsetOptionListForForm({\r\n\t\t\t\t...optionListForForm,\r\n\t\t\t\tbranchList: newBranchList,\r\n\t\t\t\tstudyTimeList: newStudyTimeList,\r\n\t\t\t\tgradeList: newGradeList\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('fetchData - PromiseAll:', error);\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tfetchData();\r\n\t}, []);\r\n\t// FETCH ROOM AND USER INFORMATION\r\n\tconst fetchDataByBranch = async (id: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'BranchID',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\tconst params = {\r\n\t\t\t\tBranchID: id\r\n\t\t\t};\r\n\t\t\tconst [user, room] = await Promise.all([staffApi.getAll({ ...params, RoleID: 7 }), roomApi.getAll(params)]);\r\n\t\t\t// USER INFORMATION\r\n\t\t\tconst rs = {\r\n\t\t\t\tuserInformationList: [],\r\n\t\t\t\troomList: []\r\n\t\t\t};\r\n\t\t\tif (user.status === 200) {\r\n\t\t\t\tconst newUserInformationList = fmSelectArr(user.data.data, 'FullNameUnicode', 'UserInformationID');\r\n\t\t\t\trs.userInformationList = newUserInformationList;\r\n\t\t\t}\r\n\t\t\tif (user.status === 204) {\r\n\t\t\t\trs.userInformationList = [];\r\n\t\t\t}\r\n\t\t\t// ROOM\r\n\t\t\tif (room.status === 200) {\r\n\t\t\t\tconst newRoomList = fmSelectArr(room.data.data, 'RoomName', 'RoomID', ['RoomCode']);\r\n\t\t\t\tconst newRoomListFmName = newRoomList.map((r) => ({\r\n\t\t\t\t\t...r,\r\n\t\t\t\t\ttitle: `${r.options.RoomCode} - ${r.title}`\r\n\t\t\t\t}));\r\n\t\t\t\trs.roomList = newRoomListFmName;\r\n\t\t\t}\r\n\t\t\tif (room.status === 204) {\r\n\t\t\t\trs.roomList = [];\r\n\t\t\t}\r\n\t\t\tsetOptionListForForm((preState) => ({\r\n\t\t\t\t...preState,\r\n\t\t\t\t...rs\r\n\t\t\t}));\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('FetchDataByBranch - PromiseAll:', error);\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'BranchID',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\t// PROGRAM\r\n\tconst fetchProgramByGrade = async (id: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GradeID',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await programApi.getAll({\r\n\t\t\t\tGradeID: id\r\n\t\t\t});\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newProgramList = fmSelectArr(res.data.data, 'ProgramName', 'ID');\r\n\t\t\t\tsetOptionListForForm({\r\n\t\t\t\t\t...optionListForForm,\r\n\t\t\t\t\tprogramList: newProgramList\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForForm({\r\n\t\t\t\t\t...optionListForForm,\r\n\t\t\t\t\tprogramList: []\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GradeID',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\t// CURRICULUM\r\n\tconst checkStudyTime = async (value: [number]) => {\r\n\t\tif (!value?.length) {\r\n\t\t\tsetOptionListForForm({\r\n\t\t\t\t...optionListForForm,\r\n\t\t\t\tstudyTimeList: stoneStudyTimeList.current\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst newStudyTimeList = [...optionListForForm.studyTimeList];\r\n\t\tlet rs;\r\n\t\tconst studyTimeSelected = [];\r\n\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\tconst timeObjBase = newStudyTimeList.find((s) => s.value === value[i]);\r\n\t\t\tconst s1 = +timeObjBase.options.TimeStart.replace(':', '');\r\n\t\t\tconst e1 = +timeObjBase.options.TimeEnd.replace(':', '');\r\n\t\t\tconst t1 = +timeObjBase.options.Time;\r\n\t\t\trs = newStudyTimeList.filter((st) => {\r\n\t\t\t\tconst s2 = +st.options.TimeStart.replace(':', '');\r\n\t\t\t\tconst e2 = +st.options.TimeEnd.replace(':', '');\r\n\t\t\t\tconst t2 = +st.options.Time;\r\n\t\t\t\tif (timeObjBase.value === st.value) {\r\n\t\t\t\t\tstudyTimeSelected.push(st);\r\n\t\t\t\t\treturn st;\r\n\t\t\t\t}\r\n\t\t\t\tif (\r\n\t\t\t\t\t// KIỂM TRA MỖI CA HỌC KHÔNG CÓ THỜI GIAN TRÙNG LÊN NHAU\r\n\t\t\t\t\t!(\r\n\t\t\t\t\t\t(s1 < s2 && e1 > e2 && s1 < e2) ||\r\n\t\t\t\t\t\t(s1 > s2 && e1 > e2 && s1 < e2) ||\r\n\t\t\t\t\t\t(s1 < s2 && e1 < e2 && e1 > s2) ||\r\n\t\t\t\t\t\t(s1 > s2 && e1 < e2)\r\n\t\t\t\t\t) &&\r\n\t\t\t\t\tt1 === t2\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn st;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tsetOptionListForForm({\r\n\t\t\t...optionListForForm,\r\n\t\t\tstudyTimeList: rs\r\n\t\t});\r\n\t\tsetOptionListForADay({\r\n\t\t\t...optionListForADay,\r\n\t\t\toptionStudyTimeList: studyTimeSelected\r\n\t\t});\r\n\t};\r\n\t// GET ENOUGH 2 VALUE TO GET CURRICULUM - NEED PROGRAM ID - STUDY TIME ID\r\n\tconst getValueBeforeFetchCurriculum = async (key: string, value: number) => {\r\n\t\tsetDataToFetchCurriculum((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\t[key]: value\r\n\t\t}));\r\n\t};\r\n\tconst fetchCurriculum = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ProgramID',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await curriculumApi.getAll({\r\n\t\t\t\tStudyTimeID: dataToFetchCurriculum.StudyTimeID.join(','),\r\n\t\t\t\tProgramID: dataToFetchCurriculum.ProgramID\r\n\t\t\t});\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newCurriculum = fmSelectArr(res.data.data, 'CurriculumName', 'ID');\r\n\t\t\t\tsetOptionListForForm({\r\n\t\t\t\t\t...optionListForForm,\r\n\t\t\t\t\tcurriculumList: newCurriculum\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForForm({\r\n\t\t\t\t\t...optionListForForm,\r\n\t\t\t\t\tcurriculumList: []\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ProgramID',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tif (dataToFetchCurriculum.ProgramID && dataToFetchCurriculum.StudyTimeID) {\r\n\t\t\tfetchCurriculum();\r\n\t\t}\r\n\t}, [dataToFetchCurriculum]);\r\n\t// GET COURSE\r\n\tconst getCourse = async (object) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconst {\r\n\t\t\t\tRoomID,\r\n\t\t\t\tBranchID,\r\n\t\t\t\tCurriculumID,\r\n\t\t\t\tStartDay: StartDate,\r\n\t\t\t\tStudyTimeID,\r\n\t\t\t\tDaySelected,\r\n\t\t\t\tProgramID,\r\n\t\t\t\tGradeID,\r\n\t\t\t\tCourseName,\r\n\t\t\t\tUserInformationID\r\n\t\t\t} = object;\r\n\t\t\tstoneDataToSave.current = {\r\n\t\t\t\tCourseName,\r\n\t\t\t\tAcademicUID: UserInformationID,\r\n\t\t\t\tBranchID,\r\n\t\t\t\tRoomID: RoomID.join(','),\r\n\t\t\t\tCurriculumID,\r\n\t\t\t\tProgramID,\r\n\t\t\t\tGradeID,\r\n\t\t\t\tStartDay: StartDate,\r\n\t\t\t\tDaySelected: DaySelected.join(','),\r\n\t\t\t\tStudyTimeID: StudyTimeID.join(',')\r\n\t\t\t};\r\n\t\t\tconst lessonParams = {\r\n\t\t\t\tCurriculumnID: CurriculumID,\r\n\t\t\t\tStartDate,\r\n\t\t\t\tStudyTimeID: StudyTimeID.join(','),\r\n\t\t\t\tRoomID: RoomID.join(','),\r\n\t\t\t\tBranchID,\r\n\t\t\t\tDaySelected: DaySelected.join(',')\r\n\t\t\t};\r\n\t\t\tconst studyDayParams = {\r\n\t\t\t\tBranchID,\r\n\t\t\t\tStudyTimeID: StudyTimeID.join(','),\r\n\t\t\t\tStartDate,\r\n\t\t\t\tDaySelected: DaySelected.join(','),\r\n\t\t\t\tRoomID: RoomID.join(',')\r\n\t\t\t};\r\n\t\t\tconst arrRes = await Promise.all([lessonApi.getAll(lessonParams), studyDayApi.getAll(studyDayParams)])\r\n\t\t\t\t.then(([lessonList, studyDayList]) => {\r\n\t\t\t\t\tif (lessonList.status === 200) {\r\n\t\t\t\t\t\tsetScheduleList({\r\n\t\t\t\t\t\t\tendDate: '',\r\n\t\t\t\t\t\t\tavailable: [],\r\n\t\t\t\t\t\t\tunavailable: lessonList.data.schedule\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstudyDayList.status === 200 && setCalendarList(studyDayList.data.data);\r\n\t\t\t\t\tif (lessonList.status === 200 && studyDayList.status === 200) {\r\n\t\t\t\t\t\tsetIsSave(true);\r\n\t\t\t\t\t\tcheckStudyTime(null);\r\n\t\t\t\t\t\tshowNoti('success', 'Thành công');\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\terror.status === 400 && showNoti('danger', error.message);\r\n\t\t\t\t});\r\n\r\n\t\t\treturn arrRes;\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('error', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\t// -----------SCHEDULE-----------\r\n\t// FETCH DATA FOR SELECT SCHEDULE\r\n\tconst fetchInfoAvailableSchedule = async (arrSchedule: ISchedule[]) => {\r\n\t\tconst { BranchID, RoomID } = stoneDataToSave.current;\r\n\t\t// SPLIT SCHEDULE TO 2 OBJECT TO CALL 2 API\r\n\t\t// paramsArr = [ {Schedule-*: [{params teacher}, {params room}]} ]\r\n\t\tconst paramsArr = arrSchedule.map(({ CaID, Tiet }, idx) => {\r\n\t\t\tconst dateFm = moment(dataModalCalendar.dateString).format('YYYY/MM/DD');\r\n\t\t\tconst { SubjectID } = Tiet;\r\n\t\t\treturn {\r\n\t\t\t\t[`Schedule-${idx + 1}`]: [\r\n\t\t\t\t\t// TEACHER\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tBranchID,\r\n\t\t\t\t\t\tSubjectID,\r\n\t\t\t\t\t\tStudyTimeID: CaID,\r\n\t\t\t\t\t\tDate: dateFm\r\n\t\t\t\t\t},\r\n\t\t\t\t\t// ROOM\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tBranchID,\r\n\t\t\t\t\t\tRooms: RoomID,\r\n\t\t\t\t\t\tStudyTimeID: CaID,\r\n\t\t\t\t\t\tDate: dateFm\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t};\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tif (!paramsArr.length) return;\r\n\t\t\t// promises = [ {checkTeacher promise}, {checkRoom promise} ]\r\n\t\t\tconst promises = paramsArr\r\n\t\t\t\t.map((obj, idx1) => {\r\n\t\t\t\t\treturn obj[`Schedule-${idx1 + 1}`].map((p, idx2) =>\r\n\t\t\t\t\t\tidx2 % 2 === 0 ? checkTeacherApi.getAll(p) : checkRoomApi.getAll(p)\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t\t.flat(1);\r\n\t\t\tawait Promise.all(promises)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\t//res = [ {data teacher}, {data room} ]\r\n\t\t\t\t\t//newRes = [ [{data teacher}, {data room}] ]\r\n\t\t\t\t\tconst newRes = [];\r\n\t\t\t\t\tfor (let i = 0, len = res.length; i < len; i += 2) {\r\n\t\t\t\t\t\tnewRes.push([res[i], res[i + 1]]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// newOptionForSchedule = [ {optionRoomList:[], optionTeacherList:[]} ]\r\n\t\t\t\t\tconst newOptionForSchedule = newRes.map((r) => {\r\n\t\t\t\t\t\tconst teacherList = r[0];\r\n\t\t\t\t\t\tconst roomList = r[1];\r\n\t\t\t\t\t\tconst rs = {\r\n\t\t\t\t\t\t\toptionRoomList: [{ title: '---Chọn phòng---', value: 0 }],\r\n\t\t\t\t\t\t\toptionTeacherList: [{ title: '---Chọn giáo viên---', value: 0 }]\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tif (teacherList.status === 200) {\r\n\t\t\t\t\t\t\trs.optionTeacherList = [...rs.optionTeacherList, ...fmSelectArr(teacherList.data.data, 'name', 'id', ['name'])];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (roomList.status === 200) {\r\n\t\t\t\t\t\t\trs.optionRoomList = [...rs.optionRoomList, ...fmSelectArr(roomList.data.data, 'name', 'id', ['name'])];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn rs;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsetOptionListForADay((prevState) => ({\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\tlist: newOptionForSchedule\r\n\t\t\t\t\t}));\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => console.log('fetchInfoAvailableSchedule - PromiseAll:', err));\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'CHECK_SCHEDULE',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tconst onDebounceFetch = useDebounce(fetchInfoAvailableSchedule, 300, []);\r\n\tconst onDebounceFetchInfoAvailableSchedule = (params: ISchedule[]) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'CHECK_SCHEDULE',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\tonDebounceFetch(params);\r\n\t};\r\n\tconst checkDuplicateStudyTimeInDay = (arr: ISchedule[], vl) => {\r\n\t\tconst scheduleSameStudyTime = arr.filter((s) => s.CaID === vl);\r\n\t\tif (scheduleSameStudyTime.length > 1) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\tconst getNewValueForSchedule = (key, vl, pos) => {\r\n\t\tconst { optionRoomList, optionTeacherList } = optionListForADay.list[pos];\r\n\t\tswitch (key) {\r\n\t\t\tcase 'CaID':\r\n\t\t\t\tconst CaName = optionListForADay.optionStudyTimeList.find((o) => o.value === vl)?.title;\r\n\t\t\t\treturn {\r\n\t\t\t\t\tRoomID: 0,\r\n\t\t\t\t\tTeacherID: 0,\r\n\t\t\t\t\tTeacherName: 'Giáo viên trống',\r\n\t\t\t\t\tRoomName: 'Phòng trống',\r\n\t\t\t\t\tCaName,\r\n\t\t\t\t\t[key]: vl\r\n\t\t\t\t};\r\n\t\t\tcase 'TeacherID':\r\n\t\t\t\tconst TeacherName = optionTeacherList.find((o) => o.value === vl)?.title;\r\n\t\t\t\treturn {\r\n\t\t\t\t\tTeacherName: vl ? TeacherName : 'Giáo viên trống',\r\n\t\t\t\t\t[key]: vl\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'RoomID':\r\n\t\t\t\tconst RoomName = optionRoomList.find((o) => o.value === vl)?.title;\r\n\t\t\t\treturn {\r\n\t\t\t\t\tRoomName: vl ? RoomName : 'Phòng trống',\r\n\t\t\t\t\t[key]: vl\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\tconst getNewUnavailableScheduleList = (uid, key, vl, pos) => {\r\n\t\tconst { unavailable } = scheduleList;\r\n\t\t// DATE TO CHECK DUPLICATE VALUE\r\n\t\tlet date;\r\n\t\tconst rs = unavailable.map((s) => {\r\n\t\t\tif (s.ID === uid) {\r\n\t\t\t\tconst newVl = getNewValueForSchedule(key, vl, pos);\r\n\t\t\t\tdate = s.date;\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...s,\r\n\t\t\t\t\t...newVl\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\treturn s;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn { date, rs };\r\n\t};\r\n\tconst changeValueSchedule = (uid: number, key: 'CaID' | 'TeacherID' | 'RoomID', vl: number | string, pos: number) => {\r\n\t\tconst { rs: newUnavailableScheduleList, date } = getNewUnavailableScheduleList(uid, key, vl, pos);\r\n\r\n\t\tif (key === 'CaID') {\r\n\t\t\tconst scheduleList = newUnavailableScheduleList.filter((s) => s.date === date);\r\n\t\t\tif (checkDuplicateStudyTimeInDay(scheduleList, vl)) {\r\n\t\t\t\tshowNoti('danger', 'Dữ liệu trùng lập');\r\n\t\t\t} else {\r\n\t\t\t\tsetDataModalCalendar({\r\n\t\t\t\t\t...dataModalCalendar,\r\n\t\t\t\t\tscheduleList: scheduleList\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetScheduleList((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tunavailable: newUnavailableScheduleList\r\n\t\t}));\r\n\t};\r\n\tconst changeStatusSchedule = (sch: ISchedule, type: number = 1) => {\r\n\t\tconst newScheduleUnavailableList = [...scheduleList.unavailable];\r\n\t\tconst newScheduleAvailableList = [...scheduleList.available];\r\n\r\n\t\tconst fmDate = moment(dataModalCalendar.dateString).format('YYYY-MM-DD');\r\n\t\tconst fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(newScheduleUnavailableList, 'date');\r\n\t\t// type = 2 => unavailable to available\r\n\t\tif (type === 2) {\r\n\t\t\tconst idx = newScheduleUnavailableList.findIndex((s) => s.ID === sch.ID);\r\n\t\t\tconst newScheduleObj = {\r\n\t\t\t\t...newScheduleUnavailableList[idx],\r\n\t\t\t\tdate: fmDate\r\n\t\t\t};\r\n\t\t\tnewScheduleUnavailableList.splice(idx, 1);\r\n\t\t\tnewScheduleAvailableList.push(newScheduleObj);\r\n\t\t}\r\n\t\t// type = 1 => available to unavailable\r\n\t\tif (type === 1) {\r\n\t\t\tconst limit = calendarList.find((c) => c.Day === dataModalCalendar.dateString).Limit;\r\n\t\t\tif (fmScheduleUnavailableToObject[fmDate]?.length >= limit) {\r\n\t\t\t\tshowNoti('danger', 'Số ca đạt giới hạn');\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tconst idx = newScheduleAvailableList.findIndex((s) => s.ID === sch.ID);\r\n\t\t\tconst newScheduleObj = {\r\n\t\t\t\t...newScheduleAvailableList[idx],\r\n\t\t\t\tdate: fmDate\r\n\t\t\t};\r\n\t\t\tnewScheduleAvailableList.splice(idx, 1);\r\n\t\t\tnewScheduleUnavailableList.push(newScheduleObj);\r\n\t\t}\r\n\t\tsetScheduleList((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tavailable: newScheduleAvailableList,\r\n\t\t\tunavailable: newScheduleUnavailableList\r\n\t\t}));\r\n\t\treturn true;\r\n\t};\r\n\t// -----------CALENDAR-----------\r\n\tconst calendarDateFormat = (calendarArr: IStudyDay[]) => {\r\n\t\tconst { unavailable } = scheduleList;\r\n\t\tconst fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(unavailable, 'date');\r\n\t\tconst rs = calendarArr.map((c, idx) => {\r\n\t\t\tlet isValid = true;\r\n\t\t\tlet limit = c.Limit;\r\n\t\t\tlet scheduleListForADay = [];\r\n\t\t\tlet title = `Số buổi trống: ${limit}`;\r\n\r\n\t\t\tconst calendarHadSchedule = fmScheduleUnavailableToObject[c.Day.slice(0, 10)]?.length;\r\n\r\n\t\t\tif (calendarHadSchedule) {\r\n\t\t\t\tlimit = c.Limit - calendarHadSchedule;\r\n\t\t\t\tscheduleListForADay = fmScheduleUnavailableToObject[c.Day.slice(0, 10)];\r\n\t\t\t\ttitle = 'Click để xem chi tiết';\r\n\t\t\t}\r\n\r\n\t\t\tif (!limit) {\r\n\t\t\t\tisValid = false;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tid: idx + 1,\r\n\t\t\t\ttitle: title,\r\n\t\t\t\tstart: moment(c.Day).toDate(),\r\n\t\t\t\tend: moment(c.Day).toDate(),\r\n\t\t\t\tresource: {\r\n\t\t\t\t\tdateString: c.Day,\r\n\t\t\t\t\tvalid: isValid,\r\n\t\t\t\t\tlimit: c.Limit,\r\n\t\t\t\t\tscheduleList: scheduleListForADay\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn rs;\r\n\t};\r\n\tconst onToggleSchedule = (sch: ISchedule, type: number) => {\r\n\t\tif (changeStatusSchedule(sch, type)) {\r\n\t\t\tconst newScheduleList = [...dataModalCalendar.scheduleList];\r\n\t\t\tconst idx = newScheduleList.findIndex((s) => s.ID === sch.ID);\r\n\t\t\tif (idx >= 0) {\r\n\t\t\t\tnewScheduleList.splice(idx, 1);\r\n\t\t\t} else {\r\n\t\t\t\tnewScheduleList.push(sch);\r\n\t\t\t}\r\n\t\t\tsetDataModalCalendar({\r\n\t\t\t\t...dataModalCalendar,\r\n\t\t\t\tscheduleInDay: newScheduleList.length,\r\n\t\t\t\tscheduleList: newScheduleList\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tconst { scheduleList } = dataModalCalendar;\r\n\t\tif (scheduleList.length) {\r\n\t\t\tonDebounceFetchInfoAvailableSchedule(scheduleList);\r\n\t\t}\r\n\t}, [dataModalCalendar]);\r\n\t// -----------SAVE COURSE-----------\r\n\tconst getTitle = (arr: IOptionCommon[], vl) => arr.find((p) => p.value === vl).title;\r\n\tconst getMultiTitle = (arrList: IOptionCommon[], arrVl: string) => {\r\n\t\tconst rs = [];\r\n\t\tfor (const r1 of arrVl.split(',')) {\r\n\t\t\tfor (const r2 of arrList) {\r\n\t\t\t\tif (+r1 === r2.value) {\r\n\t\t\t\t\trs.push(r2.title);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rs.join(', ');\r\n\t};\r\n\tconst onValidateDateToSave = () => {\r\n\t\tconst { unavailable } = scheduleList;\r\n\t\tconst rs: {\r\n\t\t\tshow: {\r\n\t\t\t\tdate: string;\r\n\t\t\t\tdayOffWeek: string;\r\n\t\t\t\tstudyTimeName: string;\r\n\t\t\t\troomName: string;\r\n\t\t\t\tteacherName: string;\r\n\t\t\t\tStudyTimeID: number;\r\n\t\t\t\tisValid: boolean;\r\n\t\t\t}[];\r\n\t\t\tsave: IScheduleListToSave[];\r\n\t\t\tendDate: number;\r\n\t\t} = {\r\n\t\t\tshow: [],\r\n\t\t\tsave: [],\r\n\t\t\tendDate: 0\r\n\t\t};\r\n\t\tfor (let i = 0, len = unavailable.length; i < len; i++) {\r\n\t\t\tconst s = unavailable[i];\r\n\t\t\t// get end date of course\r\n\t\t\tconst checkEndDay = moment(s.date).valueOf();\r\n\t\t\tif (rs.endDate < checkEndDay) {\r\n\t\t\t\trs.endDate = checkEndDay;\r\n\t\t\t}\r\n\t\t\tconst dayArr = ['Chủ Nhật', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'];\r\n\t\t\tconst dayOffWeek = dayArr[moment(s.date).day()];\r\n\t\t\tlet isValid = !s.RoomID || !s.TeacherID;\r\n\t\t\tfor (let i2 = 0; i2 < len; i2++) {\r\n\t\t\t\tconst s2 = scheduleList.unavailable[i2];\r\n\t\t\t\tif (i !== i2 && s.date === s2.date && s.CaID === s2.CaID) {\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trs.show.push({\r\n\t\t\t\tdate: s.date,\r\n\t\t\t\tdayOffWeek,\r\n\t\t\t\tstudyTimeName: s.CaName,\r\n\t\t\t\troomName: s.RoomName,\r\n\t\t\t\tteacherName: s.TeacherName,\r\n\t\t\t\tStudyTimeID: s.CaID,\r\n\t\t\t\tisValid\r\n\t\t\t});\r\n\t\t\trs.save.push({\r\n\t\t\t\tCurriculumsDetailID: s.Tiet.CurriculumsDetailID,\r\n\t\t\t\tDate: s.date,\r\n\t\t\t\tStudyTimeID: s.CaID,\r\n\t\t\t\tRoomID: s.RoomID,\r\n\t\t\t\tTeacherID: s.TeacherID,\r\n\t\t\t\tSubjectID: s.Tiet.SubjectID\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn rs;\r\n\t};\r\n\tconst onFetchDataToSave = () => {\r\n\t\tconst { branchList, programList, curriculumList, studyTimeList, roomList } = optionListForForm;\r\n\t\tconst { show, save, endDate } = onValidateDateToSave();\r\n\r\n\t\tconst scheduleListSorted = show.sort((a, b) => moment(a.date).valueOf() - moment(b.date).valueOf());\r\n\r\n\t\tconst fmScheduleShowToObject = fmArrayToObjectWithSpecialKey(scheduleListSorted, 'date');\r\n\r\n\t\tconst { BranchID, RoomID, ProgramID, CurriculumID, DaySelected, StudyTimeID, StartDay, CourseName } = stoneDataToSave.current;\r\n\r\n\t\tconst BranchName = getTitle(branchList, BranchID);\r\n\t\tconst ProgramName = getTitle(programList, ProgramID);\r\n\t\tconst CurriculumName = getTitle(curriculumList, CurriculumID);\r\n\t\tconst RoomName = getMultiTitle(roomList, RoomID);\r\n\t\tconst DaySelectedName = getMultiTitle(dayOfWeek, DaySelected);\r\n\t\tconst StudyTimeName = getMultiTitle(studyTimeList, StudyTimeID);\r\n\t\tconst CourseNameFinal = CourseName\r\n\t\t\t? CourseName\r\n\t\t\t: `[${BranchName}][${ProgramName}][${CurriculumName}][${StudyTimeName}] - ${moment(StartDay).format('DD/MM/YYYY')}`;\r\n\r\n\t\tsetScheduleShow(fmScheduleShowToObject);\r\n\t\tsetSaveCourseInfo({\r\n\t\t\t...saveCourseInfo,\r\n\t\t\t...stoneDataToSave.current,\r\n\t\t\tCourseName: CourseNameFinal,\r\n\t\t\tBranchName,\r\n\t\t\tRoomName,\r\n\t\t\tProgramName,\r\n\t\t\tCurriculumName,\r\n\t\t\tDaySelectedName,\r\n\t\t\tStudyTimeName,\r\n\t\t\tEndDay: moment(endDate).format('YYYY/MM/DD'),\r\n\t\t\tSchedule: save\r\n\t\t});\r\n\t};\r\n\tconst onSaveCourse = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'SAVE_COURSE',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\tlet res;\r\n\r\n\t\ttry {\r\n\t\t\tconst haveErrors = Object.keys(scheduleShow).find((date, idx) => scheduleShow[date].find((s) => s.isValid));\r\n\t\t\tif (haveErrors) {\r\n\t\t\t\tshowNoti('danger', 'Đã xảy ra lỗi. Xin kiểm tra lại');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tres = await courseApi.add(saveCourseInfo);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tshowNoti('success', res.data.message);\r\n\t\t\t\trouter.push('/course/course-list/');\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('error', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'SAVE_COURSE',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn res;\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"create-course\">\r\n\t\t\t<TitlePage title=\"Tạo khóa học\" />\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-8 col-12\">\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\ttitle=\"Sắp xếp lịch học\"\r\n\t\t\t\t\t\textra={\r\n\t\t\t\t\t\t\t<div className=\"btn-page-course\">\r\n\t\t\t\t\t\t\t\t<CreateCourseForm\r\n\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\tisUpdate={false}\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\toptionListForForm={optionListForForm}\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\thandleGetCourse={getCourse}\r\n\t\t\t\t\t\t\t\t\thandleCheckStudyTime={checkStudyTime}\r\n\t\t\t\t\t\t\t\t\thandleFetchDataByBranch={fetchDataByBranch}\r\n\t\t\t\t\t\t\t\t\thandleFetchProgramByGrade={fetchProgramByGrade}\r\n\t\t\t\t\t\t\t\t\thandleGetValueBeforeFetchCurriculum={getValueBeforeFetchCurriculum}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t{isSave && (\r\n\t\t\t\t\t\t\t\t\t<SaveCreateCourse\r\n\t\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\t\tsaveInfo={saveCourseInfo}\r\n\t\t\t\t\t\t\t\t\t\tscheduleShow={scheduleShow}\r\n\t\t\t\t\t\t\t\t\t\thandleSaveCourse={onSaveCourse}\r\n\t\t\t\t\t\t\t\t\t\thandleFetchDataToSave={onFetchDataToSave}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CreateCourseCalendar\r\n\t\t\t\t\t\t\teventList={calendarDateFormat(calendarList)}\r\n\t\t\t\t\t\t\tisLoaded={true}\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\thandleSetDataModalCalendar={setDataModalCalendar}\r\n\t\t\t\t\t\t\tdataModalCalendar={dataModalCalendar}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ScheduleList panelActiveListInModal={dataModalCalendar.scheduleList.map((_, idx) => idx)}>\r\n\t\t\t\t\t\t\t\t{dataModalCalendar.scheduleList.map((s, idx) => (\r\n\t\t\t\t\t\t\t\t\t<ScheduleItem\r\n\t\t\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\t\t\tisUpdate={true}\r\n\t\t\t\t\t\t\t\t\t\tscheduleObj={s}\r\n\t\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\t\thandleChangeValueSchedule={(uid, key, vl) => changeValueSchedule(uid, key, vl, idx)}\r\n\t\t\t\t\t\t\t\t\t\thandleChangeStatusSchedule={onToggleSchedule}\r\n\t\t\t\t\t\t\t\t\t\toptionRoomAndTeacherForADay={optionListForADay.list[idx]}\r\n\t\t\t\t\t\t\t\t\t\toptionStudyTime={optionListForADay.optionStudyTimeList}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</ScheduleList>\r\n\t\t\t\t\t\t</CreateCourseCalendar>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-4 col-12\">\r\n\t\t\t\t\t<Schedule>\r\n\t\t\t\t\t\t<ScheduleList>\r\n\t\t\t\t\t\t\t{scheduleList.available.map((s, idx) => (\r\n\t\t\t\t\t\t\t\t<ScheduleItem key={idx} scheduleObj={s} handleChangeStatusSchedule={onToggleSchedule} isUpdate={false} />\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ScheduleList>\r\n\t\t\t\t\t</Schedule>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CreateCourse;\r\n"]},"metadata":{},"sourceType":"module"}