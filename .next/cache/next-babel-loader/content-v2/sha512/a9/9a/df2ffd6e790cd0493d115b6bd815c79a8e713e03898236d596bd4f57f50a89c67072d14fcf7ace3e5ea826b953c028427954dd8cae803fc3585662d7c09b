{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\CodingMentor\\\\CodingMentor-FE\\\\src\\\\components\\\\Global\\\\CourseList\\\\CourseListDetail\\\\EditSelfCourse\\\\EditSelfCourse.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card } from 'antd';\nimport moment from 'moment';\nimport { useRouter } from 'next/router';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { cancelScheduleSelfCourse, checkStudyTimeSelfCourse, checkTeacherSelfCourse, courseApi, dayOffApi, getScheduleSelfCourse, studyTimeApi, updateScheduleSelfCourse } from '~/apiBase';\nimport Schedule from '~/components/Global/CreateCourse/Schedule/Schedule';\nimport ScheduleList from '~/components/Global/CreateCourse/Schedule/ScheduleList';\nimport CreateSelfCourseCalendar from '~/components/Global/CreateSelfCourse/Calendar/CreateSelfCourseCalendar';\nimport SaveSelfCourse from '~/components/Global/CreateSelfCourse/SaveSelfCourse';\nimport ScheduleSelfItem from '~/components/Global/CreateSelfCourse/ScheduleSelf/ScheduleSelfItem';\nimport TitlePage from '~/components/TitlePage';\nimport { useWrap } from '~/context/wrap';\nimport { fmArrayToObjectWithSpecialKey, fmSelectArr } from '~/utils/functions'; // Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\n// ------------ MAIN COMPONENT ------------------\n\nconst EditSelfCourse = props => {\n  const router = useRouter();\n  const {\n    slug: courseID\n  } = router.query; // -----------STATE-----------\n  // CREATE COURSE FORM STATE\n\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: studyTimeList,\n    1: setStudyTimeList\n  } = useState([]); //Lesson\n\n  const {\n    0: scheduleList,\n    1: setScheduleList\n  } = useState({\n    available: [],\n    unavailable: []\n  });\n  const {\n    0: optionListForADay,\n    1: setOptionListForADay\n  } = useState({\n    optionStudyTimeList: [],\n    optionTeacherList: []\n  }); //StudyDay\n\n  const {\n    0: calendarList,\n    1: setCalendarList\n  } = useState([]); // SCHEDULE TO SHOW ON MODAL\n\n  const {\n    0: scheduleShow,\n    1: setScheduleShow\n  } = useState({}); // CALENDAR MODAL\n\n  const {\n    0: dataModalCalendar,\n    1: setDataModalCalendar\n  } = useState({\n    dateString: '',\n    scheduleList: []\n  }); // EDIT\n\n  const {\n    0: isShowSaveBtnGroup,\n    1: setIsShowSaveBtnGroup\n  } = useState(false);\n  const {\n    0: scheduleListToSave,\n    1: setScheduleListToSave\n  } = useState([]);\n  const stoneScheduleArranged = useRef([]);\n  const stoneScheduleListToFindDifference = useRef([]); // -----------SCHEDULE-----------\n\n  const isValidRegisterCourse = date => {\n    //user must select study time before 24h\n    const checkDate = `${dataModalCalendar.dateString} ${date}`;\n    const now = moment(checkDate).format();\n    const nextDay = moment().add(1, 'days').format();\n    const rs = moment(now).isSameOrAfter(nextDay);\n    return rs;\n  };\n\n  const studyTimeOverFlow = scheduleList => {\n    let rs = false;\n    const studyTimeIdList = scheduleList.map(s => s.StudyTimeID).filter(Boolean); // COMPARE STUDY TIME RETURN TRUE IF INVALID\n\n    for (let i = 0; i < studyTimeIdList.length - 1; i++) {\n      const time1 = studyTimeList.find(s => s.ID === studyTimeIdList[i]);\n      const s1 = +time1.TimeStart.replace(':', '');\n      const e1 = +time1.TimeEnd.replace(':', '');\n\n      for (let j = i + 1; j < studyTimeIdList.length; j++) {\n        const time2 = studyTimeList.find(s => s.ID === studyTimeIdList[j]);\n        const s2 = +time2.TimeStart.replace(':', '');\n        const e2 = +time2.TimeEnd.replace(':', '');\n\n        if (time1.ID === time2.ID || s1 < s2 && e1 > e2 && s1 < e2 || s1 > s2 && e1 > e2 && s1 < e2 || s1 < s2 && e1 < e2 && e1 > s2 || s1 > s2 && e1 < e2) {\n          rs = true;\n        }\n      }\n    }\n\n    return rs;\n  };\n\n  const getNewValueForSchedule = (uid, date, key, vl) => {\n    var _optionListForADay$op, _newOptionStudyTimeLi, _optionListForADay$op2, _newOptionTeacherList;\n\n    switch (key) {\n      case 'CaID':\n        const optionStudyTimeList = ((_optionListForADay$op = optionListForADay.optionStudyTimeList.find(o => o.id === uid)) === null || _optionListForADay$op === void 0 ? void 0 : _optionListForADay$op.list) || [];\n        const newOptionStudyTimeList = [...optionStudyTimeList];\n        const StudyTimeName = (_newOptionStudyTimeLi = newOptionStudyTimeList.find(o => o.value === vl)) === null || _newOptionStudyTimeLi === void 0 ? void 0 : _newOptionStudyTimeLi.title;\n        return {\n          TeacherID: 0,\n          TeacherName: 'Giáo viên trống',\n          StudyTimeName,\n          StudyTimeID: vl\n        };\n\n      case 'TeacherID':\n        const optionTeacherList = ((_optionListForADay$op2 = optionListForADay.optionTeacherList.find(o => o.id === uid)) === null || _optionListForADay$op2 === void 0 ? void 0 : _optionListForADay$op2.list) || [];\n        const newOptionTeacherList = [...optionTeacherList];\n        const teacherName = (_newOptionTeacherList = newOptionTeacherList.find(o => o.value === vl)) === null || _newOptionTeacherList === void 0 ? void 0 : _newOptionTeacherList.title;\n        return {\n          TeacherName: vl ? teacherName : 'Giáo viên trống',\n          [key]: vl\n        };\n\n      default:\n        break;\n    }\n  };\n\n  const getNewUnavailableScheduleList = (uid, key, vl) => {\n    const {\n      unavailable\n    } = scheduleList;\n    const newUnavailable = [...unavailable];\n    const idxSchedule = newUnavailable.findIndex(s => s.ID === uid); // DATE TO CHECK DUPLICATE VALUE\n\n    let date = '';\n\n    if (idxSchedule >= 0) {\n      const schedule = newUnavailable[idxSchedule];\n      date = schedule.Date;\n      const newVl = getNewValueForSchedule(uid, date, key, vl);\n\n      const newSchedule = _objectSpread(_objectSpread({}, schedule), newVl);\n\n      newUnavailable.splice(idxSchedule, 1, newSchedule);\n    }\n\n    return {\n      date,\n      rs: newUnavailable\n    };\n  };\n\n  const changeValueSchedule = (uid, key, vl) => {\n    const {\n      rs: newUnavailableScheduleList,\n      date\n    } = getNewUnavailableScheduleList(uid, key, vl);\n    const scheduleList = newUnavailableScheduleList.filter(s => s.Date === date);\n\n    if (studyTimeOverFlow(scheduleList)) {\n      showNoti('danger', 'Dữ liệu không phù hợp');\n    }\n\n    setDataModalCalendar(_objectSpread(_objectSpread({}, dataModalCalendar), {}, {\n      scheduleList: scheduleList\n    }));\n    setScheduleList(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      unavailable: newUnavailableScheduleList\n    }));\n  };\n\n  const changeStatusSchedule = (sch, type = 1) => {\n    if (!dataModalCalendar.dateString) {\n      showNoti('danger', 'Bạn chưa chọn ngày');\n      return false;\n    }\n\n    const newScheduleUnavailableList = [...scheduleList.unavailable];\n    const newScheduleAvailableList = [...scheduleList.available];\n    const fmDate = moment(dataModalCalendar.dateString).format('YYYY/MM/DD'); // type = 2 => unavailable to available\n\n    if (type === 2) {\n      const idx = newScheduleUnavailableList.findIndex(s => s.ID === sch.ID);\n\n      const newScheduleObj = _objectSpread(_objectSpread({}, newScheduleUnavailableList[idx]), {}, {\n        Date: fmDate\n      });\n\n      newScheduleUnavailableList.splice(idx, 1);\n      newScheduleAvailableList.push(newScheduleObj);\n    } // type = 1 => available to unavailable\n\n\n    if (type === 1) {\n      const idx = newScheduleAvailableList.findIndex(s => s.ID === sch.ID);\n\n      const newScheduleObj = _objectSpread(_objectSpread({}, newScheduleAvailableList[idx]), {}, {\n        Date: fmDate\n      });\n\n      newScheduleAvailableList.splice(idx, 1);\n      newScheduleUnavailableList.push(newScheduleObj);\n    }\n\n    setScheduleList(_objectSpread(_objectSpread({}, scheduleList), {}, {\n      available: newScheduleAvailableList,\n      unavailable: newScheduleUnavailableList\n    }));\n    return true;\n  }; // -----------CALENDAR-----------\n\n\n  const calendarDateFormat = calendarArr => {\n    const {\n      unavailable\n    } = scheduleList;\n    const fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(unavailable, 'Date');\n    const rs = calendarArr.map((c, idx) => {\n      var _fmScheduleUnavailabl;\n\n      const scheduleListForADay = (_fmScheduleUnavailabl = fmScheduleUnavailableToObject[c.Day]) !== null && _fmScheduleUnavailabl !== void 0 && _fmScheduleUnavailabl.length ? fmScheduleUnavailableToObject[c.Day] : [];\n      return {\n        id: idx + 1,\n        title: '',\n        start: moment(c.Day).toDate(),\n        end: moment(c.Day).toDate(),\n        resource: {\n          dateString: c.Day,\n          scheduleList: scheduleListForADay\n        }\n      };\n    });\n    return rs;\n  };\n\n  const onToggleSchedule = (sch, type) => {\n    if (changeStatusSchedule(sch, type)) {\n      const newScheduleList = [...dataModalCalendar.scheduleList];\n      const idx = newScheduleList.findIndex(s => s.ID === sch.ID);\n\n      if (idx >= 0) {\n        newScheduleList.splice(idx, 1);\n      } else {\n        newScheduleList.push(sch);\n      }\n\n      setDataModalCalendar(_objectSpread(_objectSpread({}, dataModalCalendar), {}, {\n        scheduleList: newScheduleList\n      }));\n    }\n  };\n\n  const onCheckTeacherAvailable = async params => {\n    try {\n      const {\n        id,\n        teacherID\n      } = params,\n            rest = _objectWithoutProperties(params, [\"id\", \"teacherID\"]);\n\n      const idxInOptList = optionListForADay.optionTeacherList.findIndex(o => o.id === id);\n\n      if (!params.studyTimeID) {\n        setOptionListForADay(prevState => {\n          const newOptList = [...prevState.optionTeacherList];\n          newOptList.splice(idxInOptList, 1, _objectSpread(_objectSpread({}, prevState.optionTeacherList[idxInOptList]), {}, {\n            list: [{\n              title: '----Giáo viên trống----',\n              value: 0\n            }]\n          }));\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            optionTeacherList: newOptList\n          });\n        });\n        return false;\n      }\n\n      const res = await checkTeacherSelfCourse(rest);\n\n      if (res.status === 200) {\n        const newList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID');\n        const finalList = [{\n          title: '----Giáo viên trống----',\n          value: 0\n        }, ...newList];\n        const isHadTeacherInList = finalList.some(o => o.value === teacherID); // kiểm tra nếu như trong buổi học còn giữ lại giá trị cũ nhưng api lại không có giá trị thỏa giá trị cũ\n\n        if (!isHadTeacherInList) {\n          changeValueSchedule(id, 'TeacherID', 0);\n        }\n\n        setOptionListForADay(prevState => {\n          const newOptList = [...prevState.optionTeacherList];\n          newOptList.splice(idxInOptList, 1, _objectSpread(_objectSpread({}, prevState.optionTeacherList[idxInOptList]), {}, {\n            list: finalList\n          }));\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            optionTeacherList: newOptList\n          });\n        });\n        return true;\n      }\n\n      if (res.status === 204) {\n        setOptionListForADay(prevState => {\n          const newOptList = [...prevState.optionTeacherList];\n          newOptList.splice(idxInOptList, 1, _objectSpread(_objectSpread({}, prevState.optionTeacherList[idxInOptList]), {}, {\n            list: [{\n              title: '----Giáo viên trống----',\n              value: 0\n            }]\n          }));\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            optionTeacherList: newOptList\n          });\n        });\n        return false;\n      }\n    } catch (error) {} finally {\n      setIsLoading({\n        type: 'CHECK_SCHEDULE',\n        status: false\n      });\n    }\n  };\n\n  const onCheckStudyTimeAvailable = async params => {\n    try {\n      setIsLoading({\n        type: 'CHECK_SCHEDULE',\n        status: true\n      });\n      const {\n        id,\n        date,\n        studyTimeID,\n        curriculumsDetailID\n      } = params;\n      const idxInOptList = optionListForADay.optionTeacherList.findIndex(o => o.id === id);\n      const res = await checkStudyTimeSelfCourse({\n        curriculumsDetailID,\n        date\n      });\n\n      if (res.status === 200) {\n        const validTimeList = res.data.data.filter(s => isValidRegisterCourse(s.TimeStart));\n        const newList = fmSelectArr(validTimeList, 'Name', 'ID', ['Time', 'TimeStart', 'TimeEnd']);\n        const finalList = [{\n          title: '----Ca học trống----',\n          value: 0\n        }, ...newList];\n        const isHadTeacherInList = finalList.some(o => o.value === studyTimeID); // kiểm tra nếu như trong buổi học còn giữ lại giá trị cũ nhưng api lại không có giá trị thỏa giá trị cũ\n\n        if (!isHadTeacherInList) {\n          changeValueSchedule(id, 'CaID', 0);\n        }\n\n        setOptionListForADay(prevState => {\n          const newOptList = [...prevState.optionStudyTimeList];\n          newOptList.splice(idxInOptList, 1, _objectSpread(_objectSpread({}, prevState.optionTeacherList[idxInOptList]), {}, {\n            list: finalList\n          }));\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            optionStudyTimeList: newOptList\n          });\n        });\n        return true;\n      }\n\n      if (res.status === 204) {\n        setOptionListForADay(prevState => {\n          const newOptList = [...prevState.optionStudyTimeList];\n          newOptList.splice(idxInOptList, 1, _objectSpread(_objectSpread({}, prevState.optionStudyTimeList[idxInOptList]), {}, {\n            list: [{\n              title: '----Giáo viên trống----',\n              value: 0\n            }]\n          }));\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            optionStudyTimeList: newOptList\n          });\n        });\n        return false;\n      }\n    } catch (error) {} finally {\n      setIsLoading({\n        type: 'CHECK_SCHEDULE',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (Array.isArray(dataModalCalendar.scheduleList) && dataModalCalendar.scheduleList.length >= 1) {\n      setIsLoading({\n        type: 'SCHEDULE_INVALID',\n        status: false\n      });\n      dataModalCalendar.scheduleList.forEach(s => {\n        const params = {\n          id: s.ID,\n          date: dataModalCalendar.dateString,\n          studyTimeID: s.StudyTimeID,\n          curriculumsDetailID: s.CurriculumsDetailID,\n          teacherID: s.TeacherID || 0\n        };\n        const now = moment().format();\n        const conditionDate = `${dataModalCalendar.dateString} ${s.TimeStart || '00:00'}`;\n        const isValid = moment(conditionDate).isSameOrAfter(now);\n\n        if (isValid) {\n          onCheckTeacherAvailable(params);\n          onCheckStudyTimeAvailable(params);\n        } else {\n          setIsLoading({\n            type: 'SCHEDULE_INVALID',\n            status: true\n          });\n        }\n      });\n    }\n  }, [dataModalCalendar.scheduleList]); // -----------SAVE COURSE-----------\n\n  const onFindScheduleChanged = arr => {\n    const {\n      current: list\n    } = stoneScheduleListToFindDifference;\n    const rs = [];\n\n    for (let i = 0, len = arr.length; i < len; i++) {\n      const s = arr[i];\n\n      if (typeof s.ID === 'string') {\n        rs.push(s);\n        continue;\n      }\n\n      for (let i2 = 0; i2 < list.length; i2++) {\n        const s2 = list[i2];\n\n        if (s.ID === s2.ID && (moment(s.Date).format('YYYY/MM/DD') !== moment(s2.Date).format('YYYY/MM/DD') || s.StudyTimeID !== s2.StudyTimeID || s.TeacherID !== s2.TeacherID)) {\n          // Date, StudyTimeID, TeacherID\n          rs.push(s);\n        }\n      }\n    }\n\n    return rs;\n  };\n\n  const onValidateDateToSave = arr => {\n    const {\n      unavailable\n    } = scheduleList;\n    const rs = {\n      show: [],\n      save: []\n    };\n\n    for (let i = 0, len = arr.length; i < len; i++) {\n      var _studyTimeList$find;\n\n      const s = arr[i];\n      const {\n        ID,\n        Date,\n        TeacherID,\n        TeacherName,\n        StudyTimeID\n      } = s;\n      const dayArr = ['Chủ Nhật', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'];\n      const dayOffWeek = dayArr[moment(s.Date).day()];\n      let isValid = !s.TeacherID;\n\n      for (let i2 = 0; i2 < unavailable.length; i2++) {\n        const s2 = unavailable[i2];\n\n        if (s.ID !== s2.ID && s.Date === s2.Date) {\n          if (studyTimeOverFlow([s, s2])) {\n            isValid = true;\n            break;\n          }\n\n          if (s.StudyTimeID === s2.StudyTimeID) {\n            isValid = true;\n            break;\n          }\n        }\n      }\n\n      rs.show.push({\n        ID: typeof ID === 'string' ? 0 : ID,\n        Date,\n        dayOffWeek,\n        StudyTimeID,\n        studyTimeName: ((_studyTimeList$find = studyTimeList.find(s => s.ID === StudyTimeID)) === null || _studyTimeList$find === void 0 ? void 0 : _studyTimeList$find.Name) || '---Ca học trống---',\n        TeacherID,\n        teacherName: TeacherName || '---Giáo viên trống---',\n        isValid\n      });\n      rs.save.push({\n        ID: typeof ID === 'string' ? 0 : ID,\n        Date,\n        StudyTimeID,\n        TeacherID\n      });\n    }\n\n    return rs;\n  };\n\n  const onFetchDataToSave = () => {\n    const {\n      unavailable\n    } = scheduleList;\n    const scheduleListChanged = onFindScheduleChanged(unavailable);\n    const {\n      show,\n      save\n    } = onValidateDateToSave(scheduleListChanged);\n    const scheduleListSorted = show.sort((a, b) => moment(a.Date).valueOf() - moment(b.Date).valueOf());\n    const fmScheduleListToShow = fmArrayToObjectWithSpecialKey(scheduleListSorted, 'Date');\n    setScheduleShow(fmScheduleListToShow);\n    setScheduleListToSave(save);\n  };\n\n  const onSaveCourse = async () => {\n    setIsLoading({\n      type: 'SAVE_COURSE',\n      status: true\n    });\n    let res;\n\n    try {\n      const haveErrors = Object.keys(scheduleShow).find((date, idx) => scheduleShow[date].find(s => s.isValid));\n\n      if (haveErrors) {\n        showNoti('danger', 'Đã xảy ra lỗi. Xin kiểm tra lại');\n        return;\n      }\n\n      if (!scheduleListToSave.length) {\n        showNoti('danger', 'Bạn chưa đăng ký buổi học nào');\n        return;\n      }\n\n      const res = await Promise.all(scheduleListToSave.map(s => updateScheduleSelfCourse(s)));\n\n      if (res.every(r => r.status === 200)) {\n        fetchAvailableSchedule();\n        showNoti('success', 'Đăng ký thành công!');\n      } else {\n        showNoti('danger', 'Có lỗi xảy ra');\n      }\n    } catch (error) {\n      if (error.status === 400) {\n        showNoti('danger', error.message);\n      }\n\n      console.log('onSaveCourse', error.message);\n    } finally {\n      setIsLoading({\n        type: 'SAVE_COURSE',\n        status: false\n      });\n    }\n\n    return res;\n  }; // -----------EDIT COURSE-----------\n\n\n  const fetchStudyTimeList = async () => {\n    try {\n      const res = await studyTimeApi.getAll({\n        selectAll: true\n      });\n\n      if (res.status === 200) {\n        setStudyTimeList(res.data.data);\n      }\n\n      return [];\n    } catch (error) {\n      console.log('fetchDayOffList', error.message);\n    }\n  };\n\n  const fetchDayOffList = async eDate => {\n    try {\n      const res = await dayOffApi.getAll({\n        selectAll: true,\n        toDate: eDate\n      });\n\n      if (res.status === 200) {\n        return res.data.data.map(r => moment(r.DayOff).format('YYYY/MM/DD'));\n      }\n\n      return [];\n    } catch (error) {\n      console.log('fetchDayOffList', error.message);\n    }\n  };\n\n  const createCalendarBlankList = async eDate => {\n    const dates = [];\n    const currDate = moment().startOf('day');\n    const lastDate = moment(eDate).startOf('day');\n    const dayOffList = await fetchDayOffList(eDate);\n\n    do {\n      const Day = currDate.clone().format('YYYY/MM/DD');\n\n      if (!dayOffList.includes(Day)) {\n        dates.push({\n          Day\n        });\n      }\n    } while (currDate.add(1, 'days').diff(lastDate) <= 0);\n\n    return dates;\n  };\n\n  const fmOptionList = (arranged, inarranged) => {\n    const fm = (arr, tt, vl) => arr.map(s => ({\n      id: +s.ID,\n      list: [{\n        title: s[tt] || '',\n        value: s[vl]\n      }]\n    }));\n\n    const optionStudyTimeListArranged = fm(arranged, 'StudyTimeName', 'StudyTimeID');\n    const optionStudyTimeListInarranged = fm(inarranged, 'StudyTimeName', 'StudyTimeID');\n    const optionTeacherListSchedulesArranged = fm(arranged, 'TeacherName', 'TeacherID');\n    const optionTeacherListSchedulesInarranged = fm(inarranged, 'TeacherName', 'TeacherID');\n    return {\n      optionStudyTimeList: optionStudyTimeListArranged.concat(optionStudyTimeListInarranged),\n      optionTeacherList: optionTeacherListSchedulesArranged.concat(optionTeacherListSchedulesInarranged)\n    };\n  };\n\n  const fetchAvailableSchedule = async () => {\n    setIsShowSaveBtnGroup(false);\n    setIsLoading({\n      type: 'FETCH_SCHEDULE',\n      status: true\n    });\n\n    try {\n      const courseIDInt = parseInt(courseID);\n      const [courseInfo, courseSchedule] = await Promise.all([courseApi.getById(courseIDInt), getScheduleSelfCourse(courseIDInt)]);\n\n      if (courseInfo.status === 200) {\n        const {\n          EndDay\n        } = courseInfo.data.data;\n        const calendarBlankList = await createCalendarBlankList(EndDay);\n        setCalendarList(calendarBlankList);\n      }\n\n      if (courseSchedule.status === 200) {\n        const {\n          courseSchedulesArranged,\n          courseSchedulesInarranged\n        } = courseSchedule.data;\n        const totalSchedule = [...courseSchedulesArranged, ...courseSchedulesInarranged];\n        const optionList = fmOptionList(courseSchedulesArranged, courseSchedulesInarranged);\n        setScheduleList({\n          unavailable: courseSchedulesArranged.map(s => _objectSpread(_objectSpread({}, s), {}, {\n            Date: moment(s.Date).format('YYYY/MM/DD')\n          })),\n          available: courseSchedulesInarranged.map(s => _objectSpread(_objectSpread({}, s), {}, {\n            Date: moment(s.Date).format('YYYY/MM/DD')\n          }))\n        });\n        setOptionListForADay(optionList);\n        stoneScheduleArranged.current = courseSchedulesArranged;\n        stoneScheduleListToFindDifference.current = totalSchedule;\n      }\n\n      setIsShowSaveBtnGroup(true);\n      setIsLoading({\n        type: 'FETCH_SCHEDULE',\n        status: false\n      });\n    } catch (error) {\n      showNoti('error', error.message);\n    }\n  }; // -----------CANCEL SCHEDULE-----------\n\n\n  const isValidCancelCourse = sch => {\n    //user must cancel study time before 5h\n    const {\n      ID,\n      StudyTimeID\n    } = sch;\n    const {\n      current: checkList\n    } = stoneScheduleArranged;\n    if (!StudyTimeID || !checkList.some(s => s.ID === ID)) return false;\n    const nextFiveHours = moment().add(5, 'hours').format();\n    const rs = moment().isSameOrBefore(nextFiveHours);\n    return rs;\n  };\n\n  const onCancelSchedule = async sch => {\n    try {\n      setIsLoading({\n        type: 'CANCEL_SCHEDULE',\n        status: false\n      });\n      const {\n        ID\n      } = sch;\n      const res = await cancelScheduleSelfCourse(ID);\n\n      if (res.status === 200) {\n        onToggleSchedule(sch, 2);\n        fetchAvailableSchedule();\n        showNoti('success', 'Hủy lịch học thành công');\n      }\n    } catch (error) {\n      console.log('onCancelSchedule', error.message);\n    } finally {\n      setIsLoading({\n        type: 'CANCEL_SCHEDULE',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n\n    if (isMounted) {\n      fetchStudyTimeList();\n      fetchAvailableSchedule();\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-course edit-course\",\n    children: [/*#__PURE__*/_jsxDEV(TitlePage, {\n      title: \"C\\u1EADp nh\\u1EADt kh\\xF3a h\\u1ECDc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8 col-12\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                marginBottom: 0\n              },\n              children: \"S\\u1EAFp x\\u1EBFp l\\u1ECBch h\\u1ECDc\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: 13,\n                color: '#bfbfcb'\n              },\n              children: \"Ch\\u1EC9 \\u0111\\u01B0\\u1EE3c x\\u1EBFp bu\\u1ED5i h\\u1ECDc tr\\u01B0\\u1EDBc 24 ti\\u1EBFng, h\\u1EE7y bu\\u1ED5i h\\u1ECDc tr\\u01B0\\u1EDBc 5 ti\\u1EBFng.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true),\n          extra: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btn-page-course\",\n              children: isShowSaveBtnGroup && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(SaveSelfCourse, {\n                  isEdit: true,\n                  isLoading: isLoading,\n                  scheduleShow: scheduleShow,\n                  handleSaveCourse: onSaveCourse,\n                  handleFetchDataToSave: onFetchDataToSave\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 658,\n                  columnNumber: 12\n                }, this)\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 9\n            }, this)\n          }, void 0, false),\n          children: /*#__PURE__*/_jsxDEV(CreateSelfCourseCalendar, {\n            eventList: calendarDateFormat(calendarList),\n            isLoaded: isLoading.type === 'FETCH_SCHEDULE' && isLoading.status ? false : true //\n            ,\n            handleSetDataModalCalendar: setDataModalCalendar,\n            dataModalCalendar: dataModalCalendar //\n            ,\n            unAvailableList: /*#__PURE__*/_jsxDEV(Schedule, {\n              children: /*#__PURE__*/_jsxDEV(ScheduleList, {\n                children: scheduleList.available.map((s, idx) => /*#__PURE__*/_jsxDEV(ScheduleSelfItem, {\n                  scheduleObj: s,\n                  handleChangeStatusSchedule: onToggleSchedule,\n                  isEditView: true\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 682,\n                  columnNumber: 12\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 680,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 9\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(ScheduleList, {\n              panelActiveListInModal: dataModalCalendar.scheduleList.map((_, idx) => idx),\n              children: dataModalCalendar.scheduleList.map((s, idx) => {\n                var _optionListForADay$op3, _optionListForADay$op4;\n\n                return /*#__PURE__*/_jsxDEV(ScheduleSelfItem, {\n                  isUnavailable: true,\n                  isEditView: true,\n                  scheduleObj: s,\n                  isLoading: isLoading,\n                  handleChangeValueSchedule: changeValueSchedule,\n                  handleChangeStatusSchedule: onToggleSchedule,\n                  optionTeacherList: ((_optionListForADay$op3 = optionListForADay.optionTeacherList.find(o => o.id === s.ID)) === null || _optionListForADay$op3 === void 0 ? void 0 : _optionListForADay$op3.list) || [],\n                  optionStudyTime: ((_optionListForADay$op4 = optionListForADay.optionStudyTimeList.find(o => o.id === s.ID)) === null || _optionListForADay$op4 === void 0 ? void 0 : _optionListForADay$op4.list) || [],\n                  isCancelSchedule: isValidCancelCourse(s),\n                  handleCancelSchedule: onCancelSchedule // handleAheadSchedule={onAheadSchedule}\n                  // isClickAheadSchedule={isClickAheadSchedule}\n\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 695,\n                  columnNumber: 10\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 col-12 d-none d-md-block\",\n        children: /*#__PURE__*/_jsxDEV(Schedule, {\n          children: /*#__PURE__*/_jsxDEV(ScheduleList, {\n            children: scheduleList.available.map((s, idx) => /*#__PURE__*/_jsxDEV(ScheduleSelfItem, {\n              scheduleObj: s,\n              handleChangeStatusSchedule: onToggleSchedule,\n              isEditView: true\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 640,\n    columnNumber: 3\n  }, this);\n};\n\nexport default EditSelfCourse;","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/components/Global/CourseList/CourseListDetail/EditSelfCourse/EditSelfCourse.tsx"],"names":["Card","moment","useRouter","React","useEffect","useRef","useState","cancelScheduleSelfCourse","checkStudyTimeSelfCourse","checkTeacherSelfCourse","courseApi","dayOffApi","getScheduleSelfCourse","studyTimeApi","updateScheduleSelfCourse","Schedule","ScheduleList","CreateSelfCourseCalendar","SaveSelfCourse","ScheduleSelfItem","TitlePage","useWrap","fmArrayToObjectWithSpecialKey","fmSelectArr","EditSelfCourse","props","router","slug","courseID","query","showNoti","isLoading","setIsLoading","type","status","studyTimeList","setStudyTimeList","scheduleList","setScheduleList","available","unavailable","optionListForADay","setOptionListForADay","optionStudyTimeList","optionTeacherList","calendarList","setCalendarList","scheduleShow","setScheduleShow","dataModalCalendar","setDataModalCalendar","dateString","isShowSaveBtnGroup","setIsShowSaveBtnGroup","scheduleListToSave","setScheduleListToSave","stoneScheduleArranged","stoneScheduleListToFindDifference","isValidRegisterCourse","date","checkDate","now","format","nextDay","add","rs","isSameOrAfter","studyTimeOverFlow","studyTimeIdList","map","s","StudyTimeID","filter","Boolean","i","length","time1","find","ID","s1","TimeStart","replace","e1","TimeEnd","j","time2","s2","e2","getNewValueForSchedule","uid","key","vl","o","id","list","newOptionStudyTimeList","StudyTimeName","value","title","TeacherID","TeacherName","newOptionTeacherList","teacherName","getNewUnavailableScheduleList","newUnavailable","idxSchedule","findIndex","schedule","Date","newVl","newSchedule","splice","changeValueSchedule","newUnavailableScheduleList","prevState","changeStatusSchedule","sch","newScheduleUnavailableList","newScheduleAvailableList","fmDate","idx","newScheduleObj","push","calendarDateFormat","calendarArr","fmScheduleUnavailableToObject","c","scheduleListForADay","Day","start","toDate","end","resource","onToggleSchedule","newScheduleList","onCheckTeacherAvailable","params","teacherID","rest","idxInOptList","studyTimeID","newOptList","res","newList","data","finalList","isHadTeacherInList","some","error","onCheckStudyTimeAvailable","curriculumsDetailID","validTimeList","Array","isArray","forEach","CurriculumsDetailID","conditionDate","isValid","onFindScheduleChanged","arr","current","len","i2","onValidateDateToSave","show","save","dayArr","dayOffWeek","day","studyTimeName","Name","onFetchDataToSave","scheduleListChanged","scheduleListSorted","sort","a","b","valueOf","fmScheduleListToShow","onSaveCourse","haveErrors","Object","keys","Promise","all","every","r","fetchAvailableSchedule","message","console","log","fetchStudyTimeList","getAll","selectAll","fetchDayOffList","eDate","DayOff","createCalendarBlankList","dates","currDate","startOf","lastDate","dayOffList","clone","includes","diff","fmOptionList","arranged","inarranged","fm","tt","optionStudyTimeListArranged","optionStudyTimeListInarranged","optionTeacherListSchedulesArranged","optionTeacherListSchedulesInarranged","concat","courseIDInt","parseInt","courseInfo","courseSchedule","getById","EndDay","calendarBlankList","courseSchedulesArranged","courseSchedulesInarranged","totalSchedule","optionList","isValidCancelCourse","checkList","nextFiveHours","isSameOrBefore","onCancelSchedule","isMounted","marginBottom","fontSize","color","_"],"mappings":"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","sourcesContent":["import { Card } from 'antd';\r\nimport moment from 'moment';\r\nimport { useRouter } from 'next/router';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n\tcancelScheduleSelfCourse,\r\n\tcheckStudyTimeSelfCourse,\r\n\tcheckTeacherSelfCourse,\r\n\tcourseApi,\r\n\tdayOffApi,\r\n\tgetScheduleSelfCourse,\r\n\tstudyTimeApi,\r\n\tupdateScheduleSelfCourse\r\n} from '~/apiBase';\r\nimport Schedule from '~/components/Global/CreateCourse/Schedule/Schedule';\r\nimport ScheduleList from '~/components/Global/CreateCourse/Schedule/ScheduleList';\r\nimport CreateSelfCourseCalendar from '~/components/Global/CreateSelfCourse/Calendar/CreateSelfCourseCalendar';\r\nimport SaveSelfCourse from '~/components/Global/CreateSelfCourse/SaveSelfCourse';\r\nimport ScheduleSelfItem from '~/components/Global/CreateSelfCourse/ScheduleSelf/ScheduleSelfItem';\r\nimport TitlePage from '~/components/TitlePage';\r\nimport { useWrap } from '~/context/wrap';\r\nimport { fmArrayToObjectWithSpecialKey, fmSelectArr } from '~/utils/functions';\r\n\r\n// Setup the localizer by providing the moment (or globalize) Object\r\n// to the correct localizer.\r\n\r\n// ------------ MAIN COMPONENT ------------------\r\nconst EditSelfCourse = (props) => {\r\n\tconst router = useRouter();\r\n\tconst { slug: courseID } = router.query;\r\n\t// -----------STATE-----------\r\n\t// CREATE COURSE FORM STATE\r\n\tconst { showNoti } = useWrap();\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t});\r\n\tconst [studyTimeList, setStudyTimeList] = useState<IStudyTime[]>([]);\r\n\t//Lesson\r\n\tconst [scheduleList, setScheduleList] = useState<ISCCreateScheduleList>({\r\n\t\tavailable: [],\r\n\t\tunavailable: []\r\n\t});\r\n\tconst [optionListForADay, setOptionListForADay] = useState<ISCOptionListForADay>({\r\n\t\toptionStudyTimeList: [],\r\n\t\toptionTeacherList: []\r\n\t});\r\n\t//StudyDay\r\n\tconst [calendarList, setCalendarList] = useState<IStudyDay[]>([]);\r\n\t// SCHEDULE TO SHOW ON MODAL\r\n\tconst [scheduleShow, setScheduleShow] = useState<ISCCreateScheduleShowList>({});\r\n\t// CALENDAR MODAL\r\n\tconst [dataModalCalendar, setDataModalCalendar] = useState<ISCDataModal>({\r\n\t\tdateString: '',\r\n\t\tscheduleList: []\r\n\t});\r\n\t// EDIT\r\n\tconst [isShowSaveBtnGroup, setIsShowSaveBtnGroup] = useState(false);\r\n\tconst [scheduleListToSave, setScheduleListToSave] = useState<ICSScheduleToSave[]>([]);\r\n\tconst stoneScheduleArranged = useRef<ISCSchedule[]>([]);\r\n\tconst stoneScheduleListToFindDifference = useRef<ISCSchedule[]>([]);\r\n\t// -----------SCHEDULE-----------\r\n\tconst isValidRegisterCourse = (date?: string) => {\r\n\t\t//user must select study time before 24h\r\n\t\tconst checkDate = `${dataModalCalendar.dateString} ${date}`;\r\n\t\tconst now = moment(checkDate).format();\r\n\t\tconst nextDay = moment().add(1, 'days').format();\r\n\t\tconst rs = moment(now).isSameOrAfter(nextDay);\r\n\t\treturn rs;\r\n\t};\r\n\tconst studyTimeOverFlow = (scheduleList: ISCSchedule[]) => {\r\n\t\tlet rs = false;\r\n\t\tconst studyTimeIdList = scheduleList.map((s) => s.StudyTimeID).filter(Boolean);\r\n\t\t// COMPARE STUDY TIME RETURN TRUE IF INVALID\r\n\t\tfor (let i = 0; i < studyTimeIdList.length - 1; i++) {\r\n\t\t\tconst time1 = studyTimeList.find((s) => s.ID === studyTimeIdList[i]);\r\n\t\t\tconst s1 = +time1.TimeStart.replace(':', '');\r\n\t\t\tconst e1 = +time1.TimeEnd.replace(':', '');\r\n\r\n\t\t\tfor (let j = i + 1; j < studyTimeIdList.length; j++) {\r\n\t\t\t\tconst time2 = studyTimeList.find((s) => s.ID === studyTimeIdList[j]);\r\n\t\t\t\tconst s2 = +time2.TimeStart.replace(':', '');\r\n\t\t\t\tconst e2 = +time2.TimeEnd.replace(':', '');\r\n\t\t\t\tif (\r\n\t\t\t\t\ttime1.ID === time2.ID ||\r\n\t\t\t\t\t(s1 < s2 && e1 > e2 && s1 < e2) ||\r\n\t\t\t\t\t(s1 > s2 && e1 > e2 && s1 < e2) ||\r\n\t\t\t\t\t(s1 < s2 && e1 < e2 && e1 > s2) ||\r\n\t\t\t\t\t(s1 > s2 && e1 < e2)\r\n\t\t\t\t) {\r\n\t\t\t\t\trs = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rs;\r\n\t};\r\n\tconst getNewValueForSchedule = (uid: number, date: string, key: 'CaID' | 'TeacherID', vl: number) => {\r\n\t\tswitch (key) {\r\n\t\t\tcase 'CaID':\r\n\t\t\t\tconst optionStudyTimeList = optionListForADay.optionStudyTimeList.find((o) => o.id === uid)?.list || [];\r\n\t\t\t\tconst newOptionStudyTimeList = [...optionStudyTimeList];\r\n\t\t\t\tconst StudyTimeName = newOptionStudyTimeList.find((o) => o.value === vl)?.title;\r\n\t\t\t\treturn {\r\n\t\t\t\t\tTeacherID: 0,\r\n\t\t\t\t\tTeacherName: 'Giáo viên trống',\r\n\t\t\t\t\tStudyTimeName,\r\n\t\t\t\t\tStudyTimeID: vl\r\n\t\t\t\t};\r\n\t\t\tcase 'TeacherID':\r\n\t\t\t\tconst optionTeacherList = optionListForADay.optionTeacherList.find((o) => o.id === uid)?.list || [];\r\n\t\t\t\tconst newOptionTeacherList = [...optionTeacherList];\r\n\t\t\t\tconst teacherName = newOptionTeacherList.find((o) => o.value === vl)?.title;\r\n\t\t\t\treturn {\r\n\t\t\t\t\tTeacherName: vl ? teacherName : 'Giáo viên trống',\r\n\t\t\t\t\t[key]: vl\r\n\t\t\t\t};\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\tconst getNewUnavailableScheduleList = (uid: number, key: 'CaID' | 'TeacherID', vl: number) => {\r\n\t\tconst { unavailable } = scheduleList;\r\n\t\tconst newUnavailable = [...unavailable];\r\n\r\n\t\tconst idxSchedule = newUnavailable.findIndex((s) => s.ID === uid);\r\n\t\t// DATE TO CHECK DUPLICATE VALUE\r\n\t\tlet date: string = '';\r\n\t\tif (idxSchedule >= 0) {\r\n\t\t\tconst schedule = newUnavailable[idxSchedule];\r\n\t\t\tdate = schedule.Date;\r\n\t\t\tconst newVl = getNewValueForSchedule(uid, date, key, vl);\r\n\t\t\tconst newSchedule = {\r\n\t\t\t\t...schedule,\r\n\t\t\t\t...newVl\r\n\t\t\t};\r\n\t\t\tnewUnavailable.splice(idxSchedule, 1, newSchedule);\r\n\t\t}\r\n\r\n\t\treturn { date, rs: newUnavailable };\r\n\t};\r\n\tconst changeValueSchedule = (uid: number, key: 'CaID' | 'TeacherID', vl: number) => {\r\n\t\tconst { rs: newUnavailableScheduleList, date } = getNewUnavailableScheduleList(uid, key, vl);\r\n\t\tconst scheduleList = newUnavailableScheduleList.filter((s) => s.Date === date);\r\n\t\tif (studyTimeOverFlow(scheduleList)) {\r\n\t\t\tshowNoti('danger', 'Dữ liệu không phù hợp');\r\n\t\t}\r\n\t\tsetDataModalCalendar({\r\n\t\t\t...dataModalCalendar,\r\n\t\t\tscheduleList: scheduleList\r\n\t\t});\r\n\t\tsetScheduleList((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tunavailable: newUnavailableScheduleList\r\n\t\t}));\r\n\t};\r\n\tconst changeStatusSchedule = (sch: ISCSchedule, type: number = 1) => {\r\n\t\tif (!dataModalCalendar.dateString) {\r\n\t\t\tshowNoti('danger', 'Bạn chưa chọn ngày');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst newScheduleUnavailableList = [...scheduleList.unavailable];\r\n\t\tconst newScheduleAvailableList = [...scheduleList.available];\r\n\t\tconst fmDate = moment(dataModalCalendar.dateString).format('YYYY/MM/DD');\r\n\t\t// type = 2 => unavailable to available\r\n\t\tif (type === 2) {\r\n\t\t\tconst idx = newScheduleUnavailableList.findIndex((s) => s.ID === sch.ID);\r\n\t\t\tconst newScheduleObj = {\r\n\t\t\t\t...newScheduleUnavailableList[idx],\r\n\t\t\t\tDate: fmDate\r\n\t\t\t};\r\n\t\t\tnewScheduleUnavailableList.splice(idx, 1);\r\n\t\t\tnewScheduleAvailableList.push(newScheduleObj);\r\n\t\t}\r\n\t\t// type = 1 => available to unavailable\r\n\t\tif (type === 1) {\r\n\t\t\tconst idx = newScheduleAvailableList.findIndex((s) => s.ID === sch.ID);\r\n\t\t\tconst newScheduleObj = {\r\n\t\t\t\t...newScheduleAvailableList[idx],\r\n\t\t\t\tDate: fmDate\r\n\t\t\t};\r\n\t\t\tnewScheduleAvailableList.splice(idx, 1);\r\n\t\t\tnewScheduleUnavailableList.push(newScheduleObj);\r\n\t\t}\r\n\t\tsetScheduleList({\r\n\t\t\t...scheduleList,\r\n\t\t\tavailable: newScheduleAvailableList,\r\n\t\t\tunavailable: newScheduleUnavailableList\r\n\t\t});\r\n\t\treturn true;\r\n\t};\r\n\t// -----------CALENDAR-----------\r\n\tconst calendarDateFormat = (calendarArr: { Day: string }[]) => {\r\n\t\tconst { unavailable } = scheduleList;\r\n\t\tconst fmScheduleUnavailableToObject = fmArrayToObjectWithSpecialKey(unavailable, 'Date');\r\n\t\tconst rs = calendarArr.map((c, idx) => {\r\n\t\t\tconst scheduleListForADay = fmScheduleUnavailableToObject[c.Day]?.length ? fmScheduleUnavailableToObject[c.Day] : [];\r\n\t\t\treturn {\r\n\t\t\t\tid: idx + 1,\r\n\t\t\t\ttitle: '',\r\n\t\t\t\tstart: moment(c.Day).toDate(),\r\n\t\t\t\tend: moment(c.Day).toDate(),\r\n\t\t\t\tresource: {\r\n\t\t\t\t\tdateString: c.Day,\r\n\t\t\t\t\tscheduleList: scheduleListForADay\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn rs;\r\n\t};\r\n\tconst onToggleSchedule = (sch: ISCSchedule, type: number) => {\r\n\t\tif (changeStatusSchedule(sch, type)) {\r\n\t\t\tconst newScheduleList = [...dataModalCalendar.scheduleList];\r\n\t\t\tconst idx = newScheduleList.findIndex((s) => s.ID === sch.ID);\r\n\t\t\tif (idx >= 0) {\r\n\t\t\t\tnewScheduleList.splice(idx, 1);\r\n\t\t\t} else {\r\n\t\t\t\tnewScheduleList.push(sch);\r\n\t\t\t}\r\n\t\t\tsetDataModalCalendar({\r\n\t\t\t\t...dataModalCalendar,\r\n\t\t\t\tscheduleList: newScheduleList\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tconst onCheckTeacherAvailable = async (params: ISCCheckSchedule) => {\r\n\t\ttry {\r\n\t\t\tconst { id, teacherID, ...rest } = params;\r\n\t\t\tconst idxInOptList = optionListForADay.optionTeacherList.findIndex((o) => o.id === id);\r\n\t\t\tif (!params.studyTimeID) {\r\n\t\t\t\tsetOptionListForADay((prevState) => {\r\n\t\t\t\t\tconst newOptList = [...prevState.optionTeacherList];\r\n\t\t\t\t\tnewOptList.splice(idxInOptList, 1, {\r\n\t\t\t\t\t\t...prevState.optionTeacherList[idxInOptList],\r\n\t\t\t\t\t\tlist: [{ title: '----Giáo viên trống----', value: 0 }]\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\toptionTeacherList: newOptList\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tconst res = await checkTeacherSelfCourse(rest);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst newList = fmSelectArr(res.data.data, 'FullNameUnicode', 'UserInformationID');\r\n\t\t\t\tconst finalList = [{ title: '----Giáo viên trống----', value: 0 }, ...newList];\r\n\t\t\t\tconst isHadTeacherInList = finalList.some((o) => o.value === teacherID); // kiểm tra nếu như trong buổi học còn giữ lại giá trị cũ nhưng api lại không có giá trị thỏa giá trị cũ\r\n\t\t\t\tif (!isHadTeacherInList) {\r\n\t\t\t\t\tchangeValueSchedule(id, 'TeacherID', 0);\r\n\t\t\t\t}\r\n\t\t\t\tsetOptionListForADay((prevState) => {\r\n\t\t\t\t\tconst newOptList = [...prevState.optionTeacherList];\r\n\t\t\t\t\tnewOptList.splice(idxInOptList, 1, {\r\n\t\t\t\t\t\t...prevState.optionTeacherList[idxInOptList],\r\n\t\t\t\t\t\tlist: finalList\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\toptionTeacherList: newOptList\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForADay((prevState) => {\r\n\t\t\t\t\tconst newOptList = [...prevState.optionTeacherList];\r\n\t\t\t\t\tnewOptList.splice(idxInOptList, 1, {\r\n\t\t\t\t\t\t...prevState.optionTeacherList[idxInOptList],\r\n\t\t\t\t\t\tlist: [{ title: '----Giáo viên trống----', value: 0 }]\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\toptionTeacherList: newOptList\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'CHECK_SCHEDULE',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tconst onCheckStudyTimeAvailable = async (params: ISCCheckSchedule) => {\r\n\t\ttry {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'CHECK_SCHEDULE',\r\n\t\t\t\tstatus: true\r\n\t\t\t});\r\n\t\t\tconst { id, date, studyTimeID, curriculumsDetailID } = params;\r\n\t\t\tconst idxInOptList = optionListForADay.optionTeacherList.findIndex((o) => o.id === id);\r\n\t\t\tconst res = await checkStudyTimeSelfCourse({ curriculumsDetailID, date });\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst validTimeList = res.data.data.filter((s) => isValidRegisterCourse(s.TimeStart));\r\n\t\t\t\tconst newList = fmSelectArr(validTimeList, 'Name', 'ID', ['Time', 'TimeStart', 'TimeEnd']);\r\n\t\t\t\tconst finalList = [{ title: '----Ca học trống----', value: 0 }, ...newList];\r\n\r\n\t\t\t\tconst isHadTeacherInList = finalList.some((o) => o.value === studyTimeID); // kiểm tra nếu như trong buổi học còn giữ lại giá trị cũ nhưng api lại không có giá trị thỏa giá trị cũ\r\n\t\t\t\tif (!isHadTeacherInList) {\r\n\t\t\t\t\tchangeValueSchedule(id, 'CaID', 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetOptionListForADay((prevState) => {\r\n\t\t\t\t\tconst newOptList = [...prevState.optionStudyTimeList];\r\n\t\t\t\t\tnewOptList.splice(idxInOptList, 1, {\r\n\t\t\t\t\t\t...prevState.optionTeacherList[idxInOptList],\r\n\t\t\t\t\t\tlist: finalList\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\toptionStudyTimeList: newOptList\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (res.status === 204) {\r\n\t\t\t\tsetOptionListForADay((prevState) => {\r\n\t\t\t\t\tconst newOptList = [...prevState.optionStudyTimeList];\r\n\t\t\t\t\tnewOptList.splice(idxInOptList, 1, {\r\n\t\t\t\t\t\t...prevState.optionStudyTimeList[idxInOptList],\r\n\t\t\t\t\t\tlist: [{ title: '----Giáo viên trống----', value: 0 }]\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\toptionStudyTimeList: newOptList\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'CHECK_SCHEDULE',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (Array.isArray(dataModalCalendar.scheduleList) && dataModalCalendar.scheduleList.length >= 1) {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'SCHEDULE_INVALID',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t\tdataModalCalendar.scheduleList.forEach((s) => {\r\n\t\t\t\tconst params = {\r\n\t\t\t\t\tid: s.ID,\r\n\t\t\t\t\tdate: dataModalCalendar.dateString,\r\n\t\t\t\t\tstudyTimeID: s.StudyTimeID,\r\n\t\t\t\t\tcurriculumsDetailID: s.CurriculumsDetailID,\r\n\t\t\t\t\tteacherID: s.TeacherID || 0\r\n\t\t\t\t};\r\n\t\t\t\tconst now = moment().format();\r\n\t\t\t\tconst conditionDate = `${dataModalCalendar.dateString} ${s.TimeStart || '00:00'}`;\r\n\t\t\t\tconst isValid = moment(conditionDate).isSameOrAfter(now);\r\n\t\t\t\tif (isValid) {\r\n\t\t\t\t\tonCheckTeacherAvailable(params);\r\n\t\t\t\t\tonCheckStudyTimeAvailable(params);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetIsLoading({\r\n\t\t\t\t\t\ttype: 'SCHEDULE_INVALID',\r\n\t\t\t\t\t\tstatus: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}, [dataModalCalendar.scheduleList]);\r\n\t// -----------SAVE COURSE-----------\r\n\tconst onFindScheduleChanged = (arr: ISCSchedule[]) => {\r\n\t\tconst { current: list } = stoneScheduleListToFindDifference;\r\n\t\tconst rs: ISCSchedule[] = [];\r\n\r\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\r\n\t\t\tconst s = arr[i];\r\n\t\t\tif (typeof s.ID === 'string') {\r\n\t\t\t\trs.push(s);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfor (let i2 = 0; i2 < list.length; i2++) {\r\n\t\t\t\tconst s2 = list[i2];\r\n\t\t\t\tif (\r\n\t\t\t\t\ts.ID === s2.ID &&\r\n\t\t\t\t\t(moment(s.Date).format('YYYY/MM/DD') !== moment(s2.Date).format('YYYY/MM/DD') ||\r\n\t\t\t\t\t\ts.StudyTimeID !== s2.StudyTimeID ||\r\n\t\t\t\t\t\ts.TeacherID !== s2.TeacherID)\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Date, StudyTimeID, TeacherID\r\n\t\t\t\t\trs.push(s);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rs;\r\n\t};\r\n\tconst onValidateDateToSave = (arr: ISCSchedule[]) => {\r\n\t\tconst { unavailable } = scheduleList;\r\n\t\tconst rs: {\r\n\t\t\tshow: Array<{\r\n\t\t\t\tID: number;\r\n\t\t\t\tDate: string;\r\n\t\t\t\tdayOffWeek: string;\r\n\t\t\t\tStudyTimeID: number;\r\n\t\t\t\tstudyTimeName: string;\r\n\t\t\t\tTeacherID: number;\r\n\t\t\t\tteacherName: string;\r\n\t\t\t\tisValid: boolean;\r\n\t\t\t}>;\r\n\t\t\tsave: ICSScheduleToSave[];\r\n\t\t} = {\r\n\t\t\tshow: [],\r\n\t\t\tsave: []\r\n\t\t};\r\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\r\n\t\t\tconst s = arr[i];\r\n\t\t\tconst { ID, Date, TeacherID, TeacherName, StudyTimeID } = s;\r\n\t\t\tconst dayArr = ['Chủ Nhật', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'];\r\n\t\t\tconst dayOffWeek = dayArr[moment(s.Date).day()];\r\n\t\t\tlet isValid = !s.TeacherID;\r\n\t\t\tfor (let i2 = 0; i2 < unavailable.length; i2++) {\r\n\t\t\t\tconst s2 = unavailable[i2];\r\n\t\t\t\tif (s.ID !== s2.ID && s.Date === s2.Date) {\r\n\t\t\t\t\tif (studyTimeOverFlow([s, s2])) {\r\n\t\t\t\t\t\tisValid = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (s.StudyTimeID === s2.StudyTimeID) {\r\n\t\t\t\t\t\tisValid = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trs.show.push({\r\n\t\t\t\tID: typeof ID === 'string' ? 0 : ID,\r\n\t\t\t\tDate,\r\n\t\t\t\tdayOffWeek,\r\n\t\t\t\tStudyTimeID,\r\n\t\t\t\tstudyTimeName: studyTimeList.find((s) => s.ID === StudyTimeID)?.Name || '---Ca học trống---',\r\n\t\t\t\tTeacherID,\r\n\t\t\t\tteacherName: TeacherName || '---Giáo viên trống---',\r\n\t\t\t\tisValid\r\n\t\t\t});\r\n\t\t\trs.save.push({\r\n\t\t\t\tID: typeof ID === 'string' ? 0 : ID,\r\n\t\t\t\tDate,\r\n\t\t\t\tStudyTimeID,\r\n\t\t\t\tTeacherID\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn rs;\r\n\t};\r\n\tconst onFetchDataToSave = () => {\r\n\t\tconst { unavailable } = scheduleList;\r\n\r\n\t\tconst scheduleListChanged = onFindScheduleChanged(unavailable);\r\n\t\tconst { show, save } = onValidateDateToSave(scheduleListChanged);\r\n\r\n\t\tconst scheduleListSorted = show.sort((a, b) => moment(a.Date).valueOf() - moment(b.Date).valueOf());\r\n\t\tconst fmScheduleListToShow = fmArrayToObjectWithSpecialKey(scheduleListSorted, 'Date');\r\n\r\n\t\tsetScheduleShow(fmScheduleListToShow);\r\n\t\tsetScheduleListToSave(save);\r\n\t};\r\n\tconst onSaveCourse = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'SAVE_COURSE',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\tlet res;\r\n\t\ttry {\r\n\t\t\tconst haveErrors = Object.keys(scheduleShow).find((date, idx) => scheduleShow[date].find((s) => s.isValid));\r\n\t\t\tif (haveErrors) {\r\n\t\t\t\tshowNoti('danger', 'Đã xảy ra lỗi. Xin kiểm tra lại');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!scheduleListToSave.length) {\r\n\t\t\t\tshowNoti('danger', 'Bạn chưa đăng ký buổi học nào');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst res = await Promise.all(scheduleListToSave.map((s) => updateScheduleSelfCourse(s)));\r\n\t\t\tif (res.every((r) => r.status === 200)) {\r\n\t\t\t\tfetchAvailableSchedule();\r\n\t\t\t\tshowNoti('success', 'Đăng ký thành công!');\r\n\t\t\t} else {\r\n\t\t\t\tshowNoti('danger', 'Có lỗi xảy ra');\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tif (error.status === 400) {\r\n\t\t\t\tshowNoti('danger', error.message);\r\n\t\t\t}\r\n\t\t\tconsole.log('onSaveCourse', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'SAVE_COURSE',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn res;\r\n\t};\r\n\t// -----------EDIT COURSE-----------\r\n\tconst fetchStudyTimeList = async () => {\r\n\t\ttry {\r\n\t\t\tconst res = await studyTimeApi.getAll({ selectAll: true });\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetStudyTimeList(res.data.data);\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('fetchDayOffList', error.message);\r\n\t\t}\r\n\t};\r\n\tconst fetchDayOffList = async (eDate: string) => {\r\n\t\ttry {\r\n\t\t\tconst res = await dayOffApi.getAll({ selectAll: true, toDate: eDate });\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\treturn res.data.data.map((r) => moment(r.DayOff).format('YYYY/MM/DD'));\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('fetchDayOffList', error.message);\r\n\t\t}\r\n\t};\r\n\tconst createCalendarBlankList = async (eDate: string) => {\r\n\t\tconst dates = [];\r\n\t\tconst currDate = moment().startOf('day');\r\n\t\tconst lastDate = moment(eDate).startOf('day');\r\n\t\tconst dayOffList = await fetchDayOffList(eDate);\r\n\t\tdo {\r\n\t\t\tconst Day = currDate.clone().format('YYYY/MM/DD');\r\n\t\t\tif (!dayOffList.includes(Day)) {\r\n\t\t\t\tdates.push({ Day });\r\n\t\t\t}\r\n\t\t} while (currDate.add(1, 'days').diff(lastDate) <= 0);\r\n\r\n\t\treturn dates;\r\n\t};\r\n\ttype IFMOptionList = { id: number; list: IOptionCommon[] }[];\r\n\tconst fmOptionList = (\r\n\t\tarranged: ISCSchedule[],\r\n\t\tinarranged: ISCSchedule[]\r\n\t): { optionStudyTimeList: IFMOptionList; optionTeacherList: IFMOptionList } => {\r\n\t\tconst fm = (arr: ISCSchedule[], tt: string, vl: string) =>\r\n\t\t\tarr.map((s) => ({\r\n\t\t\t\tid: +s.ID,\r\n\t\t\t\tlist: [{ title: s[tt] || '', value: s[vl] }]\r\n\t\t\t}));\r\n\r\n\t\tconst optionStudyTimeListArranged: IFMOptionList = fm(arranged, 'StudyTimeName', 'StudyTimeID');\r\n\t\tconst optionStudyTimeListInarranged: IFMOptionList = fm(inarranged, 'StudyTimeName', 'StudyTimeID');\r\n\r\n\t\tconst optionTeacherListSchedulesArranged: IFMOptionList = fm(arranged, 'TeacherName', 'TeacherID');\r\n\t\tconst optionTeacherListSchedulesInarranged: IFMOptionList = fm(inarranged, 'TeacherName', 'TeacherID');\r\n\r\n\t\treturn {\r\n\t\t\toptionStudyTimeList: optionStudyTimeListArranged.concat(optionStudyTimeListInarranged),\r\n\t\t\toptionTeacherList: optionTeacherListSchedulesArranged.concat(optionTeacherListSchedulesInarranged)\r\n\t\t};\r\n\t};\r\n\tconst fetchAvailableSchedule = async () => {\r\n\t\tsetIsShowSaveBtnGroup(false);\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'FETCH_SCHEDULE',\r\n\t\t\tstatus: true\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconst courseIDInt = parseInt(courseID as string);\r\n\t\t\tconst [courseInfo, courseSchedule] = await Promise.all([courseApi.getById(courseIDInt), getScheduleSelfCourse(courseIDInt)]);\r\n\r\n\t\t\tif (courseInfo.status === 200) {\r\n\t\t\t\tconst { EndDay } = courseInfo.data.data;\r\n\t\t\t\tconst calendarBlankList = await createCalendarBlankList(EndDay);\r\n\t\t\t\tsetCalendarList(calendarBlankList);\r\n\t\t\t}\r\n\t\t\tif (courseSchedule.status === 200) {\r\n\t\t\t\tconst { courseSchedulesArranged, courseSchedulesInarranged } = courseSchedule.data;\r\n\t\t\t\tconst totalSchedule = [...courseSchedulesArranged, ...courseSchedulesInarranged];\r\n\r\n\t\t\t\tconst optionList = fmOptionList(courseSchedulesArranged, courseSchedulesInarranged);\r\n\r\n\t\t\t\tsetScheduleList({\r\n\t\t\t\t\tunavailable: courseSchedulesArranged.map((s) => ({ ...s, Date: moment(s.Date).format('YYYY/MM/DD') })),\r\n\t\t\t\t\tavailable: courseSchedulesInarranged.map((s) => ({ ...s, Date: moment(s.Date).format('YYYY/MM/DD') }))\r\n\t\t\t\t});\r\n\t\t\t\tsetOptionListForADay(optionList);\r\n\t\t\t\tstoneScheduleArranged.current = courseSchedulesArranged;\r\n\t\t\t\tstoneScheduleListToFindDifference.current = totalSchedule;\r\n\t\t\t}\r\n\t\t\tsetIsShowSaveBtnGroup(true);\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'FETCH_SCHEDULE',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('error', error.message);\r\n\t\t}\r\n\t};\r\n\t// -----------CANCEL SCHEDULE-----------\r\n\tconst isValidCancelCourse = (sch: ISCSchedule) => {\r\n\t\t//user must cancel study time before 5h\r\n\t\tconst { ID, StudyTimeID } = sch;\r\n\t\tconst { current: checkList } = stoneScheduleArranged;\r\n\t\tif (!StudyTimeID || !checkList.some((s) => s.ID === ID)) return false;\r\n\t\tconst nextFiveHours = moment().add(5, 'hours').format();\r\n\t\tconst rs = moment().isSameOrBefore(nextFiveHours);\r\n\t\treturn rs;\r\n\t};\r\n\tconst onCancelSchedule = async (sch: ISCSchedule) => {\r\n\t\ttry {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'CANCEL_SCHEDULE',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t\tconst { ID } = sch;\r\n\t\t\tconst res = await cancelScheduleSelfCourse(ID);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tonToggleSchedule(sch, 2);\r\n\t\t\t\tfetchAvailableSchedule();\r\n\t\t\t\tshowNoti('success', 'Hủy lịch học thành công');\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('onCancelSchedule', error.message);\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'CANCEL_SCHEDULE',\r\n\t\t\t\tstatus: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tlet isMounted = true;\r\n\t\tif (isMounted) {\r\n\t\t\tfetchStudyTimeList();\r\n\t\t\tfetchAvailableSchedule();\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tisMounted = false;\r\n\t\t};\r\n\t}, []);\r\n\treturn (\r\n\t\t<div className=\"create-course edit-course\">\r\n\t\t\t<TitlePage title=\"Cập nhật khóa học\" />\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-8 col-12\">\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\ttitle={\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<p style={{ marginBottom: 0 }}>Sắp xếp lịch học</p>\r\n\t\t\t\t\t\t\t\t<p style={{ fontSize: 13, color: '#bfbfcb' }}>\r\n\t\t\t\t\t\t\t\t\tChỉ được xếp buổi học trước 24 tiếng, hủy buổi học trước 5 tiếng.\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\textra={\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<div className=\"btn-page-course\">\r\n\t\t\t\t\t\t\t\t\t{isShowSaveBtnGroup && (\r\n\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t<SaveSelfCourse\r\n\t\t\t\t\t\t\t\t\t\t\t\tisEdit={true}\r\n\t\t\t\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\t\t\t\tscheduleShow={scheduleShow}\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleSaveCourse={onSaveCourse}\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleFetchDataToSave={onFetchDataToSave}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CreateSelfCourseCalendar\r\n\t\t\t\t\t\t\teventList={calendarDateFormat(calendarList)}\r\n\t\t\t\t\t\t\tisLoaded={isLoading.type === 'FETCH_SCHEDULE' && isLoading.status ? false : true}\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\thandleSetDataModalCalendar={setDataModalCalendar}\r\n\t\t\t\t\t\t\tdataModalCalendar={dataModalCalendar}\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\tunAvailableList={\r\n\t\t\t\t\t\t\t\t<Schedule>\r\n\t\t\t\t\t\t\t\t\t<ScheduleList>\r\n\t\t\t\t\t\t\t\t\t\t{scheduleList.available.map((s, idx) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<ScheduleSelfItem\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\t\t\t\t\tscheduleObj={s}\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleChangeStatusSchedule={onToggleSchedule}\r\n\t\t\t\t\t\t\t\t\t\t\t\tisEditView={true}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</ScheduleList>\r\n\t\t\t\t\t\t\t\t</Schedule>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ScheduleList panelActiveListInModal={dataModalCalendar.scheduleList.map((_, idx) => idx)}>\r\n\t\t\t\t\t\t\t\t{dataModalCalendar.scheduleList.map((s, idx) => (\r\n\t\t\t\t\t\t\t\t\t<ScheduleSelfItem\r\n\t\t\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\t\t\tisUnavailable={true}\r\n\t\t\t\t\t\t\t\t\t\tisEditView={true}\r\n\t\t\t\t\t\t\t\t\t\tscheduleObj={s}\r\n\t\t\t\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\t\t\t\thandleChangeValueSchedule={changeValueSchedule}\r\n\t\t\t\t\t\t\t\t\t\thandleChangeStatusSchedule={onToggleSchedule}\r\n\t\t\t\t\t\t\t\t\t\toptionTeacherList={optionListForADay.optionTeacherList.find((o) => o.id === s.ID)?.list || []}\r\n\t\t\t\t\t\t\t\t\t\toptionStudyTime={optionListForADay.optionStudyTimeList.find((o) => o.id === s.ID)?.list || []}\r\n\t\t\t\t\t\t\t\t\t\tisCancelSchedule={isValidCancelCourse(s)}\r\n\t\t\t\t\t\t\t\t\t\thandleCancelSchedule={onCancelSchedule}\r\n\t\t\t\t\t\t\t\t\t\t// handleAheadSchedule={onAheadSchedule}\r\n\t\t\t\t\t\t\t\t\t\t// isClickAheadSchedule={isClickAheadSchedule}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</ScheduleList>\r\n\t\t\t\t\t\t</CreateSelfCourseCalendar>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-4 col-12 d-none d-md-block\">\r\n\t\t\t\t\t<Schedule>\r\n\t\t\t\t\t\t<ScheduleList>\r\n\t\t\t\t\t\t\t{scheduleList.available.map((s, idx) => (\r\n\t\t\t\t\t\t\t\t<ScheduleSelfItem\r\n\t\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\t\tscheduleObj={s}\r\n\t\t\t\t\t\t\t\t\thandleChangeStatusSchedule={onToggleSchedule}\r\n\t\t\t\t\t\t\t\t\tisEditView={true}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ScheduleList>\r\n\t\t\t\t\t</Schedule>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default EditSelfCourse;\r\n"]},"metadata":{},"sourceType":"module"}