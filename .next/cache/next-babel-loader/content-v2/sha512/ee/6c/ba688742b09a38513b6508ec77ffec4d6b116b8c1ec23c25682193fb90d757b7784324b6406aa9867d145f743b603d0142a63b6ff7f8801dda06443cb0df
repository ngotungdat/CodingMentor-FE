{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Profile\\\\ProfileCustomer\\\\InfoOtherCard\\\\ExamAppointmentTable.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { testCustomerApi } from '~/apiBase';\nimport ExpandTable from '~/components/ExpandTable';\nimport { useWrap } from '~/context/wrap';\nExamAppointmentTable.propTypes = {\n  studentID: PropTypes.number\n};\nExamAppointmentTable.defaultProps = {\n  studentID: null\n};\n\nfunction ExamAppointmentTable(props) {\n  const {\n    studentID\n  } = props;\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: 'GET_ALL',\n    status: false\n  });\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: examAppointmentList,\n    1: setExamAppointmentList\n  } = useState([]);\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null); // FILTER\n\n  const {\n    0: filters,\n    1: setFilters\n  } = useState({\n    pageSize: 10,\n    pageIndex: 1,\n    UserInformationID: studentID\n  });\n\n  const getPagination = pageNumber => {\n    setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      pageIndex: pageNumber\n    }));\n  };\n\n  const fetchExamAppointmentList = async () => {\n    try {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: true\n      });\n      const res = await testCustomerApi.getAll(filters);\n\n      if (res.status === 200) {\n        setExamAppointmentList(res.data.data);\n        setTotalPage(res.data.totalRow);\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchExamAppointmentList();\n  }, [filters]);\n  const columns = [{\n    title: 'Trung tâm',\n    width: 150,\n    dataIndex: 'BranchName'\n  }, {\n    title: 'Ngày hẹn',\n    width: 150,\n    dataIndex: 'AppointmentDate',\n    render: date => date ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-black\",\n      children: moment(date).format('DD/MM/YYYY')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 30\n    }, this) : ''\n  }, {\n    title: 'Thời gian',\n    dataIndex: 'Time',\n    width: 150,\n    render: time => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-black\",\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 22\n    }, this)\n  }, {\n    title: 'Nhân viên tư vấn',\n    width: 150,\n    dataIndex: 'CounselorsName'\n  }, {\n    title: 'Trạng thái',\n    width: 150,\n    dataIndex: 'StatusName',\n    render: statusName => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-black\",\n      children: statusName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 28\n    }, this)\n  }];\n\n  const expandedRowRender = item => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"font-weight-black\",\n        children: \"Ghi ch\\xFA: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this), item.Note]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ExpandTable, {\n    loading: isLoading,\n    totalPage: totalPage,\n    currentPage: filters.pageIndex,\n    getPagination: getPagination,\n    noScroll: true,\n    dataSource: examAppointmentList,\n    columns: columns,\n    Extra: /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"H\\u1EB9n \\u0111\\u0103ng k\\xFD kh\\xF3a h\\u1ECDc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this),\n    expandable: {\n      expandedRowRender\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 3\n  }, this);\n}\n\nexport default ExamAppointmentTable;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Profile/ProfileCustomer/InfoOtherCard/ExamAppointmentTable.tsx"],"names":["moment","PropTypes","React","useEffect","useState","testCustomerApi","ExpandTable","useWrap","ExamAppointmentTable","propTypes","studentID","number","defaultProps","props","isLoading","setIsLoading","type","status","showNoti","examAppointmentList","setExamAppointmentList","totalPage","setTotalPage","filters","setFilters","pageSize","pageIndex","UserInformationID","getPagination","pageNumber","fetchExamAppointmentList","res","getAll","data","totalRow","error","message","columns","title","width","dataIndex","render","date","format","time","statusName","expandedRowRender","item","Note"],"mappings":"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","sourcesContent":["import moment from 'moment'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { testCustomerApi } from '~/apiBase'\r\nimport ExpandTable from '~/components/ExpandTable'\r\nimport { useWrap } from '~/context/wrap'\r\n\r\nExamAppointmentTable.propTypes = {\r\n\tstudentID: PropTypes.number\r\n}\r\nExamAppointmentTable.defaultProps = {\r\n\tstudentID: null\r\n}\r\nfunction ExamAppointmentTable(props) {\r\n\tconst { studentID } = props\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: 'GET_ALL',\r\n\t\tstatus: false\r\n\t})\r\n\tconst { showNoti } = useWrap()\r\n\tconst [examAppointmentList, setExamAppointmentList] = useState<ITestCustomer[]>([])\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\t// FILTER\r\n\tconst [filters, setFilters] = useState({\r\n\t\tpageSize: 10,\r\n\t\tpageIndex: 1,\r\n\t\tUserInformationID: studentID\r\n\t})\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tsetFilters({\r\n\t\t\t...filters,\r\n\t\t\tpageIndex: pageNumber\r\n\t\t})\r\n\t}\r\n\r\n\tconst fetchExamAppointmentList = async () => {\r\n\t\ttry {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: true\r\n\t\t\t})\r\n\t\t\tconst res = await testCustomerApi.getAll(filters)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetExamAppointmentList(res.data.data)\r\n\t\t\t\tsetTotalPage(res.data.totalRow)\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchExamAppointmentList()\r\n\t}, [filters])\r\n\r\n\tconst columns = [\r\n\t\t{ title: 'Trung tâm', width: 150, dataIndex: 'BranchName' },\r\n\t\t{\r\n\t\t\ttitle: 'Ngày hẹn',\r\n\t\t\twidth: 150,\r\n\t\t\tdataIndex: 'AppointmentDate',\r\n\t\t\trender: (date) => (date ? <p className=\"font-weight-black\">{moment(date).format('DD/MM/YYYY')}</p> : '')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Thời gian',\r\n\t\t\tdataIndex: 'Time',\r\n\t\t\twidth: 150,\r\n\t\t\trender: (time) => <p className=\"font-weight-black\">{time}</p>\r\n\t\t},\r\n\t\t{ title: 'Nhân viên tư vấn', width: 150, dataIndex: 'CounselorsName' },\r\n\t\t{\r\n\t\t\ttitle: 'Trạng thái',\r\n\t\t\twidth: 150,\r\n\t\t\tdataIndex: 'StatusName',\r\n\t\t\trender: (statusName) => <p className=\"font-weight-black\">{statusName}</p>\r\n\t\t}\r\n\t]\r\n\r\n\tconst expandedRowRender = (item: ITestCustomer) => {\r\n\t\treturn (\r\n\t\t\t<p>\r\n\t\t\t\t<span className=\"font-weight-black\">Ghi chú: </span>\r\n\t\t\t\t{item.Note}\r\n\t\t\t</p>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ExpandTable\r\n\t\t\tloading={isLoading}\r\n\t\t\ttotalPage={totalPage}\r\n\t\t\tcurrentPage={filters.pageIndex}\r\n\t\t\tgetPagination={getPagination}\r\n\t\t\tnoScroll\r\n\t\t\tdataSource={examAppointmentList}\r\n\t\t\tcolumns={columns}\r\n\t\t\tExtra={<h5>Hẹn đăng ký khóa học</h5>}\r\n\t\t\texpandable={{ expandedRowRender }}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default ExamAppointmentTable\r\n"]},"metadata":{},"sourceType":"module"}