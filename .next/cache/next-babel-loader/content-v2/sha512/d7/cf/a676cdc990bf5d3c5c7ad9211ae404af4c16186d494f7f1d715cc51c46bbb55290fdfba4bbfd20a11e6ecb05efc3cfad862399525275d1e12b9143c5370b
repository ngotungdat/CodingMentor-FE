{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\CodingMentor\\\\CodingMentor-FE\\\\src\\\\components\\\\Global\\\\CourseExam\\\\CourseExamDetail.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { courseExamApi } from '~/apiBase/package/course-exam';\nimport { useWrap } from '~/context/wrap';\nimport Link from 'next/link';\nimport NestedTable from '~/components/Elements/NestedTable';\nimport { Tooltip } from 'antd';\nimport { ExclamationCircleOutlined, FormOutlined } from '@ant-design/icons';\nimport CourseExamPoint from './CourseExamPoint';\nimport { teacherApi } from '~/apiBase';\nimport CourseExamUpdate from './CourseExamUpdate';\n\nconst CourseExamDetail = props => {\n  const {\n    studentID\n  } = props; // ------ BASE USESTATE TABLE -------\n\n  const {\n    0: dataSource,\n    1: setDataSource\n  } = useState([]);\n  const {\n    showNoti,\n    pageSize,\n    userInformation\n  } = useWrap();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    0: indexRow,\n    1: setIndexRow\n  } = useState(null);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const listTodoApi = {\n    pageSize: pageSize,\n    pageIndex: 1,\n    sort: null,\n    sortType: null,\n    ProgramCode: null,\n    ProgramName: null,\n    Type: null,\n    Level: null,\n    fromDate: null,\n    toDate: null,\n    UserInformationID: studentID\n  };\n  const {\n    0: todoApi,\n    1: setTodoApi\n  } = useState(listTodoApi);\n  const {\n    0: dataTeacher,\n    1: setDataTeacher\n  } = useState([]); // Get list teacher\n\n  const getListTeacher = async () => {\n    // setLoadingTeacher(true);\n    try {\n      let res = await teacherApi.getAll({\n        selectAll: true,\n        StatusID: 0\n      });\n\n      if (res.status === 200) {\n        let newData = res.data.data.map(item => ({\n          title: item.FullNameUnicode,\n          value: item.UserInformationID\n        }));\n        setDataTeacher(newData);\n      }\n    } catch (error) {\n      console.log('Error Get List Teacher: ', error.message);\n    } finally {// setLoadingTeacher(true);\n    }\n  }; // GET DATA SOURCE\n\n\n  const getDataSource = async () => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      let res = await courseExamApi.getAll(todoApi);\n      res.status == 200 && (setDataSource(res.data.data), setTotalPage(res.data.totalRow));\n      res.status == 204 && setDataSource([]);\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  }; // -------------- GET PAGE_NUMBER -----------------\n\n\n  const getPagination = pageNumber => {\n    setCurrentPage(pageNumber);\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), {}, {\n      // ...listFieldSearch,\n      pageIndex: pageNumber\n    }));\n  }; // ============== USE EFFECT - FETCH DATA ===================\n\n\n  useEffect(() => {\n    getDataSource();\n  }, [todoApi]); // ---------------- COLUMN --------------------\n\n  const columns = [{\n    title: 'Đề thi',\n    dataIndex: 'ExamTopicName',\n    render: (text, data) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: (userInformation === null || userInformation === void 0 ? void 0 : userInformation.RoleID) !== 2 ? /*#__PURE__*/_jsxDEV(Link, {\n        href: {\n          pathname: '/course-exam/detail/[slug]',\n          query: {\n            slug: `${data.ID}`\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"font-weight-black\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(Link, {\n        href: {\n          pathname: '/course-exam/detail/[slug]',\n          query: {\n            slug: `${data.ID}`,\n            teacherMarking: data.TeacherID,\n            packageResultID: data.ID,\n            type: 'check'\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"font-weight-black\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  }, {\n    title: 'Tổng điểm',\n    dataIndex: 'PointTotal',\n    render: (point, data) => /*#__PURE__*/_jsxDEV(CourseExamPoint, {\n      infoID: data.ID,\n      point: point,\n      detailID: data.ID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }, this)\n  }, {\n    title: 'Dạng đề',\n    dataIndex: 'Type',\n    render: (text, data) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [data.Type == 1 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-weight-black\",\n          children: \"B\\xE0i t\\u1EADp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 26\n        }, this), data.Type == 2 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-weight-black\",\n          style: {\n            color: '#174898'\n          },\n          children: \"B\\xE0i ki\\u1EC3m tra\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true);\n    }\n  }, {\n    title: 'Giáo viên chấm bài',\n    dataIndex: 'TeacherName',\n    render: text => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-primary\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 22\n    }, this)\n  }, {\n    title: 'Trạng thái chấm bài',\n    dataIndex: 'isDone',\n    filters: [{\n      text: 'Đã chấm xong',\n      value: true\n    }, {\n      text: 'Chưa chấm xong',\n      value: false\n    }],\n    onFilter: (value, record) => record.isDone === value,\n    render: type => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [type == true && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tag green\",\n        children: \"\\u0110\\xE3 ch\\u1EA5m xong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 23\n      }, this), type == false && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tag gray\",\n        children: \"Ch\\u01B0a ch\\u1EA5m xong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, {\n    render: data => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: (userInformation === null || userInformation === void 0 ? void 0 : userInformation.RoleID) !== 2 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CourseExamUpdate, {\n          dataTeacher: dataTeacher,\n          dataRow: data,\n          onFetchData: () => setTodoApi(_objectSpread({}, todoApi))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          href: {\n            pathname: '/course-exam/detail/[slug]',\n            query: {\n              slug: `${data.ID}`\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Chi ti\\u1EBFt b\\xE0i l\\xE0m\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-icon\",\n              children: /*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Link, {\n        href: {\n          pathname: '/course-exam/detail/[slug]',\n          query: {\n            slug: `${data.ID}`,\n            teacherMarking: data.TeacherID,\n            packageResultID: data.ID,\n            type: 'check'\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Ch\\u1EA5m b\\xE0i ngay\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-icon edit\",\n            children: /*#__PURE__*/_jsxDEV(FormOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  }];\n  useEffect(() => {\n    getListTeacher();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(NestedTable, {\n      currentPage: currentPage,\n      totalPage: totalPage && totalPage,\n      getPagination: pageNumber => getPagination(pageNumber),\n      loading: isLoading,\n      addClass: \"basic-header\",\n      TitlePage: \"\",\n      dataSource: dataSource,\n      columns: columns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\nexport default CourseExamDetail;","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/components/Global/CourseExam/CourseExamDetail.tsx"],"names":["React","useState","useEffect","courseExamApi","useWrap","Link","NestedTable","Tooltip","ExclamationCircleOutlined","FormOutlined","CourseExamPoint","teacherApi","CourseExamUpdate","CourseExamDetail","props","studentID","dataSource","setDataSource","showNoti","pageSize","userInformation","isLoading","setIsLoading","type","status","totalPage","setTotalPage","indexRow","setIndexRow","currentPage","setCurrentPage","listTodoApi","pageIndex","sort","sortType","ProgramCode","ProgramName","Type","Level","fromDate","toDate","UserInformationID","todoApi","setTodoApi","dataTeacher","setDataTeacher","getListTeacher","res","getAll","selectAll","StatusID","newData","data","map","item","title","FullNameUnicode","value","error","console","log","message","getDataSource","totalRow","getPagination","pageNumber","columns","dataIndex","render","text","RoleID","pathname","query","slug","ID","teacherMarking","TeacherID","packageResultID","point","color","filters","onFilter","record","isDone"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { courseExamApi } from '~/apiBase/package/course-exam'\r\nimport { useWrap } from '~/context/wrap'\r\nimport Link from 'next/link'\r\nimport NestedTable from '~/components/Elements/NestedTable'\r\nimport { Tooltip } from 'antd'\r\nimport { ExclamationCircleOutlined, FormOutlined } from '@ant-design/icons'\r\nimport CourseExamPoint from './CourseExamPoint'\r\nimport { teacherApi } from '~/apiBase'\r\nimport CourseExamUpdate from './CourseExamUpdate'\r\n\r\nconst CourseExamDetail = (props) => {\r\n\tconst { studentID } = props\r\n\t// ------ BASE USESTATE TABLE -------\r\n\tconst [dataSource, setDataSource] = useState<ICourseExam[]>([])\r\n\tconst { showNoti, pageSize, userInformation } = useWrap()\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t})\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\tconst [indexRow, setIndexRow] = useState(null)\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\r\n\tconst listTodoApi = {\r\n\t\tpageSize: pageSize,\r\n\t\tpageIndex: 1,\r\n\t\tsort: null,\r\n\t\tsortType: null,\r\n\t\tProgramCode: null,\r\n\t\tProgramName: null,\r\n\t\tType: null,\r\n\t\tLevel: null,\r\n\t\tfromDate: null,\r\n\t\ttoDate: null,\r\n\t\tUserInformationID: studentID\r\n\t}\r\n\tconst [todoApi, setTodoApi] = useState(listTodoApi)\r\n\r\n\tconst [dataTeacher, setDataTeacher] = useState([])\r\n\r\n\t// Get list teacher\r\n\tconst getListTeacher = async () => {\r\n\t\t// setLoadingTeacher(true);\r\n\t\ttry {\r\n\t\t\tlet res = await teacherApi.getAll({\r\n\t\t\t\tselectAll: true,\r\n\t\t\t\tStatusID: 0\r\n\t\t\t})\r\n\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tlet newData = res.data.data.map((item) => ({\r\n\t\t\t\t\ttitle: item.FullNameUnicode,\r\n\t\t\t\t\tvalue: item.UserInformationID\r\n\t\t\t\t}))\r\n\t\t\t\tsetDataTeacher(newData)\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Error Get List Teacher: ', error.message)\r\n\t\t} finally {\r\n\t\t\t// setLoadingTeacher(true);\r\n\t\t}\r\n\t}\r\n\r\n\t// GET DATA SOURCE\r\n\tconst getDataSource = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await courseExamApi.getAll(todoApi)\r\n\t\t\tres.status == 200 && (setDataSource(res.data.data), setTotalPage(res.data.totalRow))\r\n\r\n\t\t\tres.status == 204 && setDataSource([])\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// -------------- GET PAGE_NUMBER -----------------\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tsetCurrentPage(pageNumber)\r\n\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t// ...listFieldSearch,\r\n\t\t\tpageIndex: pageNumber\r\n\t\t})\r\n\t}\r\n\r\n\t// ============== USE EFFECT - FETCH DATA ===================\r\n\tuseEffect(() => {\r\n\t\tgetDataSource()\r\n\t}, [todoApi])\r\n\r\n\t// ---------------- COLUMN --------------------\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Đề thi',\r\n\t\t\tdataIndex: 'ExamTopicName',\r\n\t\t\trender: (text, data) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{userInformation?.RoleID !== 2 ? (\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\thref={{\r\n\t\t\t\t\t\t\t\tpathname: '/course-exam/detail/[slug]',\r\n\t\t\t\t\t\t\t\tquery: { slug: `${data.ID}` }\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<a href=\"#\" className=\"font-weight-black\">\r\n\t\t\t\t\t\t\t\t{text}\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\thref={{\r\n\t\t\t\t\t\t\t\tpathname: '/course-exam/detail/[slug]',\r\n\t\t\t\t\t\t\t\tquery: {\r\n\t\t\t\t\t\t\t\t\tslug: `${data.ID}`,\r\n\t\t\t\t\t\t\t\t\tteacherMarking: data.TeacherID,\r\n\t\t\t\t\t\t\t\t\tpackageResultID: data.ID,\r\n\t\t\t\t\t\t\t\t\ttype: 'check'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<a href=\"#\" className=\"font-weight-black\">\r\n\t\t\t\t\t\t\t\t{text}\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Tổng điểm',\r\n\t\t\tdataIndex: 'PointTotal',\r\n\t\t\trender: (point, data) => <CourseExamPoint infoID={data.ID} point={point} detailID={data.ID} />\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Dạng đề',\r\n\t\t\tdataIndex: 'Type',\r\n\t\t\trender: (text, data) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t{data.Type == 1 && <p className=\"font-weight-black\">Bài tập</p>}\r\n\t\t\t\t\t\t{data.Type == 2 && (\r\n\t\t\t\t\t\t\t<p className=\"font-weight-black\" style={{ color: '#174898' }}>\r\n\t\t\t\t\t\t\t\tBài kiểm tra\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\ttitle: 'Giáo viên chấm bài',\r\n\t\t\tdataIndex: 'TeacherName',\r\n\t\t\trender: (text) => <p className=\"font-weight-primary\">{text}</p>\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Trạng thái chấm bài',\r\n\t\t\tdataIndex: 'isDone',\r\n\t\t\tfilters: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Đã chấm xong',\r\n\t\t\t\t\tvalue: true\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: 'Chưa chấm xong',\r\n\t\t\t\t\tvalue: false\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tonFilter: (value, record) => record.isDone === value,\r\n\t\t\trender: (type) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{type == true && <span className=\"tag green\">Đã chấm xong</span>}\r\n\t\t\t\t\t{type == false && <span className=\"tag gray\">Chưa chấm xong</span>}\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\trender: (data) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{userInformation?.RoleID !== 2 ? (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<CourseExamUpdate dataTeacher={dataTeacher} dataRow={data} onFetchData={() => setTodoApi({ ...todoApi })} />\r\n\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\thref={{\r\n\t\t\t\t\t\t\t\t\tpathname: '/course-exam/detail/[slug]',\r\n\t\t\t\t\t\t\t\t\tquery: { slug: `${data.ID}` }\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Tooltip title=\"Chi tiết bài làm\">\r\n\t\t\t\t\t\t\t\t\t<button className=\"btn btn-icon\">\r\n\t\t\t\t\t\t\t\t\t\t<ExclamationCircleOutlined />\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\thref={{\r\n\t\t\t\t\t\t\t\tpathname: '/course-exam/detail/[slug]',\r\n\t\t\t\t\t\t\t\tquery: {\r\n\t\t\t\t\t\t\t\t\tslug: `${data.ID}`,\r\n\t\t\t\t\t\t\t\t\tteacherMarking: data.TeacherID,\r\n\t\t\t\t\t\t\t\t\tpackageResultID: data.ID,\r\n\t\t\t\t\t\t\t\t\ttype: 'check'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Tooltip title=\"Chấm bài ngay\">\r\n\t\t\t\t\t\t\t\t<button className=\"btn btn-icon edit\">\r\n\t\t\t\t\t\t\t\t\t<FormOutlined />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t}\r\n\t]\r\n\r\n\tuseEffect(() => {\r\n\t\tgetListTeacher()\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<NestedTable\r\n\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\ttotalPage={totalPage && totalPage}\r\n\t\t\t\tgetPagination={(pageNumber: number) => getPagination(pageNumber)}\r\n\t\t\t\tloading={isLoading}\r\n\t\t\t\taddClass=\"basic-header\"\r\n\t\t\t\tTitlePage=\"\"\r\n\t\t\t\tdataSource={dataSource}\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default CourseExamDetail\r\n"]},"metadata":{},"sourceType":"module"}