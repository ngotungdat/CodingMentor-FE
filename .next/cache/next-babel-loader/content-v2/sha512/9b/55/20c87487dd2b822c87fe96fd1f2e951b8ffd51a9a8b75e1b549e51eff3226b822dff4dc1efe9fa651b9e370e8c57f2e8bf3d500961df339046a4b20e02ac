{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\CodingMentor\\\\CodingMentor-FE\\\\src\\\\components\\\\Global\\\\Room\\\\Room.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport PowerTable from '~/components/PowerTable';\nimport LayoutBase from '~/components/LayoutBase';\nimport RoomForm from '~/components/Global/Option/RoomForm';\nimport SortBox from '~/components/Elements/SortBox';\nimport FilterColumn from '~/components/Tables/FilterColumn';\nimport router from 'next/router';\nimport { roomApi, branchApi } from '~/apiBase';\nimport { useWrap } from '~/context/wrap';\nimport DeleteItem from '~/components/Tables/DeleteItem';\nimport moment from 'moment';\nlet pageIndex = 1;\nlet listFieldSearch = {\n  roomCode: '',\n  roomName: '',\n  pageIndex: 1\n};\nconst dataOption = [{\n  dataSort: {\n    sort: 1,\n    sortType: false\n  },\n  text: 'Mã giảm dần'\n}, {\n  dataSort: {\n    sort: 1,\n    sortType: true\n  },\n  text: 'Mã tăng dần'\n}, {\n  dataSort: {\n    sort: 2,\n    sortType: false\n  },\n  text: 'Tên giảm dần'\n}, {\n  dataSort: {\n    sort: 2,\n    sortType: true\n  },\n  text: 'Tên tăng dần '\n}];\n\nconst Room = () => {\n  const listTodoApi = {\n    pageSize: 10,\n    pageIndex: pageIndex,\n    sort: null,\n    sortType: null,\n    roomCode: null,\n    roomName: null,\n    BranchID: parseInt(router.query.slug)\n  };\n  const {\n    0: dataCenter,\n    1: setDataCenter\n  } = useState();\n  const {\n    0: todoApi,\n    1: setTodoApi\n  } = useState(listTodoApi);\n  const {\n    0: roomData,\n    1: setRoomData\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState({\n    type: '',\n    status: false\n  });\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: totalPage,\n    1: setTotalPage\n  } = useState(null);\n  const {\n    0: indexRow,\n    1: setIndexRow\n  } = useState(null);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n\n  const _onSubmit = async dataSubmit => {\n    setIsLoading({\n      type: 'ADD_DATA',\n      status: true\n    });\n    let res = null;\n\n    if (dataSubmit.RoomID) {\n      try {\n        res = await roomApi.update(dataSubmit);\n\n        if (res.status == 200) {\n          let newDataSource = [...roomData];\n          newDataSource.splice(indexRow, 1, dataSubmit);\n          setRoomData(newDataSource); // showNoti(\"success\", res.data.message);\n        }\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'ADD_DATA',\n          status: false\n        });\n      }\n    } else {\n      try {\n        var _res;\n\n        res = await roomApi.add(dataSubmit);\n        ((_res = res) === null || _res === void 0 ? void 0 : _res.status) == 200 && afterPost(res.data.message);\n      } catch (error) {\n        showNoti('danger', error.message);\n      } finally {\n        setIsLoading({\n          type: 'ADD_DATA',\n          status: false\n        });\n      }\n    }\n\n    return res;\n  }; // AFTER SUBMIT\n\n\n  const afterPost = mes => {\n    showNoti('success', mes);\n    setTodoApi(_objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1\n    }));\n    setCurrentPage(1);\n  }; // DELETE ITEM\n\n\n  const onDelete = async id => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      let res = await roomApi.update({\n        RoomID: id,\n        Enable: false\n      });\n      (res === null || res === void 0 ? void 0 : res.status) == 200 && showNoti('success', res.data.message), setTodoApi(_objectSpread({}, todoApi));\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  }; // GET DATA CENTER\n\n\n  const getDataCenter = async () => {\n    // setLoadingSelect(true);\n    try {\n      let res = await branchApi.getAll({\n        pageIndex: 1,\n        pageSize: 9999\n      });\n      res.status == 200 && setDataCenter(res.data.data);\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {// setLoadingSelect(false);\n    }\n  }; // GET DATA ROOM\n\n\n  const getDataRoom = async () => {\n    setIsLoading({\n      type: 'GET_ALL',\n      status: true\n    });\n\n    try {\n      let res = await roomApi.getAll(todoApi);\n      res.status == 200 && (setRoomData(res.data.data), setTotalPage(res.data.totalRow), showNoti('success', 'Thành công'));\n      res.status == 204 && showNoti('danger', 'Không có dữ liệu');\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading({\n        type: 'GET_ALL',\n        status: false\n      });\n    }\n  }; // -------------- GET PAGE_NUMBER -----------------\n\n\n  const getPagination = pageNumber => {\n    pageIndex = pageNumber;\n    setCurrentPage(pageNumber);\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), {}, {\n      // ...listFieldSearch,\n      pageIndex: pageIndex\n    }));\n  }; // -------------- CHECK FIELD ---------------------\n\n\n  const checkField = (valueSearch, dataIndex) => {\n    let newList = _objectSpread({}, listFieldSearch);\n\n    Object.keys(newList).forEach(function (key) {\n      console.log('key: ', key);\n\n      if (key != dataIndex) {\n        if (key != 'pageIndex') {\n          newList[key] = null;\n        }\n      } else {\n        newList[key] = valueSearch;\n      }\n    });\n    return newList;\n  }; // ------------ ON SEARCH -----------------------\n\n\n  const onSearch = (valueSearch, dataIndex) => {\n    let clearKey = checkField(valueSearch, dataIndex);\n    setTodoApi(_objectSpread(_objectSpread({}, todoApi), clearKey));\n  }; // --------------- HANDLE SORT ----------------------\n\n\n  const handleSort = async option => {\n    let newTodoApi = _objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1,\n      sort: option.title.sort,\n      sortType: option.title.sortType\n    });\n\n    setCurrentPage(1), setTodoApi(newTodoApi);\n  }; // HANDLE RESET\n\n\n  const resetListFieldSearch = () => {\n    Object.keys(listFieldSearch).forEach(function (key) {\n      if (key != 'pageIndex') {\n        listFieldSearch[key] = null;\n      }\n    });\n  };\n\n  const handleReset = () => {\n    setTodoApi(_objectSpread(_objectSpread({}, listTodoApi), {}, {\n      pageIndex: 1\n    }));\n    setCurrentPage(1), resetListFieldSearch();\n  }; // Fetch Data\n\n\n  useEffect(() => {\n    getDataRoom();\n  }, [todoApi]);\n  useEffect(() => {\n    getDataCenter();\n  }, []);\n  const columns = [_objectSpread({\n    title: 'Mã phòng',\n    dataIndex: 'RoomCode',\n    width: 150\n  }, FilterColumn('roomCode', onSearch, handleReset, 'text')), _objectSpread({\n    title: 'Tên phòng',\n    dataIndex: 'RoomName'\n  }, FilterColumn('roomName', onSearch, handleReset, 'text')), {\n    title: 'Người cập nhật',\n    dataIndex: 'CreatedBy'\n  }, {\n    title: 'Ngày cập nhật',\n    dataIndex: 'ModifiedOn',\n    render: date => moment(date).format('DD/MM/YYYY')\n  }, {\n    render: (text, data, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(RoomForm, {\n        dataCenter: dataCenter,\n        getIndex: () => setIndexRow(index),\n        roomID: data.RoomID,\n        rowData: data,\n        isLoading: isLoading,\n        _onSubmit: data => _onSubmit(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(DeleteItem, {\n        onDelete: () => onDelete(data.RoomID)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PowerTable, {\n      currentPage: currentPage,\n      totalPage: totalPage && totalPage,\n      getPagination: pageNumber => getPagination(pageNumber),\n      loading: isLoading,\n      addClass: \"basic-header table-medium\",\n      TitlePage: \"Danh s\\xE1ch ph\\xF2ng\",\n      TitleCard: /*#__PURE__*/_jsxDEV(RoomForm, {\n        dataCenter: dataCenter,\n        showAdd: true,\n        addDataSuccess: () => getDataRoom(),\n        isLoading: isLoading,\n        _onSubmit: data => _onSubmit(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 6\n      }, this),\n      dataSource: roomData,\n      columns: columns,\n      Extra: /*#__PURE__*/_jsxDEV(SortBox, {\n        handleSort: value => handleSort(value),\n        dataOption: dataOption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\nRoom.layout = LayoutBase;\nexport default Room;","map":{"version":3,"sources":["D:/MonaMedia/Project/CodingMentor/CodingMentor-FE/src/components/Global/Room/Room.tsx"],"names":["React","useEffect","useState","PowerTable","LayoutBase","RoomForm","SortBox","FilterColumn","router","roomApi","branchApi","useWrap","DeleteItem","moment","pageIndex","listFieldSearch","roomCode","roomName","dataOption","dataSort","sort","sortType","text","Room","listTodoApi","pageSize","BranchID","parseInt","query","slug","dataCenter","setDataCenter","todoApi","setTodoApi","roomData","setRoomData","isLoading","setIsLoading","type","status","showNoti","totalPage","setTotalPage","indexRow","setIndexRow","currentPage","setCurrentPage","_onSubmit","dataSubmit","res","RoomID","update","newDataSource","splice","error","message","add","afterPost","data","mes","onDelete","id","Enable","getDataCenter","getAll","getDataRoom","totalRow","getPagination","pageNumber","checkField","valueSearch","dataIndex","newList","Object","keys","forEach","key","console","log","onSearch","clearKey","handleSort","option","newTodoApi","title","resetListFieldSearch","handleReset","columns","width","render","date","format","index","value","layout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport PowerTable from '~/components/PowerTable'\r\n\r\nimport LayoutBase from '~/components/LayoutBase'\r\nimport { Tooltip } from 'antd'\r\nimport RoomForm from '~/components/Global/Option/RoomForm'\r\nimport { RotateCcw } from 'react-feather'\r\nimport SortBox from '~/components/Elements/SortBox'\r\nimport FilterColumn from '~/components/Tables/FilterColumn'\r\nimport router from 'next/router'\r\nimport { roomApi, branchApi } from '~/apiBase'\r\nimport { useWrap } from '~/context/wrap'\r\nimport DeleteItem from '~/components/Tables/DeleteItem'\r\nimport moment from 'moment'\r\n\r\nlet pageIndex = 1\r\n\r\nlet listFieldSearch = {\r\n\troomCode: '',\r\n\troomName: '',\r\n\tpageIndex: 1\r\n}\r\n\r\nconst dataOption = [\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 1,\r\n\t\t\tsortType: false\r\n\t\t},\r\n\t\ttext: 'Mã giảm dần'\r\n\t},\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 1,\r\n\t\t\tsortType: true\r\n\t\t},\r\n\t\ttext: 'Mã tăng dần'\r\n\t},\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 2,\r\n\t\t\tsortType: false\r\n\t\t},\r\n\t\ttext: 'Tên giảm dần'\r\n\t},\r\n\t{\r\n\t\tdataSort: {\r\n\t\t\tsort: 2,\r\n\t\t\tsortType: true\r\n\t\t},\r\n\t\ttext: 'Tên tăng dần '\r\n\t}\r\n]\r\n\r\nconst Room = () => {\r\n\tconst listTodoApi = {\r\n\t\tpageSize: 10,\r\n\t\tpageIndex: pageIndex,\r\n\t\tsort: null,\r\n\t\tsortType: null,\r\n\t\troomCode: null,\r\n\t\troomName: null,\r\n\t\tBranchID: parseInt(router.query.slug as string)\r\n\t}\r\n\tconst [dataCenter, setDataCenter] = useState<IBranch[]>()\r\n\tconst [todoApi, setTodoApi] = useState(listTodoApi)\r\n\tconst [roomData, setRoomData] = useState<IRoom[]>([])\r\n\tconst [isLoading, setIsLoading] = useState({\r\n\t\ttype: '',\r\n\t\tstatus: false\r\n\t})\r\n\tconst { showNoti } = useWrap()\r\n\tconst [totalPage, setTotalPage] = useState(null)\r\n\tconst [indexRow, setIndexRow] = useState(null)\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\r\n\tconst _onSubmit = async (dataSubmit: any) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'ADD_DATA',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\tlet res = null\r\n\r\n\t\tif (dataSubmit.RoomID) {\r\n\t\t\ttry {\r\n\t\t\t\tres = await roomApi.update(dataSubmit)\r\n\r\n\t\t\t\tif (res.status == 200) {\r\n\t\t\t\t\tlet newDataSource = [...roomData]\r\n\t\t\t\t\tnewDataSource.splice(indexRow, 1, dataSubmit)\r\n\t\t\t\t\tsetRoomData(newDataSource)\r\n\t\t\t\t\t// showNoti(\"success\", res.data.message);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tres = await roomApi.add(dataSubmit)\r\n\t\t\t\tres?.status == 200 && afterPost(res.data.message)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tshowNoti('danger', error.message)\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading({\r\n\t\t\t\t\ttype: 'ADD_DATA',\r\n\t\t\t\t\tstatus: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn res\r\n\t}\r\n\r\n\t// AFTER SUBMIT\r\n\tconst afterPost = (mes) => {\r\n\t\tshowNoti('success', mes)\r\n\t\tsetTodoApi({\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1\r\n\t\t})\r\n\t\tsetCurrentPage(1)\r\n\t}\r\n\r\n\t// DELETE ITEM\r\n\tconst onDelete = async (id: number) => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await roomApi.update({ RoomID: id, Enable: false })\r\n\t\t\tres?.status == 200 && showNoti('success', res.data.message), setTodoApi({ ...todoApi })\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// GET DATA CENTER\r\n\tconst getDataCenter = async () => {\r\n\t\t// setLoadingSelect(true);\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await branchApi.getAll({\r\n\t\t\t\tpageIndex: 1,\r\n\t\t\t\tpageSize: 9999\r\n\t\t\t})\r\n\t\t\tres.status == 200 && setDataCenter(res.data.data)\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\t// setLoadingSelect(false);\r\n\t\t}\r\n\t}\r\n\r\n\t// GET DATA ROOM\r\n\tconst getDataRoom = async () => {\r\n\t\tsetIsLoading({\r\n\t\t\ttype: 'GET_ALL',\r\n\t\t\tstatus: true\r\n\t\t})\r\n\r\n\t\ttry {\r\n\t\t\tlet res = await roomApi.getAll(todoApi)\r\n\t\t\tres.status == 200 && (setRoomData(res.data.data), setTotalPage(res.data.totalRow), showNoti('success', 'Thành công'))\r\n\t\t\tres.status == 204 && showNoti('danger', 'Không có dữ liệu')\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading({\r\n\t\t\t\ttype: 'GET_ALL',\r\n\t\t\t\tstatus: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// -------------- GET PAGE_NUMBER -----------------\r\n\tconst getPagination = (pageNumber: number) => {\r\n\t\tpageIndex = pageNumber\r\n\t\tsetCurrentPage(pageNumber)\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t// ...listFieldSearch,\r\n\t\t\tpageIndex: pageIndex\r\n\t\t})\r\n\t}\r\n\r\n\t// -------------- CHECK FIELD ---------------------\r\n\tconst checkField = (valueSearch, dataIndex) => {\r\n\t\tlet newList = { ...listFieldSearch }\r\n\t\tObject.keys(newList).forEach(function (key) {\r\n\t\t\tconsole.log('key: ', key)\r\n\t\t\tif (key != dataIndex) {\r\n\t\t\t\tif (key != 'pageIndex') {\r\n\t\t\t\t\tnewList[key] = null\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnewList[key] = valueSearch\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn newList\r\n\t}\r\n\r\n\t// ------------ ON SEARCH -----------------------\r\n\tconst onSearch = (valueSearch, dataIndex) => {\r\n\t\tlet clearKey = checkField(valueSearch, dataIndex)\r\n\r\n\t\tsetTodoApi({\r\n\t\t\t...todoApi,\r\n\t\t\t...clearKey\r\n\t\t})\r\n\t}\r\n\r\n\t// --------------- HANDLE SORT ----------------------\r\n\tconst handleSort = async (option) => {\r\n\t\tlet newTodoApi = {\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1,\r\n\t\t\tsort: option.title.sort,\r\n\t\t\tsortType: option.title.sortType\r\n\t\t}\r\n\t\tsetCurrentPage(1), setTodoApi(newTodoApi)\r\n\t}\r\n\r\n\t// HANDLE RESET\r\n\tconst resetListFieldSearch = () => {\r\n\t\tObject.keys(listFieldSearch).forEach(function (key) {\r\n\t\t\tif (key != 'pageIndex') {\r\n\t\t\t\tlistFieldSearch[key] = null\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetTodoApi({\r\n\t\t\t...listTodoApi,\r\n\t\t\tpageIndex: 1\r\n\t\t})\r\n\t\tsetCurrentPage(1), resetListFieldSearch()\r\n\t}\r\n\r\n\t// Fetch Data\r\n\tuseEffect(() => {\r\n\t\tgetDataRoom()\r\n\t}, [todoApi])\r\n\r\n\tuseEffect(() => {\r\n\t\tgetDataCenter()\r\n\t}, [])\r\n\r\n\tconst columns = [\r\n\t\t{\r\n\t\t\ttitle: 'Mã phòng',\r\n\t\t\tdataIndex: 'RoomCode',\r\n\t\t\twidth: 150,\r\n\t\t\t...FilterColumn('roomCode', onSearch, handleReset, 'text')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Tên phòng',\r\n\t\t\tdataIndex: 'RoomName',\r\n\t\t\t...FilterColumn('roomName', onSearch, handleReset, 'text')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Người cập nhật',\r\n\t\t\tdataIndex: 'CreatedBy'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Ngày cập nhật',\r\n\t\t\tdataIndex: 'ModifiedOn',\r\n\t\t\trender: (date) => moment(date).format('DD/MM/YYYY')\r\n\t\t},\r\n\t\t{\r\n\t\t\trender: (text, data, index) => (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<RoomForm\r\n\t\t\t\t\t\tdataCenter={dataCenter}\r\n\t\t\t\t\t\tgetIndex={() => setIndexRow(index)}\r\n\t\t\t\t\t\troomID={data.RoomID}\r\n\t\t\t\t\t\trowData={data}\r\n\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t_onSubmit={(data: any) => _onSubmit(data)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<DeleteItem onDelete={() => onDelete(data.RoomID)} />\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\t}\r\n\t]\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<PowerTable\r\n\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\ttotalPage={totalPage && totalPage}\r\n\t\t\t\tgetPagination={(pageNumber: number) => getPagination(pageNumber)}\r\n\t\t\t\tloading={isLoading}\r\n\t\t\t\taddClass=\"basic-header table-medium\"\r\n\t\t\t\tTitlePage=\"Danh sách phòng\"\r\n\t\t\t\tTitleCard={\r\n\t\t\t\t\t<RoomForm\r\n\t\t\t\t\t\tdataCenter={dataCenter}\r\n\t\t\t\t\t\tshowAdd={true}\r\n\t\t\t\t\t\taddDataSuccess={() => getDataRoom()}\r\n\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t_onSubmit={(data: any) => _onSubmit(data)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tdataSource={roomData}\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tExtra={<SortBox handleSort={(value) => handleSort(value)} dataOption={dataOption} />}\r\n\t\t\t/>\r\n\t\t</>\r\n\t)\r\n}\r\nRoom.layout = LayoutBase\r\n\r\nexport default Room\r\n"]},"metadata":{},"sourceType":"module"}