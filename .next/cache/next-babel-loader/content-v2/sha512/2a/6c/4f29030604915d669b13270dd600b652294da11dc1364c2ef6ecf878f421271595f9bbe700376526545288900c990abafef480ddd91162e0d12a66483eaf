{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MonaMedia\\\\Project\\\\IELTS-NguyenHuyen-FE\\\\IELTS-Nguyen-Huyen\\\\src\\\\components\\\\Global\\\\Customer\\\\Student\\\\StudentAdvisory\\\\StudentAdvisoryMail.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Modal, Form, Spin, Tooltip } from 'antd';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport InputTextField from '~/components/FormControl/InputTextField';\nimport TextAreaField from '~/components/FormControl/TextAreaField';\nimport { studentAdviseApi } from '~/apiBase';\nimport { useWrap } from '~/context/wrap';\nimport { SendOutlined } from '@ant-design/icons';\nlet returnSchema = {};\nlet schema = null;\n\nconst StudentAdvisoryMail = props => {\n  const {\n    onFetchData,\n    dataSource,\n    loadingOutside,\n    dataRow,\n    listCustomer,\n    resetListCustomer,\n    showCheckBox\n  } = props;\n  const {\n    0: isModalVisible,\n    1: setIsModalVisible\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    showNoti\n  } = useWrap();\n  const {\n    0: listSendEmail,\n    1: setListSendEmail\n  } = useState([]); // console.log('dataRow: ', dataRow);\n  // console.log('listCustomer: ', listCustomer);\n\n  const showModal = () => {\n    if (!dataRow) {\n      if (listCustomer.length < 1) {\n        showCheckBox();\n      } else {\n        setIsModalVisible(true);\n      }\n    } else {\n      setIsModalVisible(true);\n    }\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const listID = () => {\n    let arrID = dataSource.map(item => item.ID);\n    console.log('arrID: ', arrID);\n    return arrID;\n  };\n\n  const defaultValuesInit = {\n    title: null,\n    content: null\n  };\n\n  (function returnSchemaFunc() {\n    returnSchema = _objectSpread({}, defaultValuesInit);\n    Object.keys(returnSchema).forEach(function (key) {\n      switch (key) {\n        case 'title':\n          returnSchema[key] = yup.mixed().required('Tiêu đề không được để trống');\n          break;\n\n        case 'content':\n          returnSchema[key] = yup.mixed().required('Nội dung không được để trống');\n          break;\n\n        default:\n          // returnSchema[key] = yup.mixed().required(\"Bạn không được để trống\");\n          break;\n      }\n    });\n    schema = yup.object().shape(returnSchema);\n  })();\n\n  const form = useForm({\n    defaultValues: defaultValuesInit,\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = async data => {\n    let dataSubmit = null;\n\n    if (!dataRow) {\n      dataSubmit = _objectSpread(_objectSpread({}, data), {}, {\n        customerIDs: listSendEmail\n      });\n    } else {\n      if (dataRow.ID == null) {\n        dataSubmit = _objectSpread(_objectSpread({}, data), {}, {\n          customerIDs: [dataRow.UserInformationID]\n        });\n      } else {\n        dataSubmit = _objectSpread(_objectSpread({}, data), {}, {\n          customerIDs: [dataRow.ID]\n        });\n      }\n    }\n\n    setIsLoading(true);\n\n    try {\n      let res = await studentAdviseApi.sendEmail(dataSubmit);\n\n      if (res.status === 200) {\n        showNoti('success', 'Gửi email thành công');\n        setIsModalVisible(false);\n        form.reset(defaultValuesInit);\n        resetListCustomer && resetListCustomer();\n        onFetchData && onFetchData();\n        showCheckBox && showCheckBox();\n      }\n    } catch (error) {\n      showNoti('danger', error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isModalVisible) {\n      if (!dataRow) {\n        listCustomer.length > 0 ? setListSendEmail([...listCustomer]) : setListSendEmail([]);\n      } else {\n        listSendEmail.push(dataRow.ID);\n        setListSendEmail([...listSendEmail]);\n      }\n    }\n  }, [isModalVisible]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!dataRow ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-secondary mr-2\",\n      onClick: showModal,\n      children: \"G\\u1EEDi mail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"G\\u1EEDi mail c\\xE1 nh\\xE2n\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-icon\",\n        onClick: showModal,\n        children: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      footer: null,\n      title: !dataRow ? 'Gửi mail hàng loạt' : 'Gửi mail',\n      visible: isModalVisible,\n      onOk: handleOk,\n      onCancel: handleCancel,\n      children: (listSendEmail === null || listSendEmail === void 0 ? void 0 : listSendEmail.length) < 1 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-weight-black\",\n        children: \"Vui l\\xF2ng ch\\u1ECDn kh\\xE1ch \\u0111\\u1EC3 g\\u1EEDi mail!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        layout: \"vertical\",\n        onFinish: form.handleSubmit(onSubmit),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(InputTextField, {\n              form: form,\n              name: \"title\",\n              label: \"Ti\\xEAu \\u0111\\u1EC1\",\n              placeholder: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12  mb-5\",\n            children: /*#__PURE__*/_jsxDEV(TextAreaField, {\n              form: form,\n              name: \"content\",\n              label: \"N\\u1ED9i dung\",\n              placeholder: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 mt-3\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary w-100\",\n              children: [\"L\\u01B0u\", isLoading && /*#__PURE__*/_jsxDEV(Spin, {\n                className: \"loading-base\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 24\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 3\n  }, this);\n};\n\nexport default StudentAdvisoryMail;","map":{"version":3,"sources":["D:/MonaMedia/Project/IELTS-NguyenHuyen-FE/IELTS-Nguyen-Huyen/src/components/Global/Customer/Student/StudentAdvisory/StudentAdvisoryMail.tsx"],"names":["React","useEffect","useState","Modal","Form","Spin","Tooltip","yup","yupResolver","useForm","InputTextField","TextAreaField","studentAdviseApi","useWrap","SendOutlined","returnSchema","schema","StudentAdvisoryMail","props","onFetchData","dataSource","loadingOutside","dataRow","listCustomer","resetListCustomer","showCheckBox","isModalVisible","setIsModalVisible","isLoading","setIsLoading","showNoti","listSendEmail","setListSendEmail","showModal","length","handleOk","handleCancel","listID","arrID","map","item","ID","console","log","defaultValuesInit","title","content","returnSchemaFunc","Object","keys","forEach","key","mixed","required","object","shape","form","defaultValues","resolver","onSubmit","data","dataSubmit","customerIDs","UserInformationID","res","sendEmail","status","reset","error","message","push","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Modal, Form, Spin, Tooltip } from 'antd'\r\nimport * as yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport InputTextField from '~/components/FormControl/InputTextField'\r\nimport TextAreaField from '~/components/FormControl/TextAreaField'\r\nimport { studentAdviseApi } from '~/apiBase'\r\nimport { useWrap } from '~/context/wrap'\r\nimport { SendOutlined } from '@ant-design/icons'\r\n\r\nlet returnSchema = {}\r\nlet schema = null\r\n\r\nconst StudentAdvisoryMail = (props) => {\r\n\tconst { onFetchData, dataSource, loadingOutside, dataRow, listCustomer, resetListCustomer, showCheckBox } = props\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false)\r\n\tconst [isLoading, setIsLoading] = useState(false)\r\n\tconst { showNoti } = useWrap()\r\n\tconst [listSendEmail, setListSendEmail] = useState([])\r\n\r\n\t// console.log('dataRow: ', dataRow);\r\n\t// console.log('listCustomer: ', listCustomer);\r\n\r\n\tconst showModal = () => {\r\n\t\tif (!dataRow) {\r\n\t\t\tif (listCustomer.length < 1) {\r\n\t\t\t\tshowCheckBox()\r\n\t\t\t} else {\r\n\t\t\t\tsetIsModalVisible(true)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsetIsModalVisible(true)\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleOk = () => {\r\n\t\tsetIsModalVisible(false)\r\n\t}\r\n\r\n\tconst handleCancel = () => {\r\n\t\tsetIsModalVisible(false)\r\n\t}\r\n\r\n\tconst listID = () => {\r\n\t\tlet arrID = dataSource.map((item) => item.ID)\r\n\r\n\t\tconsole.log('arrID: ', arrID)\r\n\r\n\t\treturn arrID\r\n\t}\r\n\r\n\tconst defaultValuesInit = {\r\n\t\ttitle: null,\r\n\t\tcontent: null\r\n\t}\r\n\r\n\t;(function returnSchemaFunc() {\r\n\t\treturnSchema = { ...defaultValuesInit }\r\n\t\tObject.keys(returnSchema).forEach(function (key) {\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase 'title':\r\n\t\t\t\t\treturnSchema[key] = yup.mixed().required('Tiêu đề không được để trống')\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'content':\r\n\t\t\t\t\treturnSchema[key] = yup.mixed().required('Nội dung không được để trống')\r\n\t\t\t\t\tbreak\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// returnSchema[key] = yup.mixed().required(\"Bạn không được để trống\");\r\n\t\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tschema = yup.object().shape(returnSchema)\r\n\t})()\r\n\r\n\tconst form = useForm({\r\n\t\tdefaultValues: defaultValuesInit,\r\n\t\tresolver: yupResolver(schema)\r\n\t})\r\n\r\n\tconst onSubmit = async (data: any) => {\r\n\t\tlet dataSubmit = null\r\n\t\tif (!dataRow) {\r\n\t\t\tdataSubmit = {\r\n\t\t\t\t...data,\r\n\t\t\t\tcustomerIDs: listSendEmail\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (dataRow.ID == null) {\r\n\t\t\t\tdataSubmit = {\r\n\t\t\t\t\t...data,\r\n\t\t\t\t\tcustomerIDs: [dataRow.UserInformationID]\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdataSubmit = {\r\n\t\t\t\t\t...data,\r\n\t\t\t\t\tcustomerIDs: [dataRow.ID]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetIsLoading(true)\r\n\t\ttry {\r\n\t\t\tlet res = await studentAdviseApi.sendEmail(dataSubmit)\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tshowNoti('success', 'Gửi email thành công')\r\n\t\t\t\tsetIsModalVisible(false)\r\n\t\t\t\tform.reset(defaultValuesInit)\r\n\t\t\t\tresetListCustomer && resetListCustomer()\r\n\t\t\t\tonFetchData && onFetchData()\r\n\t\t\t\tshowCheckBox && showCheckBox()\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tshowNoti('danger', error.message)\r\n\t\t} finally {\r\n\t\t\tsetIsLoading(false)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isModalVisible) {\r\n\t\t\tif (!dataRow) {\r\n\t\t\t\tlistCustomer.length > 0 ? setListSendEmail([...listCustomer]) : setListSendEmail([])\r\n\t\t\t} else {\r\n\t\t\t\tlistSendEmail.push(dataRow.ID)\r\n\t\t\t\tsetListSendEmail([...listSendEmail])\r\n\t\t\t}\r\n\t\t}\r\n\t}, [isModalVisible])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{!dataRow ? (\r\n\t\t\t\t<button className=\"btn btn-secondary mr-2\" onClick={showModal}>\r\n\t\t\t\t\tGửi mail\r\n\t\t\t\t</button>\r\n\t\t\t) : (\r\n\t\t\t\t<Tooltip title=\"Gửi mail cá nhân\">\r\n\t\t\t\t\t<button className=\"btn btn-icon\" onClick={showModal}>\r\n\t\t\t\t\t\t<SendOutlined />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t)}\r\n\r\n\t\t\t<Modal\r\n\t\t\t\tfooter={null}\r\n\t\t\t\ttitle={!dataRow ? 'Gửi mail hàng loạt' : 'Gửi mail'}\r\n\t\t\t\tvisible={isModalVisible}\r\n\t\t\t\tonOk={handleOk}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t>\r\n\t\t\t\t{listSendEmail?.length < 1 ? (\r\n\t\t\t\t\t<p className=\"font-weight-black\">Vui lòng chọn khách để gửi mail!</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Form layout=\"vertical\" onFinish={form.handleSubmit(onSubmit)}>\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<InputTextField form={form} name=\"title\" label=\"Tiêu đề\" placeholder=\"\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-12  mb-5\">\r\n\t\t\t\t\t\t\t\t<TextAreaField form={form} name=\"content\" label=\"Nội dung\" placeholder=\"\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-12 mt-3\">\r\n\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary w-100\">\r\n\t\t\t\t\t\t\t\t\tLưu\r\n\t\t\t\t\t\t\t\t\t{isLoading && <Spin className=\"loading-base\" />}\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default StudentAdvisoryMail\r\n"]},"metadata":{},"sourceType":"module"}